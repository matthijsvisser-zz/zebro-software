
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00802000  000014fa  0000158e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000494  00802096  00802096  00001624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bbd  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d9d  00000000  00000000  000043d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001270  00000000  00000000  00005176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000648  00000000  00000000  000063e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aea  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c2e  00000000  00000000  0000751a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00009148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	ce c1       	rjmp	.+924    	; 0x402 <__vector_25>
      66:	00 00       	nop
      68:	00 c2       	rjmp	.+1024   	; 0x46a <__vector_26>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c2       	rjmp	.+1120   	; 0x4d2 <__vector_28>
      72:	00 00       	nop
      74:	62 c2       	rjmp	.+1220   	; 0x53a <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea ef       	ldi	r30, 0xFA	; 250
     21c:	f4 e1       	ldi	r31, 0x14	; 20
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a6 39       	cpi	r26, 0x96	; 150
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	25 e2       	ldi	r18, 0x25	; 37
     232:	a6 e9       	ldi	r26, 0x96	; 150
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	aa 32       	cpi	r26, 0x2A	; 42
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	b0 d1       	rcall	.+864    	; 0x5a2 <main>
     242:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
     248:	88 ed       	ldi	r24, 0xD8	; 216
     24a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
     24c:	e0 e5       	ldi	r30, 0x50	; 80
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	82 60       	ori	r24, 0x02	; 2
     254:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	81 ff       	sbrs	r24, 1
     25a:	fd cf       	rjmp	.-6      	; 0x256 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
     25c:	88 ed       	ldi	r24, 0xD8	; 216
     25e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 40 00 	sts	0x0040, r24
     266:	08 95       	ret

00000268 <printHeaderList>:

node_t *listHead = NULL; // head

int sizeOfList(node_t *listHead);

void printHeaderList (void){
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	char* number = NULL;
	DebugPrint("\r\nPopulationlist\r\n");
     26c:	82 e1       	ldi	r24, 0x12	; 18
     26e:	90 e2       	ldi	r25, 0x20	; 32
     270:	ee d4       	rcall	.+2524   	; 0xc4e <DebugPrint>
    DebugPrint("Nr.\t");
     272:	85 e2       	ldi	r24, 0x25	; 37
     274:	90 e2       	ldi	r25, 0x20	; 32
     276:	eb d4       	rcall	.+2518   	; 0xc4e <DebugPrint>
    for (int iteration = 0; iteration < DATASIZE; ++iteration){
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	d0 e0       	ldi	r29, 0x00	; 0
    	DebugPrint("Data[");
     27c:	8a e2       	ldi	r24, 0x2A	; 42
     27e:	90 e2       	ldi	r25, 0x20	; 32
     280:	e6 d4       	rcall	.+2508   	; 0xc4e <DebugPrint>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     282:	4a e0       	ldi	r20, 0x0A	; 10
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	ce 01       	movw	r24, r28
     28a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__itoa_ncheck>
		itoa(iteration, number, 10);
		DebugPrint(number);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	dd d4       	rcall	.+2490   	; 0xc4e <DebugPrint>
		DebugPrint("]\t");
     294:	80 e3       	ldi	r24, 0x30	; 48
     296:	90 e2       	ldi	r25, 0x20	; 32
     298:	da d4       	rcall	.+2484   	; 0xc4e <DebugPrint>

void printHeaderList (void){
	char* number = NULL;
	DebugPrint("\r\nPopulationlist\r\n");
    DebugPrint("Nr.\t");
    for (int iteration = 0; iteration < DATASIZE; ++iteration){
     29a:	21 96       	adiw	r28, 0x01	; 1
     29c:	c5 30       	cpi	r28, 0x05	; 5
     29e:	d1 05       	cpc	r29, r1
     2a0:	69 f7       	brne	.-38     	; 0x27c <printHeaderList+0x14>
    	DebugPrint("Data[");
		itoa(iteration, number, 10);
		DebugPrint(number);
		DebugPrint("]\t");
    }
    DebugPrint("\r\n");
     2a2:	8e e4       	ldi	r24, 0x4E	; 78
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	d3 d4       	rcall	.+2470   	; 0xc4e <DebugPrint>
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <print_list>:
 * @param  item 	Used for iteration
 * @param  *current Status pointer to the current memory location
 * @param  data     Data from memory
 * @param  next    Status pointer to the next memory location
 */
void print_list(node_t *listHead) {
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	7c 01       	movw	r14, r24
	char* number = NULL;
	int item, listNumber = 0;
    node_t *current = listHead;

    printHeaderList();
     2c0:	d3 df       	rcall	.-90     	; 0x268 <printHeaderList>
    while(current != NULL) {
     2c2:	e1 14       	cp	r14, r1
     2c4:	f1 04       	cpc	r15, r1
     2c6:	91 f1       	breq	.+100    	; 0x32c <print_list+0x7e>
 * @param  data     Data from memory
 * @param  next    Status pointer to the next memory location
 */
void print_list(node_t *listHead) {
	char* number = NULL;
	int item, listNumber = 0;
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	c6 01       	movw	r24, r12
     2d4:	0e 94 48 0a 	call	0x1490	; 0x1490 <__itoa_ncheck>
    node_t *current = listHead;

    printHeaderList();
    while(current != NULL) {
		itoa(listNumber, number, 10);
		DebugPrint(number);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	b8 d4       	rcall	.+2416   	; 0xc4e <DebugPrint>
		DebugPrint("\t");
     2de:	88 e2       	ldi	r24, 0x28	; 40
     2e0:	90 e2       	ldi	r25, 0x20	; 32
     2e2:	b5 d4       	rcall	.+2410   	; 0xc4e <DebugPrint>
     2e4:	87 01       	movw	r16, r14
        for(item = 0; item < DATASIZE; item++){
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
			
        	DebugPrint(current -> data[item]);
     2ea:	f8 01       	movw	r30, r16
     2ec:	81 91       	ld	r24, Z+
     2ee:	91 91       	ld	r25, Z+
     2f0:	8f 01       	movw	r16, r30
     2f2:	ad d4       	rcall	.+2394   	; 0xc4e <DebugPrint>
			DebugPrint("\t");
     2f4:	88 e2       	ldi	r24, 0x28	; 40
     2f6:	90 e2       	ldi	r25, 0x20	; 32
     2f8:	aa d4       	rcall	.+2388   	; 0xc4e <DebugPrint>
    printHeaderList();
    while(current != NULL) {
		itoa(listNumber, number, 10);
		DebugPrint(number);
		DebugPrint("\t");
        for(item = 0; item < DATASIZE; item++){
     2fa:	21 96       	adiw	r28, 0x01	; 1
     2fc:	c5 30       	cpi	r28, 0x05	; 5
     2fe:	d1 05       	cpc	r29, r1
     300:	a1 f7       	brne	.-24     	; 0x2ea <print_list+0x3c>
			
        	DebugPrint(current -> data[item]);
			DebugPrint("\t");
        }  
        DebugPrint("\r\n");
     302:	8e e4       	ldi	r24, 0x4E	; 78
     304:	90 e2       	ldi	r25, 0x20	; 32
     306:	a3 d4       	rcall	.+2374   	; 0xc4e <DebugPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     308:	ff ef       	ldi	r31, 0xFF	; 255
     30a:	23 ec       	ldi	r18, 0xC3	; 195
     30c:	89 e0       	ldi	r24, 0x09	; 9
     30e:	f1 50       	subi	r31, 0x01	; 1
     310:	20 40       	sbci	r18, 0x00	; 0
     312:	80 40       	sbci	r24, 0x00	; 0
     314:	e1 f7       	brne	.-8      	; 0x30e <print_list+0x60>
     316:	00 c0       	rjmp	.+0      	; 0x318 <print_list+0x6a>
     318:	00 00       	nop
		_delay_ms(100);
        current = current -> next;
     31a:	f7 01       	movw	r30, r14
     31c:	e2 84       	ldd	r14, Z+10	; 0x0a
     31e:	f3 84       	ldd	r15, Z+11	; 0x0b
        ++listNumber;
     320:	ff ef       	ldi	r31, 0xFF	; 255
     322:	cf 1a       	sub	r12, r31
     324:	df 0a       	sbc	r13, r31
	char* number = NULL;
	int item, listNumber = 0;
    node_t *current = listHead;

    printHeaderList();
    while(current != NULL) {
     326:	e1 14       	cp	r14, r1
     328:	f1 04       	cpc	r15, r1
     32a:	81 f6       	brne	.-96     	; 0x2cc <print_list+0x1e>
        DebugPrint("\r\n");
		_delay_ms(100);
        current = current -> next;
        ++listNumber;
    }
}
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <append>:
 * @param  *head    List variable
 * @param  data     Data to write to memory
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 */
void append (node_t *listHead, char* data[DATASIZE]){
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	ec 01       	movw	r28, r24
     348:	06 2f       	mov	r16, r22
     34a:	17 2f       	mov	r17, r23
	node_t *current = listHead;
	while (current -> next != NULL){
     34c:	2a 85       	ldd	r18, Y+10	; 0x0a
     34e:	3b 85       	ldd	r19, Y+11	; 0x0b
     350:	21 15       	cp	r18, r1
     352:	31 05       	cpc	r19, r1
     354:	11 f0       	breq	.+4      	; 0x35a <append+0x1c>
		current = current -> next;
     356:	e9 01       	movw	r28, r18
     358:	f9 cf       	rjmp	.-14     	; 0x34c <append+0xe>
	}
	current -> next = (struct node *) malloc(sizeof(node_t));
     35a:	8c e0       	ldi	r24, 0x0C	; 12
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	4f d7       	rcall	.+3742   	; 0x11fe <malloc>
     360:	8a 87       	std	Y+10, r24	; 0x0a
     362:	9b 87       	std	Y+11, r25	; 0x0b
     364:	e0 2f       	mov	r30, r16
     366:	f1 2f       	mov	r31, r17
	for (int item = 0; item < DATASIZE; ++item){
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
		current -> next -> data[item] = data[item];
     36c:	aa 85       	ldd	r26, Y+10	; 0x0a
     36e:	bb 85       	ldd	r27, Y+11	; 0x0b
     370:	21 91       	ld	r18, Z+
     372:	31 91       	ld	r19, Z+
     374:	ac 01       	movw	r20, r24
     376:	44 0f       	add	r20, r20
     378:	55 1f       	adc	r21, r21
     37a:	a4 0f       	add	r26, r20
     37c:	b5 1f       	adc	r27, r21
     37e:	2d 93       	st	X+, r18
     380:	3c 93       	st	X, r19
	node_t *current = listHead;
	while (current -> next != NULL){
		current = current -> next;
	}
	current -> next = (struct node *) malloc(sizeof(node_t));
	for (int item = 0; item < DATASIZE; ++item){
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	85 30       	cpi	r24, 0x05	; 5
     386:	91 05       	cpc	r25, r1
     388:	89 f7       	brne	.-30     	; 0x36c <append+0x2e>
		current -> next -> data[item] = data[item];
	}
	current -> next -> next = NULL;
     38a:	ea 85       	ldd	r30, Y+10	; 0x0a
     38c:	fb 85       	ldd	r31, Y+11	; 0x0b
     38e:	12 86       	std	Z+10, r1	; 0x0a
     390:	13 86       	std	Z+11, r1	; 0x0b
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <insert>:
 * @param  data     Data to write to memory
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 * @param  item 	Used for iteration
 */
void insert (node_t ** listHead, char* dataInternal [DATASIZE]){
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	8c 01       	movw	r16, r24
     3aa:	e6 2e       	mov	r14, r22
     3ac:	f7 2e       	mov	r15, r23
	node_t * new_node;
	size_t size = sizeof(node_t);
	
	new_node = (struct node *) malloc(sizeof(node_t));
     3ae:	8c e0       	ldi	r24, 0x0C	; 12
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	25 d7       	rcall	.+3658   	; 0x11fe <malloc>
     3b4:	ec 01       	movw	r28, r24
	if (new_node == NULL){
     3b6:	00 97       	sbiw	r24, 0x00	; 0
     3b8:	19 f4       	brne	.+6      	; 0x3c0 <insert+0x24>
		DebugPrint("No memory");
     3ba:	83 e3       	ldi	r24, 0x33	; 51
     3bc:	90 e2       	ldi	r25, 0x20	; 32
     3be:	47 d4       	rcall	.+2190   	; 0xc4e <DebugPrint>
	}

	memset(new_node, 0, sizeof(node_t));
     3c0:	8c e0       	ldi	r24, 0x0C	; 12
     3c2:	fe 01       	movw	r30, r28
     3c4:	11 92       	st	Z+, r1
     3c6:	8a 95       	dec	r24
     3c8:	e9 f7       	brne	.-6      	; 0x3c4 <insert+0x28>
     3ca:	ee 2d       	mov	r30, r14
     3cc:	ff 2d       	mov	r31, r15
     3ce:	de 01       	movw	r26, r28
	
	for (int item = 0; item < DATASIZE; ++item){
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
		new_node -> data[item] = dataInternal[item];
     3d4:	41 91       	ld	r20, Z+
     3d6:	51 91       	ld	r21, Z+
     3d8:	4d 93       	st	X+, r20
     3da:	5d 93       	st	X+, r21
		DebugPrint("No memory");
	}

	memset(new_node, 0, sizeof(node_t));
	
	for (int item = 0; item < DATASIZE; ++item){
     3dc:	2f 5f       	subi	r18, 0xFF	; 255
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	25 30       	cpi	r18, 0x05	; 5
     3e2:	31 05       	cpc	r19, r1
     3e4:	b9 f7       	brne	.-18     	; 0x3d4 <insert+0x38>
		new_node -> data[item] = dataInternal[item];
	}
	
	new_node -> next = *listHead;
     3e6:	f8 01       	movw	r30, r16
     3e8:	80 81       	ld	r24, Z
     3ea:	91 81       	ldd	r25, Z+1	; 0x01
     3ec:	8a 87       	std	Y+10, r24	; 0x0a
     3ee:	9b 87       	std	Y+11, r25	; 0x0b
	*listHead = new_node;
     3f0:	c0 83       	st	Z, r28
     3f2:	d1 83       	std	Z+1, r29	; 0x01
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	08 95       	ret

00000402 <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	08 b6       	in	r0, 0x38	; 56
     40e:	0f 92       	push	r0
     410:	18 be       	out	0x38, r1	; 56
     412:	09 b6       	in	r0, 0x39	; 57
     414:	0f 92       	push	r0
     416:	19 be       	out	0x39, r1	; 57
     418:	0b b6       	in	r0, 0x3b	; 59
     41a:	0f 92       	push	r0
     41c:	1b be       	out	0x3b, r1	; 59
     41e:	2f 93       	push	r18
     420:	3f 93       	push	r19
     422:	4f 93       	push	r20
     424:	5f 93       	push	r21
     426:	6f 93       	push	r22
     428:	7f 93       	push	r23
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
     436:	88 e9       	ldi	r24, 0x98	; 152
     438:	90 e2       	ldi	r25, 0x20	; 32
     43a:	6e d4       	rcall	.+2268   	; 0xd18 <USART_RXComplete>
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0b be       	out	0x3b, r0	; 59
     458:	0f 90       	pop	r0
     45a:	09 be       	out	0x39, r0	; 57
     45c:	0f 90       	pop	r0
     45e:	08 be       	out	0x38, r0	; 56
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	08 b6       	in	r0, 0x38	; 56
     476:	0f 92       	push	r0
     478:	18 be       	out	0x38, r1	; 56
     47a:	09 b6       	in	r0, 0x39	; 57
     47c:	0f 92       	push	r0
     47e:	19 be       	out	0x39, r1	; 57
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	0f 92       	push	r0
     484:	1b be       	out	0x3b, r1	; 59
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
     49e:	88 e9       	ldi	r24, 0x98	; 152
     4a0:	90 e2       	ldi	r25, 0x20	; 32
     4a2:	55 d4       	rcall	.+2218   	; 0xd4e <USART_DataRegEmpty>
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0b be       	out	0x3b, r0	; 59
     4c0:	0f 90       	pop	r0
     4c2:	09 be       	out	0x39, r0	; 57
     4c4:	0f 90       	pop	r0
     4c6:	08 be       	out	0x38, r0	; 56
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	08 b6       	in	r0, 0x38	; 56
     4de:	0f 92       	push	r0
     4e0:	18 be       	out	0x38, r1	; 56
     4e2:	09 b6       	in	r0, 0x39	; 57
     4e4:	0f 92       	push	r0
     4e6:	19 be       	out	0x39, r1	; 57
     4e8:	0b b6       	in	r0, 0x3b	; 59
     4ea:	0f 92       	push	r0
     4ec:	1b be       	out	0x3b, r1	; 59
     4ee:	2f 93       	push	r18
     4f0:	3f 93       	push	r19
     4f2:	4f 93       	push	r20
     4f4:	5f 93       	push	r21
     4f6:	6f 93       	push	r22
     4f8:	7f 93       	push	r23
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
     4fe:	af 93       	push	r26
     500:	bf 93       	push	r27
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     506:	8f e9       	ldi	r24, 0x9F	; 159
     508:	92 e2       	ldi	r25, 0x22	; 34
     50a:	06 d4       	rcall	.+2060   	; 0xd18 <USART_RXComplete>
}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0b be       	out	0x3b, r0	; 59
     528:	0f 90       	pop	r0
     52a:	09 be       	out	0x39, r0	; 57
     52c:	0f 90       	pop	r0
     52e:	08 be       	out	0x38, r0	; 56
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	08 b6       	in	r0, 0x38	; 56
     546:	0f 92       	push	r0
     548:	18 be       	out	0x38, r1	; 56
     54a:	09 b6       	in	r0, 0x39	; 57
     54c:	0f 92       	push	r0
     54e:	19 be       	out	0x39, r1	; 57
     550:	0b b6       	in	r0, 0x3b	; 59
     552:	0f 92       	push	r0
     554:	1b be       	out	0x3b, r1	; 59
     556:	2f 93       	push	r18
     558:	3f 93       	push	r19
     55a:	4f 93       	push	r20
     55c:	5f 93       	push	r21
     55e:	6f 93       	push	r22
     560:	7f 93       	push	r23
     562:	8f 93       	push	r24
     564:	9f 93       	push	r25
     566:	af 93       	push	r26
     568:	bf 93       	push	r27
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     56e:	8f e9       	ldi	r24, 0x9F	; 159
     570:	92 e2       	ldi	r25, 0x22	; 34
     572:	ed d3       	rcall	.+2010   	; 0xd4e <USART_DataRegEmpty>
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	09 be       	out	0x39, r0	; 57
     594:	0f 90       	pop	r0
     596:	08 be       	out	0x38, r0	; 56
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <main>:
extern node_t *listHead; // head


#define UPDATEINTERVAL 100			// in ms

int main(void){
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	c6 59       	subi	r28, 0x96	; 150
     5ac:	d1 09       	sbc	r29, r1
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
     5b2:	4a de       	rcall	.-876    	; 0x248 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
     5b4:	c1 2c       	mov	r12, r1
     5b6:	e1 2c       	mov	r14, r1
     5b8:	12 ec       	ldi	r17, 0xC2	; 194
     5ba:	f1 2e       	mov	r15, r17
     5bc:	01 e0       	ldi	r16, 0x01	; 1
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	38 e4       	ldi	r19, 0x48	; 72
     5c4:	48 ee       	ldi	r20, 0xE8	; 232
     5c6:	51 e0       	ldi	r21, 0x01	; 1
     5c8:	60 ea       	ldi	r22, 0xA0	; 160
     5ca:	78 e0       	ldi	r23, 0x08	; 8
     5cc:	88 e9       	ldi	r24, 0x98	; 152
     5ce:	90 e2       	ldi	r25, 0x20	; 32
     5d0:	e1 d2       	rcall	.+1474   	; 0xb94 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	38 e4       	ldi	r19, 0x48	; 72
     5d6:	48 ee       	ldi	r20, 0xE8	; 232
     5d8:	51 e0       	ldi	r21, 0x01	; 1
     5da:	60 eb       	ldi	r22, 0xB0	; 176
     5dc:	78 e0       	ldi	r23, 0x08	; 8
     5de:	8f e9       	ldi	r24, 0x9F	; 159
     5e0:	92 e2       	ldi	r25, 0x22	; 34
     5e2:	d8 d2       	rcall	.+1456   	; 0xb94 <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	e0 ea       	ldi	r30, 0xA0	; 160
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	82 83       	std	Z+2, r24	; 0x02
	sei();
     5ec:	78 94       	sei
	
	DebugPrint(CLEARTERM);
     5ee:	8d e3       	ldi	r24, 0x3D	; 61
     5f0:	90 e2       	ldi	r25, 0x20	; 32
     5f2:	2d d3       	rcall	.+1626   	; 0xc4e <DebugPrint>
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	83 ec       	ldi	r24, 0xC3	; 195
     5f8:	99 e0       	ldi	r25, 0x09	; 9
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	80 40       	sbci	r24, 0x00	; 0
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x58>
     602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x62>
     604:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
     606:	88 e4       	ldi	r24, 0x48	; 72
     608:	90 e2       	ldi	r25, 0x20	; 32
     60a:	26 d3       	rcall	.+1612   	; 0xc58 <Command>
	Command(SBIV500);
     60c:	81 e5       	ldi	r24, 0x51	; 81
     60e:	90 e2       	ldi	r25, 0x20	; 32
     610:	23 d3       	rcall	.+1606   	; 0xc58 <Command>
	
	char* database [DATASIZE];
	char buffer [12] = "abcdefg";
     612:	88 e0       	ldi	r24, 0x08	; 8
     614:	e6 e0       	ldi	r30, 0x06	; 6
     616:	f0 e2       	ldi	r31, 0x20	; 32
     618:	de 01       	movw	r26, r28
     61a:	1b 96       	adiw	r26, 0x0b	; 11
     61c:	01 90       	ld	r0, Z+
     61e:	0d 92       	st	X+, r0
     620:	8a 95       	dec	r24
     622:	e1 f7       	brne	.-8      	; 0x61c <main+0x7a>
     624:	1b 8a       	std	Y+19, r1	; 0x13
     626:	1c 8a       	std	Y+20, r1	; 0x14
     628:	1d 8a       	std	Y+21, r1	; 0x15
     62a:	1e 8a       	std	Y+22, r1	; 0x16
	
	for (int i = 0; i < DATASIZE; ++i){
		database[i]= buffer;
     62c:	ce 01       	movw	r24, r28
     62e:	0b 96       	adiw	r24, 0x0b	; 11
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	8b 83       	std	Y+3, r24	; 0x03
     636:	9c 83       	std	Y+4, r25	; 0x04
     638:	8d 83       	std	Y+5, r24	; 0x05
     63a:	9e 83       	std	Y+6, r25	; 0x06
     63c:	8f 83       	std	Y+7, r24	; 0x07
     63e:	98 87       	std	Y+8, r25	; 0x08
     640:	89 87       	std	Y+9, r24	; 0x09
     642:	9a 87       	std	Y+10, r25	; 0x0a
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	83 ec       	ldi	r24, 0xC3	; 195
     648:	99 e0       	ldi	r25, 0x09	; 9
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	80 40       	sbci	r24, 0x00	; 0
     64e:	90 40       	sbci	r25, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <main+0xa8>
     652:	00 c0       	rjmp	.+0      	; 0x654 <main+0xb2>
     654:	00 00       	nop
	}

//	for (int i = 1; i < 20; ++i){
	  _delay_ms(UPDATEINTERVAL);	
	  insert(&listHead,database);
     656:	be 01       	movw	r22, r28
     658:	6f 5f       	subi	r22, 0xFF	; 255
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	86 e9       	ldi	r24, 0x96	; 150
     65e:	90 e2       	ldi	r25, 0x20	; 32
     660:	9d de       	rcall	.-710    	; 0x39c <insert>
	
	
	while(1) {
		char message[128];
		
		memset(message, EOS, strlen(message));
     662:	8e 01       	movw	r16, r28
     664:	09 5e       	subi	r16, 0xE9	; 233
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	f8 01       	movw	r30, r16
     66a:	01 90       	ld	r0, Z+
     66c:	00 20       	and	r0, r0
     66e:	e9 f7       	brne	.-6      	; 0x66a <main+0xc8>
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	af 01       	movw	r20, r30
     674:	40 1b       	sub	r20, r16
     676:	51 0b       	sbc	r21, r17
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	c8 01       	movw	r24, r16
     67e:	e6 d6       	rcall	.+3532   	; 0x144c <memset>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	83 ec       	ldi	r24, 0xC3	; 195
     684:	99 e0       	ldi	r25, 0x09	; 9
     686:	21 50       	subi	r18, 0x01	; 1
     688:	80 40       	sbci	r24, 0x00	; 0
     68a:	90 40       	sbci	r25, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <main+0xe4>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <main+0xee>
     690:	00 00       	nop
		//DebugPrint(CLEARTERM);
		_delay_ms(UPDATEINTERVAL);
		
		//DebugPrint(TranslateMessage());
		strcpy(message,TranslateMessage());
     692:	01 d1       	rcall	.+514    	; 0x896 <TranslateMessage>
     694:	bc 01       	movw	r22, r24
     696:	c8 01       	movw	r24, r16
     698:	f4 d6       	rcall	.+3560   	; 0x1482 <strcpy>
		
		DebugPrint("\r\n");
     69a:	8e e4       	ldi	r24, 0x4E	; 78
     69c:	90 e2       	ldi	r25, 0x20	; 32
     69e:	d7 d2       	rcall	.+1454   	; 0xc4e <DebugPrint>
		if (ValidateMessage(message,TYPE_RRN) == true){
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	c8 01       	movw	r24, r16
     6a4:	09 d0       	rcall	.+18     	; 0x6b8 <ValidateMessage>
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	19 f4       	brne	.+6      	; 0x6b0 <main+0x10e>
			DetermineCommandtype(message);
     6aa:	c8 01       	movw	r24, r16
     6ac:	75 d0       	rcall	.+234    	; 0x798 <DetermineCommandtype>
     6ae:	dc cf       	rjmp	.-72     	; 0x668 <main+0xc6>
		}else{
			DebugPrint("Not valid");
     6b0:	8c e5       	ldi	r24, 0x5C	; 92
     6b2:	90 e2       	ldi	r25, 0x20	; 32
     6b4:	cc d2       	rcall	.+1432   	; 0xc4e <DebugPrint>
		}

	}
     6b6:	d8 cf       	rjmp	.-80     	; 0x668 <main+0xc6>

000006b8 <ValidateMessage>:
 * @param	
 */
void RRN_function (char *message){
	uart_puts(&uartC1, "\r\nfunctie\r\n");
	DebugPrint(message);
}
     6b8:	fc 01       	movw	r30, r24
     6ba:	01 90       	ld	r0, Z+
     6bc:	00 20       	and	r0, r0
     6be:	e9 f7       	brne	.-6      	; 0x6ba <ValidateMessage+0x2>
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	e8 1b       	sub	r30, r24
     6c4:	f9 0b       	sbc	r31, r25
     6c6:	61 30       	cpi	r22, 0x01	; 1
     6c8:	29 f4       	brne	.+10     	; 0x6d4 <ValidateMessage+0x1c>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	e9 32       	cpi	r30, 0x29	; 41
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <ValidateMessage+0x1e>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 95       	ret
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	08 95       	ret

000006d8 <fillpopulationlist>:
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	66 97       	sbiw	r28, 0x16	; 22
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	8c 01       	movw	r16, r24
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	fc 01       	movw	r30, r24
     6f2:	01 90       	ld	r0, Z+
     6f4:	00 20       	and	r0, r0
     6f6:	e9 f7       	brne	.-6      	; 0x6f2 <fillpopulationlist+0x1a>
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	af 01       	movw	r20, r30
     6fc:	48 1b       	sub	r20, r24
     6fe:	59 0b       	sbc	r21, r25
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	a3 d6       	rcall	.+3398   	; 0x144c <memset>
     706:	f8 01       	movw	r30, r16
     708:	81 81       	ldd	r24, Z+1	; 0x01
     70a:	8c 32       	cpi	r24, 0x2C	; 44
     70c:	71 f0       	breq	.+28     	; 0x72a <fillpopulationlist+0x52>
     70e:	32 96       	adiw	r30, 0x02	; 2
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a1 e0       	ldi	r26, 0x01	; 1
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	ac 0f       	add	r26, r28
     718:	bd 1f       	adc	r27, r29
     71a:	a9 0f       	add	r26, r25
     71c:	b1 1d       	adc	r27, r1
     71e:	8c 93       	st	X, r24
     720:	9f 5f       	subi	r25, 0xFF	; 255
     722:	81 91       	ld	r24, Z+
     724:	8c 32       	cpi	r24, 0x2C	; 44
     726:	a9 f7       	brne	.-22     	; 0x712 <fillpopulationlist+0x3a>
     728:	01 c0       	rjmp	.+2      	; 0x72c <fillpopulationlist+0x54>
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	8e 01       	movw	r16, r28
     72e:	0f 5f       	subi	r16, 0xFF	; 255
     730:	1f 4f       	sbci	r17, 0xFF	; 255
     732:	f8 01       	movw	r30, r16
     734:	e9 0f       	add	r30, r25
     736:	f1 1d       	adc	r31, r1
     738:	10 82       	st	Z, r1
     73a:	8d 85       	ldd	r24, Y+13	; 0x0d
     73c:	9e 85       	ldd	r25, Y+14	; 0x0e
     73e:	fc 01       	movw	r30, r24
     740:	01 90       	ld	r0, Z+
     742:	00 20       	and	r0, r0
     744:	e9 f7       	brne	.-6      	; 0x740 <fillpopulationlist+0x68>
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	af 01       	movw	r20, r30
     74a:	48 1b       	sub	r20, r24
     74c:	59 0b       	sbc	r21, r25
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	7c d6       	rcall	.+3320   	; 0x144c <memset>
     754:	0d 87       	std	Y+13, r16	; 0x0d
     756:	1e 87       	std	Y+14, r17	; 0x0e
     758:	0f 87       	std	Y+15, r16	; 0x0f
     75a:	18 8b       	std	Y+16, r17	; 0x10
     75c:	09 8b       	std	Y+17, r16	; 0x11
     75e:	1a 8b       	std	Y+18, r17	; 0x12
     760:	0b 8b       	std	Y+19, r16	; 0x13
     762:	1c 8b       	std	Y+20, r17	; 0x14
     764:	0d 8b       	std	Y+21, r16	; 0x15
     766:	1e 8b       	std	Y+22, r17	; 0x16
     768:	be 01       	movw	r22, r28
     76a:	63 5f       	subi	r22, 0xF3	; 243
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	80 91 96 20 	lds	r24, 0x2096
     772:	90 91 97 20 	lds	r25, 0x2097
     776:	e3 dd       	rcall	.-1082   	; 0x33e <append>
     778:	8d e3       	ldi	r24, 0x3D	; 61
     77a:	90 e2       	ldi	r25, 0x20	; 32
     77c:	68 d2       	rcall	.+1232   	; 0xc4e <DebugPrint>
     77e:	80 91 96 20 	lds	r24, 0x2096
     782:	90 91 97 20 	lds	r25, 0x2097
     786:	93 dd       	rcall	.-1242   	; 0x2ae <print_list>
     788:	66 96       	adiw	r28, 0x16	; 22
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <DetermineCommandtype>:
/**
 * Determines the meaning of the message
 * @param  	value	received value
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <DetermineCommandtype+0xe>
     7a6:	1f 92       	push	r1
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	7c 01       	movw	r14, r24
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
	
	memset(command, EOS, strlen(command));	
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	fc 01       	movw	r30, r24
     7b4:	01 90       	ld	r0, Z+
     7b6:	00 20       	and	r0, r0
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <DetermineCommandtype+0x1c>
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	af 01       	movw	r20, r30
     7be:	48 1b       	sub	r20, r24
     7c0:	59 0b       	sbc	r21, r25
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	42 d6       	rcall	.+3204   	; 0x144c <memset>
	messagePointer = message;
	
	DebugPrint(message);
     7c8:	c7 01       	movw	r24, r14
     7ca:	41 d2       	rcall	.+1154   	; 0xc4e <DebugPrint>

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     7cc:	f7 01       	movw	r30, r14
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
     7d0:	8a 33       	cpi	r24, 0x3A	; 58
     7d2:	29 f4       	brne	.+10     	; 0x7de <DetermineCommandtype+0x46>
	memset(command, EOS, strlen(command));	
	messagePointer = message;
	
	DebugPrint(message);

	*messagePointer++;
     7d4:	87 01       	movw	r16, r14
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	21 c0       	rjmp	.+66     	; 0x820 <DetermineCommandtype+0x88>
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     7de:	87 01       	movw	r16, r14
     7e0:	0e 5f       	subi	r16, 0xFE	; 254
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
		if(*messagePointer == ( COMMAND_END)){ break;}		
     7e4:	f7 01       	movw	r30, r14
     7e6:	92 81       	ldd	r25, Z+2	; 0x02
     7e8:	9a 33       	cpi	r25, 0x3A	; 58
     7ea:	c9 f0       	breq	.+50     	; 0x81e <DetermineCommandtype+0x86>
     7ec:	98 01       	movw	r18, r16
     7ee:	d7 01       	movw	r26, r14
     7f0:	13 96       	adiw	r26, 0x03	; 3
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <DetermineCommandtype+0x66>
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     7f6:	89 01       	movw	r16, r18
		if(*messagePointer == ( COMMAND_END)){ break;}		
     7f8:	9d 91       	ld	r25, X+
     7fa:	9a 33       	cpi	r25, 0x3A	; 58
     7fc:	89 f0       	breq	.+34     	; 0x820 <DetermineCommandtype+0x88>
     7fe:	89 01       	movw	r16, r18
		command[count] = *messagePointer;		
     800:	e1 e0       	ldi	r30, 0x01	; 1
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	ec 0f       	add	r30, r28
     806:	fd 1f       	adc	r31, r29
     808:	e8 0f       	add	r30, r24
     80a:	f1 1d       	adc	r31, r1
     80c:	90 83       	st	Z, r25
		count++;
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	2f 5f       	subi	r18, 0xFF	; 255
     812:	3f 4f       	sbci	r19, 0xFF	; 255
	
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     814:	f8 01       	movw	r30, r16
     816:	90 81       	ld	r25, Z
     818:	9a 33       	cpi	r25, 0x3A	; 58
     81a:	69 f7       	brne	.-38     	; 0x7f6 <DetermineCommandtype+0x5e>
     81c:	01 c0       	rjmp	.+2      	; 0x820 <DetermineCommandtype+0x88>
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     81e:	80 e0       	ldi	r24, 0x00	; 0
		*messagePointer++;
		if(*messagePointer == ( COMMAND_END)){ break;}		
		command[count] = *messagePointer;		
		count++;
	}
	command[count] = EOS;
     820:	e1 e0       	ldi	r30, 0x01	; 1
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ec 0f       	add	r30, r28
     826:	fd 1f       	adc	r31, r29
     828:	e8 0f       	add	r30, r24
     82a:	f1 1d       	adc	r31, r1
     82c:	10 82       	st	Z, r1
	
	*messagePointer++;

	if		(strcmp(command, "*RRN") == 0){	// Data Notification Message
     82e:	62 e7       	ldi	r22, 0x72	; 114
     830:	70 e2       	ldi	r23, 0x20	; 32
     832:	ce 01       	movw	r24, r28
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	1c d6       	rcall	.+3128   	; 0x1470 <strcmp>
     838:	89 2b       	or	r24, r25
     83a:	21 f4       	brne	.+8      	; 0x844 <DetermineCommandtype+0xac>
		//RRN_function(messagePointer);
		fillpopulationlist(messagePointer);
     83c:	c8 01       	movw	r24, r16
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	4b df       	rcall	.-362    	; 0x6d8 <fillpopulationlist>
     842:	1f c0       	rjmp	.+62     	; 0x882 <DetermineCommandtype+0xea>
	}else if(strcmp(command, "DNO")  == 0){	// Node ID Notification Message
     844:	67 e7       	ldi	r22, 0x77	; 119
     846:	70 e2       	ldi	r23, 0x20	; 32
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	11 d6       	rcall	.+3106   	; 0x1470 <strcmp>
     84e:	89 2b       	or	r24, r25
     850:	c1 f0       	breq	.+48     	; 0x882 <DetermineCommandtype+0xea>
		
	}else if(strcmp(command, "NIN")  == 0){	// Ranging Result Notification Message
     852:	6b e7       	ldi	r22, 0x7B	; 123
     854:	70 e2       	ldi	r23, 0x20	; 32
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	0a d6       	rcall	.+3092   	; 0x1470 <strcmp>
     85c:	89 2b       	or	r24, r25
     85e:	89 f0       	breq	.+34     	; 0x882 <DetermineCommandtype+0xea>
		//printf("NIN\n");
	}else if(strcmp(command, "SDAT") == 0){	// SDAT Notification Messages
     860:	6f e7       	ldi	r22, 0x7F	; 127
     862:	70 e2       	ldi	r23, 0x20	; 32
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	03 d6       	rcall	.+3078   	; 0x1470 <strcmp>
     86a:	89 2b       	or	r24, r25
     86c:	51 f0       	breq	.+20     	; 0x882 <DetermineCommandtype+0xea>
		//printf("SDAT\n");
	}else if(strcmp(command, "AIR")  == 0){	// AIR Notification Message
     86e:	64 e8       	ldi	r22, 0x84	; 132
     870:	70 e2       	ldi	r23, 0x20	; 32
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	fc d5       	rcall	.+3064   	; 0x1470 <strcmp>
     878:	89 2b       	or	r24, r25
     87a:	19 f0       	breq	.+6      	; 0x882 <DetermineCommandtype+0xea>
		//printf("AIR\n");
	}else{
		DebugPrint("No command\r\n");
     87c:	88 e8       	ldi	r24, 0x88	; 136
     87e:	90 e2       	ldi	r25, 0x20	; 32
     880:	e6 d1       	rcall	.+972    	; 0xc4e <DebugPrint>
	}
}
     882:	24 96       	adiw	r28, 0x04	; 4
     884:	cd bf       	out	0x3d, r28	; 61
     886:	de bf       	out	0x3e, r29	; 62
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <TranslateMessage>:
 * Translates the received message converts characters
 * to a single string
 * @param  	value	received value
 * @return	message pointer to the translated message
 */
char * TranslateMessage (void){
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	c0 58       	subi	r28, 0x80	; 128
     8a4:	d1 09       	sbc	r29, r1
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	de bf       	out	0x3e, r29	; 62
	char value[128];

	memset(globalMessage, EOS, strlen(globalMessage));
     8aa:	e6 ea       	ldi	r30, 0xA6	; 166
     8ac:	f4 e2       	ldi	r31, 0x24	; 36
     8ae:	01 90       	ld	r0, Z+
     8b0:	00 20       	and	r0, r0
     8b2:	e9 f7       	brne	.-6      	; 0x8ae <TranslateMessage+0x18>
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	af 01       	movw	r20, r30
     8b8:	46 5a       	subi	r20, 0xA6	; 166
     8ba:	54 42       	sbci	r21, 0x24	; 36
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	86 ea       	ldi	r24, 0xA6	; 166
     8c2:	94 e2       	ldi	r25, 0x24	; 36
     8c4:	c3 d5       	rcall	.+2950   	; 0x144c <memset>
	memset(value, EOS, strlen(value));
     8c6:	8e 01       	movw	r16, r28
     8c8:	0f 5f       	subi	r16, 0xFF	; 255
     8ca:	1f 4f       	sbci	r17, 0xFF	; 255
     8cc:	f8 01       	movw	r30, r16
     8ce:	01 90       	ld	r0, Z+
     8d0:	00 20       	and	r0, r0
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <TranslateMessage+0x38>
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	af 01       	movw	r20, r30
     8d8:	40 1b       	sub	r20, r16
     8da:	51 0b       	sbc	r21, r17
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	c8 01       	movw	r24, r16
     8e2:	b4 d5       	rcall	.+2920   	; 0x144c <memset>

	value[0] = uart_getc(&uartC0);
     8e4:	88 e9       	ldi	r24, 0x98	; 152
     8e6:	90 e2       	ldi	r25, 0x20	; 32
     8e8:	21 d0       	rcall	.+66     	; 0x92c <uart_getc>
     8ea:	89 83       	std	Y+1, r24	; 0x01
	strcpy(globalMessage, value);
     8ec:	b8 01       	movw	r22, r16
     8ee:	86 ea       	ldi	r24, 0xA6	; 166
     8f0:	94 e2       	ldi	r25, 0x24	; 36
     8f2:	c7 d5       	rcall	.+2958   	; 0x1482 <strcpy>
	while (value[0] != CR){
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	8d 30       	cpi	r24, 0x0D	; 13
     8f8:	71 f0       	breq	.+28     	; 0x916 <TranslateMessage+0x80>
		if (value[0] != CR){	
     8fa:	8d 30       	cpi	r24, 0x0D	; 13
     8fc:	31 f0       	breq	.+12     	; 0x90a <TranslateMessage+0x74>
			
			strcat(globalMessage, value);	
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	86 ea       	ldi	r24, 0xA6	; 166
     906:	94 e2       	ldi	r25, 0x24	; 36
     908:	a8 d5       	rcall	.+2896   	; 0x145a <strcat>
		}
		value[0] = uart_getc(&uartC0);
     90a:	88 e9       	ldi	r24, 0x98	; 152
     90c:	90 e2       	ldi	r25, 0x20	; 32
     90e:	0e d0       	rcall	.+28     	; 0x92c <uart_getc>
     910:	89 83       	std	Y+1, r24	; 0x01
	memset(globalMessage, EOS, strlen(globalMessage));
	memset(value, EOS, strlen(value));

	value[0] = uart_getc(&uartC0);
	strcpy(globalMessage, value);
	while (value[0] != CR){
     912:	8d 30       	cpi	r24, 0x0D	; 13
     914:	91 f7       	brne	.-28     	; 0x8fa <TranslateMessage+0x64>
			strcat(globalMessage, value);	
		}
		value[0] = uart_getc(&uartC0);
	}
	return globalMessage;
     916:	86 ea       	ldi	r24, 0xA6	; 166
     918:	94 e2       	ldi	r25, 0x24	; 36
     91a:	c0 58       	subi	r28, 0x80	; 128
     91c:	df 4f       	sbci	r29, 0xFF	; 255
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	de bf       	out	0x3e, r29	; 62
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <uart_getc>:
 *
 *  \return received byte from circulair buffer (low byte) or
 *          UART_NO_DATA if buffer is empty
 */
uint16_t uart_getc(USART_data_t *uart)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
     932:	da d1       	rcall	.+948    	; 0xce8 <USART_RXBufferData_Available>
     934:	88 23       	and	r24, r24
     936:	49 f0       	breq	.+18     	; 0x94a <uart_getc+0x1e>
    return UART_NO_DATA;
}
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
     938:	e0 eb       	ldi	r30, 0xB0	; 176
     93a:	f8 e0       	ldi	r31, 0x08	; 8
     93c:	81 81       	ldd	r24, Z+1	; 0x01
     93e:	86 ff       	sbrs	r24, 6
     940:	fd cf       	rjmp	.-6      	; 0x93c <uart_getc+0x10>
  data = USART_RXBuffer_GetByte(uart);
     942:	ce 01       	movw	r24, r28
     944:	dc d1       	rcall	.+952    	; 0xcfe <USART_RXBuffer_GetByte>

  return (data & 0x00FF);
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	02 c0       	rjmp	.+4      	; 0x94e <uart_getc+0x22>
{
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
    return UART_NO_DATA;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	91 e0       	ldi	r25, 0x01	; 1
/*
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );

return USARTC1.DATA;
*/
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
     95c:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     95e:	8f d1       	rcall	.+798    	; 0xc7e <USART_TXBuffer_FreeSpace>
     960:	88 23       	and	r24, r24
     962:	19 f0       	breq	.+6      	; 0x96a <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     964:	61 2f       	mov	r22, r17
     966:	ce 01       	movw	r24, r28
     968:	96 d1       	rcall	.+812    	; 0xc96 <USART_TXBuffer_PutByte>
  }
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	08 95       	ret

00000972 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     97c:	eb 01       	movw	r28, r22
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	fb 01       	movw	r30, r22
     982:	60 81       	ld	r22, Z
     984:	66 23       	and	r22, r22
     986:	29 f0       	breq	.+10     	; 0x992 <uart_puts+0x20>
    uart_putc(uart, c);
     988:	c8 01       	movw	r24, r16
     98a:	e4 df       	rcall	.-56     	; 0x954 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     98c:	69 91       	ld	r22, Y+
     98e:	61 11       	cpse	r22, r1
     990:	fb cf       	rjmp	.-10     	; 0x988 <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     99c:	80 3a       	cpi	r24, 0xA0	; 160
     99e:	28 e0       	ldi	r18, 0x08	; 8
     9a0:	92 07       	cpc	r25, r18
     9a2:	39 f4       	brne	.+14     	; 0x9b2 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     9a4:	e0 e4       	ldi	r30, 0x40	; 64
     9a6:	f6 e0       	ldi	r31, 0x06	; 6
     9a8:	88 e0       	ldi	r24, 0x08	; 8
     9aa:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	82 83       	std	Z+2, r24	; 0x02
     return;
     9b0:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     9b2:	80 3b       	cpi	r24, 0xB0	; 176
     9b4:	28 e0       	ldi	r18, 0x08	; 8
     9b6:	92 07       	cpc	r25, r18
     9b8:	39 f4       	brne	.+14     	; 0x9c8 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     9ba:	e0 e4       	ldi	r30, 0x40	; 64
     9bc:	f6 e0       	ldi	r31, 0x06	; 6
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     9c2:	80 e4       	ldi	r24, 0x40	; 64
     9c4:	82 83       	std	Z+2, r24	; 0x02
     return;
     9c6:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     9c8:	80 3a       	cpi	r24, 0xA0	; 160
     9ca:	29 e0       	ldi	r18, 0x09	; 9
     9cc:	92 07       	cpc	r25, r18
     9ce:	39 f4       	brne	.+14     	; 0x9de <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     9d0:	e0 e6       	ldi	r30, 0x60	; 96
     9d2:	f6 e0       	ldi	r31, 0x06	; 6
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	82 83       	std	Z+2, r24	; 0x02
     return;
     9dc:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     9de:	80 3b       	cpi	r24, 0xB0	; 176
     9e0:	29 e0       	ldi	r18, 0x09	; 9
     9e2:	92 07       	cpc	r25, r18
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     9e6:	e0 e6       	ldi	r30, 0x60	; 96
     9e8:	f6 e0       	ldi	r31, 0x06	; 6
     9ea:	80 e8       	ldi	r24, 0x80	; 128
     9ec:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     9ee:	80 e4       	ldi	r24, 0x40	; 64
     9f0:	82 83       	std	Z+2, r24	; 0x02
     return;
     9f2:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     9f4:	80 3a       	cpi	r24, 0xA0	; 160
     9f6:	9a 40       	sbci	r25, 0x0A	; 10
     9f8:	31 f4       	brne	.+12     	; 0xa06 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     9fa:	e0 e8       	ldi	r30, 0x80	; 128
     9fc:	f6 e0       	ldi	r31, 0x06	; 6
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	82 83       	std	Z+2, r24	; 0x02
     a06:	08 95       	ret

00000a08 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	49 01       	movw	r8, r18
     a26:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     a28:	4e 2d       	mov	r20, r14
     a2a:	41 70       	andi	r20, 0x01	; 1
     a2c:	20 e1       	ldi	r18, 0x10	; 16
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	79 01       	movw	r14, r18
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <calc_bsel+0x30>
     a34:	f5 94       	asr	r15
     a36:	e7 94       	ror	r14
     a38:	4a 95       	dec	r20
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <calc_bsel+0x2c>
  if ( scale < 0 ) {
     a3c:	00 23       	and	r16, r16
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <calc_bsel+0x3a>
     a40:	39 c0       	rjmp	.+114    	; 0xab4 <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     a42:	a3 d2       	rcall	.+1350   	; 0xf8a <__floatunsisf>
     a44:	2b 01       	movw	r4, r22
     a46:	3c 01       	movw	r6, r24
     a48:	b7 01       	movw	r22, r14
     a4a:	77 27       	eor	r23, r23
     a4c:	88 27       	eor	r24, r24
     a4e:	77 fd       	sbrc	r23, 7
     a50:	80 95       	com	r24
     a52:	98 2f       	mov	r25, r24
     a54:	9c d2       	rcall	.+1336   	; 0xf8e <__floatsisf>
     a56:	6b 01       	movw	r12, r22
     a58:	7c 01       	movw	r14, r24
     a5a:	c5 01       	movw	r24, r10
     a5c:	b4 01       	movw	r22, r8
     a5e:	95 d2       	rcall	.+1322   	; 0xf8a <__floatunsisf>
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	c7 01       	movw	r24, r14
     a66:	b6 01       	movw	r22, r12
     a68:	1e d3       	rcall	.+1596   	; 0x10a6 <__mulsf3>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	c3 01       	movw	r24, r6
     a70:	b2 01       	movw	r22, r4
     a72:	f7 d1       	rcall	.+1006   	; 0xe62 <__divsf3>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e8       	ldi	r20, 0x80	; 128
     a7a:	5f e3       	ldi	r21, 0x3F	; 63
     a7c:	8d d1       	rcall	.+794    	; 0xd98 <__subsf3>
     a7e:	6b 01       	movw	r12, r22
     a80:	7c 01       	movw	r14, r24
     a82:	11 27       	eor	r17, r17
     a84:	01 95       	neg	r16
     a86:	0c f4       	brge	.+2      	; 0xa8a <calc_bsel+0x82>
     a88:	10 95       	com	r17
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <calc_bsel+0x8c>
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	0a 95       	dec	r16
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <calc_bsel+0x88>
     a98:	88 27       	eor	r24, r24
     a9a:	77 fd       	sbrc	r23, 7
     a9c:	80 95       	com	r24
     a9e:	98 2f       	mov	r25, r24
     aa0:	76 d2       	rcall	.+1260   	; 0xf8e <__floatsisf>
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	c7 01       	movw	r24, r14
     aa8:	b6 01       	movw	r22, r12
     aaa:	fd d2       	rcall	.+1530   	; 0x10a6 <__mulsf3>
     aac:	5f d3       	rcall	.+1726   	; 0x116c <round>
     aae:	41 d2       	rcall	.+1154   	; 0xf32 <__fixunssfsi>
     ab0:	cb 01       	movw	r24, r22
     ab2:	34 c0       	rjmp	.+104    	; 0xb1c <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     ab4:	6a d2       	rcall	.+1236   	; 0xf8a <__floatunsisf>
     ab6:	2b 01       	movw	r4, r22
     ab8:	3c 01       	movw	r6, r24
     aba:	b7 01       	movw	r22, r14
     abc:	77 27       	eor	r23, r23
     abe:	88 27       	eor	r24, r24
     ac0:	77 fd       	sbrc	r23, 7
     ac2:	80 95       	com	r24
     ac4:	98 2f       	mov	r25, r24
     ac6:	63 d2       	rcall	.+1222   	; 0xf8e <__floatsisf>
     ac8:	6b 01       	movw	r12, r22
     aca:	7c 01       	movw	r14, r24
     acc:	c5 01       	movw	r24, r10
     ace:	b4 01       	movw	r22, r8
     ad0:	5c d2       	rcall	.+1208   	; 0xf8a <__floatunsisf>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	c7 01       	movw	r24, r14
     ad8:	b6 01       	movw	r22, r12
     ada:	e5 d2       	rcall	.+1482   	; 0x10a6 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c3 01       	movw	r24, r6
     ae2:	b2 01       	movw	r22, r4
     ae4:	be d1       	rcall	.+892    	; 0xe62 <__divsf3>
     ae6:	4b 01       	movw	r8, r22
     ae8:	5c 01       	movw	r10, r24
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <calc_bsel+0xec>
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	0a 95       	dec	r16
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <calc_bsel+0xe8>
     af8:	88 27       	eor	r24, r24
     afa:	77 fd       	sbrc	r23, 7
     afc:	80 95       	com	r24
     afe:	98 2f       	mov	r25, r24
     b00:	46 d2       	rcall	.+1164   	; 0xf8e <__floatsisf>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	c5 01       	movw	r24, r10
     b08:	b4 01       	movw	r22, r8
     b0a:	ab d1       	rcall	.+854    	; 0xe62 <__divsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e8       	ldi	r20, 0x80	; 128
     b12:	5f e3       	ldi	r21, 0x3F	; 63
     b14:	41 d1       	rcall	.+642    	; 0xd98 <__subsf3>
     b16:	2a d3       	rcall	.+1620   	; 0x116c <round>
     b18:	0c d2       	rcall	.+1048   	; 0xf32 <__fixunssfsi>
     b1a:	cb 01       	movw	r24, r22
  }
}
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	7f 90       	pop	r7
     b32:	6f 90       	pop	r6
     b34:	5f 90       	pop	r5
     b36:	4f 90       	pop	r4
     b38:	08 95       	ret

00000b3a <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     b3a:	4f 92       	push	r4
     b3c:	5f 92       	push	r5
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	ef 92       	push	r14
     b4c:	0f 93       	push	r16
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	2b 01       	movw	r4, r22
     b54:	3c 01       	movw	r6, r24
     b56:	49 01       	movw	r8, r18
     b58:	5a 01       	movw	r10, r20
     b5a:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     b5c:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     b5e:	ed 2e       	mov	r14, r29
     b60:	0c 2f       	mov	r16, r28
     b62:	a5 01       	movw	r20, r10
     b64:	94 01       	movw	r18, r8
     b66:	c3 01       	movw	r24, r6
     b68:	b2 01       	movw	r22, r4
     b6a:	4e df       	rcall	.-356    	; 0xa08 <calc_bsel>
     b6c:	81 15       	cp	r24, r1
     b6e:	90 41       	sbci	r25, 0x10	; 16
     b70:	18 f0       	brcs	.+6      	; 0xb78 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     b72:	cf 5f       	subi	r28, 0xFF	; 255
     b74:	c8 30       	cpi	r28, 0x08	; 8
     b76:	99 f7       	brne	.-26     	; 0xb5e <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     b78:	8c 2f       	mov	r24, r28
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	0f 91       	pop	r16
     b80:	ef 90       	pop	r14
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	7f 90       	pop	r7
     b8c:	6f 90       	pop	r6
     b8e:	5f 90       	pop	r5
     b90:	4f 90       	pop	r4
     b92:	08 95       	ret

00000b94 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     b94:	2f 92       	push	r2
     b96:	3f 92       	push	r3
     b98:	4f 92       	push	r4
     b9a:	5f 92       	push	r5
     b9c:	6f 92       	push	r6
     b9e:	7f 92       	push	r7
     ba0:	8f 92       	push	r8
     ba2:	9f 92       	push	r9
     ba4:	af 92       	push	r10
     ba6:	bf 92       	push	r11
     ba8:	cf 92       	push	r12
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	3b 01       	movw	r6, r22
     bba:	49 01       	movw	r8, r18
     bbc:	5a 01       	movw	r10, r20
     bbe:	17 01       	movw	r2, r14
     bc0:	28 01       	movw	r4, r16
     bc2:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     bc4:	0c 2d       	mov	r16, r12
     bc6:	a2 01       	movw	r20, r4
     bc8:	91 01       	movw	r18, r2
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	b5 df       	rcall	.-150    	; 0xb3a <calc_bscale>
     bd0:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     bd2:	08 2f       	mov	r16, r24
     bd4:	a2 01       	movw	r20, r4
     bd6:	91 01       	movw	r18, r2
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	15 df       	rcall	.-470    	; 0xa08 <calc_bsel>
     bde:	b8 2e       	mov	r11, r24
     be0:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	b3 01       	movw	r22, r6
     be6:	ce 01       	movw	r24, r28
     be8:	3c d0       	rcall	.+120    	; 0xc62 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     bea:	e8 81       	ld	r30, Y
     bec:	f9 81       	ldd	r31, Y+1	; 0x01
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     bf2:	e8 81       	ld	r30, Y
     bf4:	f9 81       	ldd	r31, Y+1	; 0x01
     bf6:	84 81       	ldd	r24, Z+4	; 0x04
     bf8:	80 61       	ori	r24, 0x10	; 16
     bfa:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     bfc:	e8 81       	ld	r30, Y
     bfe:	f9 81       	ldd	r31, Y+1	; 0x01
     c00:	84 81       	ldd	r24, Z+4	; 0x04
     c02:	88 60       	ori	r24, 0x08	; 8
     c04:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     c06:	e8 81       	ld	r30, Y
     c08:	f9 81       	ldd	r31, Y+1	; 0x01
     c0a:	83 81       	ldd	r24, Z+3	; 0x03
     c0c:	8f 7c       	andi	r24, 0xCF	; 207
     c0e:	80 61       	ori	r24, 0x10	; 16
     c10:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     c12:	e8 81       	ld	r30, Y
     c14:	f9 81       	ldd	r31, Y+1	; 0x01
     c16:	b6 82       	std	Z+6, r11	; 0x06
     c18:	e8 81       	ld	r30, Y
     c1a:	f9 81       	ldd	r31, Y+1	; 0x01
     c1c:	12 95       	swap	r17
     c1e:	10 7f       	andi	r17, 0xF0	; 240
     c20:	e1 2a       	or	r14, r17
     c22:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     c24:	88 81       	ld	r24, Y
     c26:	99 81       	ldd	r25, Y+1	; 0x01
     c28:	b9 de       	rcall	.-654    	; 0x99c <set_usart_txrx_direction>
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	cf 90       	pop	r12
     c38:	bf 90       	pop	r11
     c3a:	af 90       	pop	r10
     c3c:	9f 90       	pop	r9
     c3e:	8f 90       	pop	r8
     c40:	7f 90       	pop	r7
     c42:	6f 90       	pop	r6
     c44:	5f 90       	pop	r5
     c46:	4f 90       	pop	r4
     c48:	3f 90       	pop	r3
     c4a:	2f 90       	pop	r2
     c4c:	08 95       	ret

00000c4e <DebugPrint>:
 * Print a string of information on the UART C1 (DEBUG) interface.
 * @param   *debugData	String of information
 * @param   value		Temporarily string value to add a cariage return and new line feed
 */
void DebugPrint (char *debugData){
	uart_puts(&uartC1, debugData);
     c4e:	bc 01       	movw	r22, r24
     c50:	8f e9       	ldi	r24, 0x9F	; 159
     c52:	92 e2       	ldi	r25, 0x22	; 34
     c54:	8e ce       	rjmp	.-740    	; 0x972 <uart_puts>
     c56:	08 95       	ret

00000c58 <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
     c58:	bc 01       	movw	r22, r24
     c5a:	88 e9       	ldi	r24, 0x98	; 152
     c5c:	90 e2       	ldi	r25, 0x20	; 32
     c5e:	89 ce       	rjmp	.-750    	; 0x972 <uart_puts>
     c60:	08 95       	ret

00000c62 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     c62:	fc 01       	movw	r30, r24
     c64:	60 83       	st	Z, r22
     c66:	71 83       	std	Z+1, r23	; 0x01
     c68:	42 83       	std	Z+2, r20	; 0x02
     c6a:	ec 5f       	subi	r30, 0xFC	; 252
     c6c:	fd 4f       	sbci	r31, 0xFD	; 253
     c6e:	10 82       	st	Z, r1
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	10 82       	st	Z, r1
     c74:	33 96       	adiw	r30, 0x03	; 3
     c76:	10 82       	st	Z, r1
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	10 82       	st	Z, r1
     c7c:	08 95       	ret

00000c7e <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c7e:	fc 01       	movw	r30, r24
     c80:	eb 5f       	subi	r30, 0xFB	; 251
     c82:	fd 4f       	sbci	r31, 0xFD	; 253
     c84:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     c86:	31 96       	adiw	r30, 0x01	; 1
     c88:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c8a:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	29 13       	cpse	r18, r25
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <USART_TXBuffer_FreeSpace+0x16>
     c92:	80 e0       	ldi	r24, 0x00	; 0
}
     c94:	08 95       	ret

00000c96 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c9c:	dc 01       	movw	r26, r24
     c9e:	ab 5f       	subi	r26, 0xFB	; 251
     ca0:	bd 4f       	sbci	r27, 0xFD	; 253
     ca2:	2c 91       	ld	r18, X
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 91       	ld	r25, X
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	29 13       	cpse	r18, r25
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <USART_TXBuffer_PutByte+0x1c>
     cb0:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     cb2:	88 23       	and	r24, r24
     cb4:	b1 f0       	breq	.+44     	; 0xce2 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     cb6:	df 01       	movw	r26, r30
     cb8:	ab 5f       	subi	r26, 0xFB	; 251
     cba:	bd 4f       	sbci	r27, 0xFD	; 253
     cbc:	9c 91       	ld	r25, X
	  	TXbufPtr->TX[tempTX_Head]= data;
     cbe:	ef 01       	movw	r28, r30
     cc0:	c9 0f       	add	r28, r25
     cc2:	d1 1d       	adc	r29, r1
     cc4:	cd 5f       	subi	r28, 0xFD	; 253
     cc6:	de 4f       	sbci	r29, 0xFE	; 254
     cc8:	68 83       	st	Y, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     cca:	9f 5f       	subi	r25, 0xFF	; 255
     ccc:	9c 93       	st	X, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     cce:	a0 81       	ld	r26, Z
     cd0:	b1 81       	ldd	r27, Z+1	; 0x01
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 91       	ld	r25, X
     cd6:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     cd8:	9c 7f       	andi	r25, 0xFC	; 252
     cda:	22 81       	ldd	r18, Z+2	; 0x02
     cdc:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     ce8:	fc 01       	movw	r30, r24
     cea:	ed 5f       	subi	r30, 0xFD	; 253
     cec:	fd 4f       	sbci	r31, 0xFD	; 253
     cee:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     cf0:	31 96       	adiw	r30, 0x01	; 1
     cf2:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	29 13       	cpse	r18, r25
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <USART_RXBufferData_Available+0x14>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
}
     cfc:	08 95       	ret

00000cfe <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     cfe:	fc 01       	movw	r30, r24
     d00:	ec 5f       	subi	r30, 0xFC	; 252
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	20 81       	ld	r18, Z
     d06:	dc 01       	movw	r26, r24
     d08:	a2 0f       	add	r26, r18
     d0a:	b1 1d       	adc	r27, r1
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     d10:	90 81       	ld	r25, Z
     d12:	9f 5f       	subi	r25, 0xFF	; 255
     d14:	90 83       	st	Z, r25

	return ans;
}
     d16:	08 95       	ret

00000d18 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     d18:	fc 01       	movw	r30, r24
     d1a:	ed 5f       	subi	r30, 0xFD	; 253
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	20 81       	ld	r18, Z
     d20:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     d26:	dc 01       	movw	r26, r24
     d28:	ed 91       	ld	r30, X+
     d2a:	fc 91       	ld	r31, X
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     d30:	23 17       	cp	r18, r19
     d32:	59 f0       	breq	.+22     	; 0xd4a <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     d34:	fc 01       	movw	r30, r24
     d36:	ed 5f       	subi	r30, 0xFD	; 253
     d38:	fd 4f       	sbci	r31, 0xFD	; 253
     d3a:	30 81       	ld	r19, Z
     d3c:	a3 0f       	add	r26, r19
     d3e:	b1 1d       	adc	r27, r1
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     d44:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     d4c:	08 95       	ret

00000d4e <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     d52:	fc 01       	movw	r30, r24
     d54:	ea 5f       	subi	r30, 0xFA	; 250
     d56:	fd 4f       	sbci	r31, 0xFD	; 253
     d58:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	30 81       	ld	r19, Z
     d5e:	32 13       	cpse	r19, r18
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     d62:	dc 01       	movw	r26, r24
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     d6a:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     d6c:	83 83       	std	Z+3, r24	; 0x03
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     d70:	fc 01       	movw	r30, r24
     d72:	ea 5f       	subi	r30, 0xFA	; 250
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	20 81       	ld	r18, Z
     d78:	dc 01       	movw	r26, r24
     d7a:	a2 0f       	add	r26, r18
     d7c:	b1 1d       	adc	r27, r1
     d7e:	ad 5f       	subi	r26, 0xFD	; 253
     d80:	be 4f       	sbci	r27, 0xFE	; 254
     d82:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     d84:	ec 01       	movw	r28, r24
     d86:	a8 81       	ld	r26, Y
     d88:	b9 81       	ldd	r27, Y+1	; 0x01
     d8a:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 83       	st	Z, r24
	}
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <__subsf3>:
     d98:	50 58       	subi	r21, 0x80	; 128

00000d9a <__addsf3>:
     d9a:	bb 27       	eor	r27, r27
     d9c:	aa 27       	eor	r26, r26
     d9e:	0e d0       	rcall	.+28     	; 0xdbc <__addsf3x>
     da0:	48 c1       	rjmp	.+656    	; 0x1032 <__fp_round>
     da2:	39 d1       	rcall	.+626    	; 0x1016 <__fp_pscA>
     da4:	30 f0       	brcs	.+12     	; 0xdb2 <__addsf3+0x18>
     da6:	3e d1       	rcall	.+636    	; 0x1024 <__fp_pscB>
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__addsf3+0x18>
     daa:	31 f4       	brne	.+12     	; 0xdb8 <__addsf3+0x1e>
     dac:	9f 3f       	cpi	r25, 0xFF	; 255
     dae:	11 f4       	brne	.+4      	; 0xdb4 <__addsf3+0x1a>
     db0:	1e f4       	brtc	.+6      	; 0xdb8 <__addsf3+0x1e>
     db2:	2e c1       	rjmp	.+604    	; 0x1010 <__fp_nan>
     db4:	0e f4       	brtc	.+2      	; 0xdb8 <__addsf3+0x1e>
     db6:	e0 95       	com	r30
     db8:	e7 fb       	bst	r30, 7
     dba:	24 c1       	rjmp	.+584    	; 0x1004 <__fp_inf>

00000dbc <__addsf3x>:
     dbc:	e9 2f       	mov	r30, r25
     dbe:	4a d1       	rcall	.+660    	; 0x1054 <__fp_split3>
     dc0:	80 f3       	brcs	.-32     	; 0xda2 <__addsf3+0x8>
     dc2:	ba 17       	cp	r27, r26
     dc4:	62 07       	cpc	r22, r18
     dc6:	73 07       	cpc	r23, r19
     dc8:	84 07       	cpc	r24, r20
     dca:	95 07       	cpc	r25, r21
     dcc:	18 f0       	brcs	.+6      	; 0xdd4 <__addsf3x+0x18>
     dce:	71 f4       	brne	.+28     	; 0xdec <__addsf3x+0x30>
     dd0:	9e f5       	brtc	.+102    	; 0xe38 <__addsf3x+0x7c>
     dd2:	62 c1       	rjmp	.+708    	; 0x1098 <__fp_zero>
     dd4:	0e f4       	brtc	.+2      	; 0xdd8 <__addsf3x+0x1c>
     dd6:	e0 95       	com	r30
     dd8:	0b 2e       	mov	r0, r27
     dda:	ba 2f       	mov	r27, r26
     ddc:	a0 2d       	mov	r26, r0
     dde:	0b 01       	movw	r0, r22
     de0:	b9 01       	movw	r22, r18
     de2:	90 01       	movw	r18, r0
     de4:	0c 01       	movw	r0, r24
     de6:	ca 01       	movw	r24, r20
     de8:	a0 01       	movw	r20, r0
     dea:	11 24       	eor	r1, r1
     dec:	ff 27       	eor	r31, r31
     dee:	59 1b       	sub	r21, r25
     df0:	99 f0       	breq	.+38     	; 0xe18 <__addsf3x+0x5c>
     df2:	59 3f       	cpi	r21, 0xF9	; 249
     df4:	50 f4       	brcc	.+20     	; 0xe0a <__addsf3x+0x4e>
     df6:	50 3e       	cpi	r21, 0xE0	; 224
     df8:	68 f1       	brcs	.+90     	; 0xe54 <__addsf3x+0x98>
     dfa:	1a 16       	cp	r1, r26
     dfc:	f0 40       	sbci	r31, 0x00	; 0
     dfe:	a2 2f       	mov	r26, r18
     e00:	23 2f       	mov	r18, r19
     e02:	34 2f       	mov	r19, r20
     e04:	44 27       	eor	r20, r20
     e06:	58 5f       	subi	r21, 0xF8	; 248
     e08:	f3 cf       	rjmp	.-26     	; 0xdf0 <__addsf3x+0x34>
     e0a:	46 95       	lsr	r20
     e0c:	37 95       	ror	r19
     e0e:	27 95       	ror	r18
     e10:	a7 95       	ror	r26
     e12:	f0 40       	sbci	r31, 0x00	; 0
     e14:	53 95       	inc	r21
     e16:	c9 f7       	brne	.-14     	; 0xe0a <__addsf3x+0x4e>
     e18:	7e f4       	brtc	.+30     	; 0xe38 <__addsf3x+0x7c>
     e1a:	1f 16       	cp	r1, r31
     e1c:	ba 0b       	sbc	r27, r26
     e1e:	62 0b       	sbc	r22, r18
     e20:	73 0b       	sbc	r23, r19
     e22:	84 0b       	sbc	r24, r20
     e24:	ba f0       	brmi	.+46     	; 0xe54 <__addsf3x+0x98>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	a1 f0       	breq	.+40     	; 0xe52 <__addsf3x+0x96>
     e2a:	ff 0f       	add	r31, r31
     e2c:	bb 1f       	adc	r27, r27
     e2e:	66 1f       	adc	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	c2 f7       	brpl	.-16     	; 0xe26 <__addsf3x+0x6a>
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <__addsf3x+0x98>
     e38:	ba 0f       	add	r27, r26
     e3a:	62 1f       	adc	r22, r18
     e3c:	73 1f       	adc	r23, r19
     e3e:	84 1f       	adc	r24, r20
     e40:	48 f4       	brcc	.+18     	; 0xe54 <__addsf3x+0x98>
     e42:	87 95       	ror	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	f7 95       	ror	r31
     e4c:	9e 3f       	cpi	r25, 0xFE	; 254
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <__addsf3x+0x96>
     e50:	b3 cf       	rjmp	.-154    	; 0xdb8 <__addsf3+0x1e>
     e52:	93 95       	inc	r25
     e54:	88 0f       	add	r24, r24
     e56:	08 f0       	brcs	.+2      	; 0xe5a <__addsf3x+0x9e>
     e58:	99 27       	eor	r25, r25
     e5a:	ee 0f       	add	r30, r30
     e5c:	97 95       	ror	r25
     e5e:	87 95       	ror	r24
     e60:	08 95       	ret

00000e62 <__divsf3>:
     e62:	0c d0       	rcall	.+24     	; 0xe7c <__divsf3x>
     e64:	e6 c0       	rjmp	.+460    	; 0x1032 <__fp_round>
     e66:	de d0       	rcall	.+444    	; 0x1024 <__fp_pscB>
     e68:	40 f0       	brcs	.+16     	; 0xe7a <__divsf3+0x18>
     e6a:	d5 d0       	rcall	.+426    	; 0x1016 <__fp_pscA>
     e6c:	30 f0       	brcs	.+12     	; 0xe7a <__divsf3+0x18>
     e6e:	21 f4       	brne	.+8      	; 0xe78 <__divsf3+0x16>
     e70:	5f 3f       	cpi	r21, 0xFF	; 255
     e72:	19 f0       	breq	.+6      	; 0xe7a <__divsf3+0x18>
     e74:	c7 c0       	rjmp	.+398    	; 0x1004 <__fp_inf>
     e76:	51 11       	cpse	r21, r1
     e78:	10 c1       	rjmp	.+544    	; 0x109a <__fp_szero>
     e7a:	ca c0       	rjmp	.+404    	; 0x1010 <__fp_nan>

00000e7c <__divsf3x>:
     e7c:	eb d0       	rcall	.+470    	; 0x1054 <__fp_split3>
     e7e:	98 f3       	brcs	.-26     	; 0xe66 <__divsf3+0x4>

00000e80 <__divsf3_pse>:
     e80:	99 23       	and	r25, r25
     e82:	c9 f3       	breq	.-14     	; 0xe76 <__divsf3+0x14>
     e84:	55 23       	and	r21, r21
     e86:	b1 f3       	breq	.-20     	; 0xe74 <__divsf3+0x12>
     e88:	95 1b       	sub	r25, r21
     e8a:	55 0b       	sbc	r21, r21
     e8c:	bb 27       	eor	r27, r27
     e8e:	aa 27       	eor	r26, r26
     e90:	62 17       	cp	r22, r18
     e92:	73 07       	cpc	r23, r19
     e94:	84 07       	cpc	r24, r20
     e96:	38 f0       	brcs	.+14     	; 0xea6 <__divsf3_pse+0x26>
     e98:	9f 5f       	subi	r25, 0xFF	; 255
     e9a:	5f 4f       	sbci	r21, 0xFF	; 255
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	44 1f       	adc	r20, r20
     ea2:	aa 1f       	adc	r26, r26
     ea4:	a9 f3       	breq	.-22     	; 0xe90 <__divsf3_pse+0x10>
     ea6:	33 d0       	rcall	.+102    	; 0xf0e <__divsf3_pse+0x8e>
     ea8:	0e 2e       	mov	r0, r30
     eaa:	3a f0       	brmi	.+14     	; 0xeba <__divsf3_pse+0x3a>
     eac:	e0 e8       	ldi	r30, 0x80	; 128
     eae:	30 d0       	rcall	.+96     	; 0xf10 <__divsf3_pse+0x90>
     eb0:	91 50       	subi	r25, 0x01	; 1
     eb2:	50 40       	sbci	r21, 0x00	; 0
     eb4:	e6 95       	lsr	r30
     eb6:	00 1c       	adc	r0, r0
     eb8:	ca f7       	brpl	.-14     	; 0xeac <__divsf3_pse+0x2c>
     eba:	29 d0       	rcall	.+82     	; 0xf0e <__divsf3_pse+0x8e>
     ebc:	fe 2f       	mov	r31, r30
     ebe:	27 d0       	rcall	.+78     	; 0xf0e <__divsf3_pse+0x8e>
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	bb 1f       	adc	r27, r27
     ec8:	26 17       	cp	r18, r22
     eca:	37 07       	cpc	r19, r23
     ecc:	48 07       	cpc	r20, r24
     ece:	ab 07       	cpc	r26, r27
     ed0:	b0 e8       	ldi	r27, 0x80	; 128
     ed2:	09 f0       	breq	.+2      	; 0xed6 <__divsf3_pse+0x56>
     ed4:	bb 0b       	sbc	r27, r27
     ed6:	80 2d       	mov	r24, r0
     ed8:	bf 01       	movw	r22, r30
     eda:	ff 27       	eor	r31, r31
     edc:	93 58       	subi	r25, 0x83	; 131
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	2a f0       	brmi	.+10     	; 0xeec <__divsf3_pse+0x6c>
     ee2:	9e 3f       	cpi	r25, 0xFE	; 254
     ee4:	51 05       	cpc	r21, r1
     ee6:	68 f0       	brcs	.+26     	; 0xf02 <__divsf3_pse+0x82>
     ee8:	8d c0       	rjmp	.+282    	; 0x1004 <__fp_inf>
     eea:	d7 c0       	rjmp	.+430    	; 0x109a <__fp_szero>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	ec f3       	brlt	.-6      	; 0xeea <__divsf3_pse+0x6a>
     ef0:	98 3e       	cpi	r25, 0xE8	; 232
     ef2:	dc f3       	brlt	.-10     	; 0xeea <__divsf3_pse+0x6a>
     ef4:	86 95       	lsr	r24
     ef6:	77 95       	ror	r23
     ef8:	67 95       	ror	r22
     efa:	b7 95       	ror	r27
     efc:	f7 95       	ror	r31
     efe:	9f 5f       	subi	r25, 0xFF	; 255
     f00:	c9 f7       	brne	.-14     	; 0xef4 <__divsf3_pse+0x74>
     f02:	88 0f       	add	r24, r24
     f04:	91 1d       	adc	r25, r1
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	97 f9       	bld	r25, 7
     f0c:	08 95       	ret
     f0e:	e1 e0       	ldi	r30, 0x01	; 1
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	bb 1f       	adc	r27, r27
     f18:	62 17       	cp	r22, r18
     f1a:	73 07       	cpc	r23, r19
     f1c:	84 07       	cpc	r24, r20
     f1e:	ba 07       	cpc	r27, r26
     f20:	20 f0       	brcs	.+8      	; 0xf2a <__divsf3_pse+0xaa>
     f22:	62 1b       	sub	r22, r18
     f24:	73 0b       	sbc	r23, r19
     f26:	84 0b       	sbc	r24, r20
     f28:	ba 0b       	sbc	r27, r26
     f2a:	ee 1f       	adc	r30, r30
     f2c:	88 f7       	brcc	.-30     	; 0xf10 <__divsf3_pse+0x90>
     f2e:	e0 95       	com	r30
     f30:	08 95       	ret

00000f32 <__fixunssfsi>:
     f32:	98 d0       	rcall	.+304    	; 0x1064 <__fp_splitA>
     f34:	88 f0       	brcs	.+34     	; 0xf58 <__fixunssfsi+0x26>
     f36:	9f 57       	subi	r25, 0x7F	; 127
     f38:	90 f0       	brcs	.+36     	; 0xf5e <__fixunssfsi+0x2c>
     f3a:	b9 2f       	mov	r27, r25
     f3c:	99 27       	eor	r25, r25
     f3e:	b7 51       	subi	r27, 0x17	; 23
     f40:	a0 f0       	brcs	.+40     	; 0xf6a <__fixunssfsi+0x38>
     f42:	d1 f0       	breq	.+52     	; 0xf78 <__fixunssfsi+0x46>
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	1a f0       	brmi	.+6      	; 0xf54 <__fixunssfsi+0x22>
     f4e:	ba 95       	dec	r27
     f50:	c9 f7       	brne	.-14     	; 0xf44 <__fixunssfsi+0x12>
     f52:	12 c0       	rjmp	.+36     	; 0xf78 <__fixunssfsi+0x46>
     f54:	b1 30       	cpi	r27, 0x01	; 1
     f56:	81 f0       	breq	.+32     	; 0xf78 <__fixunssfsi+0x46>
     f58:	9f d0       	rcall	.+318    	; 0x1098 <__fp_zero>
     f5a:	b1 e0       	ldi	r27, 0x01	; 1
     f5c:	08 95       	ret
     f5e:	9c c0       	rjmp	.+312    	; 0x1098 <__fp_zero>
     f60:	67 2f       	mov	r22, r23
     f62:	78 2f       	mov	r23, r24
     f64:	88 27       	eor	r24, r24
     f66:	b8 5f       	subi	r27, 0xF8	; 248
     f68:	39 f0       	breq	.+14     	; 0xf78 <__fixunssfsi+0x46>
     f6a:	b9 3f       	cpi	r27, 0xF9	; 249
     f6c:	cc f3       	brlt	.-14     	; 0xf60 <__fixunssfsi+0x2e>
     f6e:	86 95       	lsr	r24
     f70:	77 95       	ror	r23
     f72:	67 95       	ror	r22
     f74:	b3 95       	inc	r27
     f76:	d9 f7       	brne	.-10     	; 0xf6e <__fixunssfsi+0x3c>
     f78:	3e f4       	brtc	.+14     	; 0xf88 <__fixunssfsi+0x56>
     f7a:	90 95       	com	r25
     f7c:	80 95       	com	r24
     f7e:	70 95       	com	r23
     f80:	61 95       	neg	r22
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	8f 4f       	sbci	r24, 0xFF	; 255
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	08 95       	ret

00000f8a <__floatunsisf>:
     f8a:	e8 94       	clt
     f8c:	09 c0       	rjmp	.+18     	; 0xfa0 <__floatsisf+0x12>

00000f8e <__floatsisf>:
     f8e:	97 fb       	bst	r25, 7
     f90:	3e f4       	brtc	.+14     	; 0xfa0 <__floatsisf+0x12>
     f92:	90 95       	com	r25
     f94:	80 95       	com	r24
     f96:	70 95       	com	r23
     f98:	61 95       	neg	r22
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	99 23       	and	r25, r25
     fa2:	a9 f0       	breq	.+42     	; 0xfce <__floatsisf+0x40>
     fa4:	f9 2f       	mov	r31, r25
     fa6:	96 e9       	ldi	r25, 0x96	; 150
     fa8:	bb 27       	eor	r27, r27
     faa:	93 95       	inc	r25
     fac:	f6 95       	lsr	r31
     fae:	87 95       	ror	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	b7 95       	ror	r27
     fb6:	f1 11       	cpse	r31, r1
     fb8:	f8 cf       	rjmp	.-16     	; 0xfaa <__floatsisf+0x1c>
     fba:	fa f4       	brpl	.+62     	; 0xffa <__floatsisf+0x6c>
     fbc:	bb 0f       	add	r27, r27
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <__floatsisf+0x36>
     fc0:	60 ff       	sbrs	r22, 0
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <__floatsisf+0x6c>
     fc4:	6f 5f       	subi	r22, 0xFF	; 255
     fc6:	7f 4f       	sbci	r23, 0xFF	; 255
     fc8:	8f 4f       	sbci	r24, 0xFF	; 255
     fca:	9f 4f       	sbci	r25, 0xFF	; 255
     fcc:	16 c0       	rjmp	.+44     	; 0xffa <__floatsisf+0x6c>
     fce:	88 23       	and	r24, r24
     fd0:	11 f0       	breq	.+4      	; 0xfd6 <__floatsisf+0x48>
     fd2:	96 e9       	ldi	r25, 0x96	; 150
     fd4:	11 c0       	rjmp	.+34     	; 0xff8 <__floatsisf+0x6a>
     fd6:	77 23       	and	r23, r23
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <__floatsisf+0x54>
     fda:	9e e8       	ldi	r25, 0x8E	; 142
     fdc:	87 2f       	mov	r24, r23
     fde:	76 2f       	mov	r23, r22
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <__floatsisf+0x5e>
     fe2:	66 23       	and	r22, r22
     fe4:	71 f0       	breq	.+28     	; 0x1002 <__floatsisf+0x74>
     fe6:	96 e8       	ldi	r25, 0x86	; 134
     fe8:	86 2f       	mov	r24, r22
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	2a f0       	brmi	.+10     	; 0xffa <__floatsisf+0x6c>
     ff0:	9a 95       	dec	r25
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	da f7       	brpl	.-10     	; 0xff0 <__floatsisf+0x62>
     ffa:	88 0f       	add	r24, r24
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	97 f9       	bld	r25, 7
    1002:	08 95       	ret

00001004 <__fp_inf>:
    1004:	97 f9       	bld	r25, 7
    1006:	9f 67       	ori	r25, 0x7F	; 127
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	08 95       	ret

00001010 <__fp_nan>:
    1010:	9f ef       	ldi	r25, 0xFF	; 255
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	08 95       	ret

00001016 <__fp_pscA>:
    1016:	00 24       	eor	r0, r0
    1018:	0a 94       	dec	r0
    101a:	16 16       	cp	r1, r22
    101c:	17 06       	cpc	r1, r23
    101e:	18 06       	cpc	r1, r24
    1020:	09 06       	cpc	r0, r25
    1022:	08 95       	ret

00001024 <__fp_pscB>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	12 16       	cp	r1, r18
    102a:	13 06       	cpc	r1, r19
    102c:	14 06       	cpc	r1, r20
    102e:	05 06       	cpc	r0, r21
    1030:	08 95       	ret

00001032 <__fp_round>:
    1032:	09 2e       	mov	r0, r25
    1034:	03 94       	inc	r0
    1036:	00 0c       	add	r0, r0
    1038:	11 f4       	brne	.+4      	; 0x103e <__fp_round+0xc>
    103a:	88 23       	and	r24, r24
    103c:	52 f0       	brmi	.+20     	; 0x1052 <__fp_round+0x20>
    103e:	bb 0f       	add	r27, r27
    1040:	40 f4       	brcc	.+16     	; 0x1052 <__fp_round+0x20>
    1042:	bf 2b       	or	r27, r31
    1044:	11 f4       	brne	.+4      	; 0x104a <__fp_round+0x18>
    1046:	60 ff       	sbrs	r22, 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <__fp_round+0x20>
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <__fp_split3>:
    1054:	57 fd       	sbrc	r21, 7
    1056:	90 58       	subi	r25, 0x80	; 128
    1058:	44 0f       	add	r20, r20
    105a:	55 1f       	adc	r21, r21
    105c:	59 f0       	breq	.+22     	; 0x1074 <__fp_splitA+0x10>
    105e:	5f 3f       	cpi	r21, 0xFF	; 255
    1060:	71 f0       	breq	.+28     	; 0x107e <__fp_splitA+0x1a>
    1062:	47 95       	ror	r20

00001064 <__fp_splitA>:
    1064:	88 0f       	add	r24, r24
    1066:	97 fb       	bst	r25, 7
    1068:	99 1f       	adc	r25, r25
    106a:	61 f0       	breq	.+24     	; 0x1084 <__fp_splitA+0x20>
    106c:	9f 3f       	cpi	r25, 0xFF	; 255
    106e:	79 f0       	breq	.+30     	; 0x108e <__fp_splitA+0x2a>
    1070:	87 95       	ror	r24
    1072:	08 95       	ret
    1074:	12 16       	cp	r1, r18
    1076:	13 06       	cpc	r1, r19
    1078:	14 06       	cpc	r1, r20
    107a:	55 1f       	adc	r21, r21
    107c:	f2 cf       	rjmp	.-28     	; 0x1062 <__fp_split3+0xe>
    107e:	46 95       	lsr	r20
    1080:	f1 df       	rcall	.-30     	; 0x1064 <__fp_splitA>
    1082:	08 c0       	rjmp	.+16     	; 0x1094 <__fp_splitA+0x30>
    1084:	16 16       	cp	r1, r22
    1086:	17 06       	cpc	r1, r23
    1088:	18 06       	cpc	r1, r24
    108a:	99 1f       	adc	r25, r25
    108c:	f1 cf       	rjmp	.-30     	; 0x1070 <__fp_splitA+0xc>
    108e:	86 95       	lsr	r24
    1090:	71 05       	cpc	r23, r1
    1092:	61 05       	cpc	r22, r1
    1094:	08 94       	sec
    1096:	08 95       	ret

00001098 <__fp_zero>:
    1098:	e8 94       	clt

0000109a <__fp_szero>:
    109a:	bb 27       	eor	r27, r27
    109c:	66 27       	eor	r22, r22
    109e:	77 27       	eor	r23, r23
    10a0:	cb 01       	movw	r24, r22
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret

000010a6 <__mulsf3>:
    10a6:	0b d0       	rcall	.+22     	; 0x10be <__mulsf3x>
    10a8:	c4 cf       	rjmp	.-120    	; 0x1032 <__fp_round>
    10aa:	b5 df       	rcall	.-150    	; 0x1016 <__fp_pscA>
    10ac:	28 f0       	brcs	.+10     	; 0x10b8 <__mulsf3+0x12>
    10ae:	ba df       	rcall	.-140    	; 0x1024 <__fp_pscB>
    10b0:	18 f0       	brcs	.+6      	; 0x10b8 <__mulsf3+0x12>
    10b2:	95 23       	and	r25, r21
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <__mulsf3+0x12>
    10b6:	a6 cf       	rjmp	.-180    	; 0x1004 <__fp_inf>
    10b8:	ab cf       	rjmp	.-170    	; 0x1010 <__fp_nan>
    10ba:	11 24       	eor	r1, r1
    10bc:	ee cf       	rjmp	.-36     	; 0x109a <__fp_szero>

000010be <__mulsf3x>:
    10be:	ca df       	rcall	.-108    	; 0x1054 <__fp_split3>
    10c0:	a0 f3       	brcs	.-24     	; 0x10aa <__mulsf3+0x4>

000010c2 <__mulsf3_pse>:
    10c2:	95 9f       	mul	r25, r21
    10c4:	d1 f3       	breq	.-12     	; 0x10ba <__mulsf3+0x14>
    10c6:	95 0f       	add	r25, r21
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	55 1f       	adc	r21, r21
    10cc:	62 9f       	mul	r22, r18
    10ce:	f0 01       	movw	r30, r0
    10d0:	72 9f       	mul	r23, r18
    10d2:	bb 27       	eor	r27, r27
    10d4:	f0 0d       	add	r31, r0
    10d6:	b1 1d       	adc	r27, r1
    10d8:	63 9f       	mul	r22, r19
    10da:	aa 27       	eor	r26, r26
    10dc:	f0 0d       	add	r31, r0
    10de:	b1 1d       	adc	r27, r1
    10e0:	aa 1f       	adc	r26, r26
    10e2:	64 9f       	mul	r22, r20
    10e4:	66 27       	eor	r22, r22
    10e6:	b0 0d       	add	r27, r0
    10e8:	a1 1d       	adc	r26, r1
    10ea:	66 1f       	adc	r22, r22
    10ec:	82 9f       	mul	r24, r18
    10ee:	22 27       	eor	r18, r18
    10f0:	b0 0d       	add	r27, r0
    10f2:	a1 1d       	adc	r26, r1
    10f4:	62 1f       	adc	r22, r18
    10f6:	73 9f       	mul	r23, r19
    10f8:	b0 0d       	add	r27, r0
    10fa:	a1 1d       	adc	r26, r1
    10fc:	62 1f       	adc	r22, r18
    10fe:	83 9f       	mul	r24, r19
    1100:	a0 0d       	add	r26, r0
    1102:	61 1d       	adc	r22, r1
    1104:	22 1f       	adc	r18, r18
    1106:	74 9f       	mul	r23, r20
    1108:	33 27       	eor	r19, r19
    110a:	a0 0d       	add	r26, r0
    110c:	61 1d       	adc	r22, r1
    110e:	23 1f       	adc	r18, r19
    1110:	84 9f       	mul	r24, r20
    1112:	60 0d       	add	r22, r0
    1114:	21 1d       	adc	r18, r1
    1116:	82 2f       	mov	r24, r18
    1118:	76 2f       	mov	r23, r22
    111a:	6a 2f       	mov	r22, r26
    111c:	11 24       	eor	r1, r1
    111e:	9f 57       	subi	r25, 0x7F	; 127
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	8a f0       	brmi	.+34     	; 0x1146 <__mulsf3_pse+0x84>
    1124:	e1 f0       	breq	.+56     	; 0x115e <__mulsf3_pse+0x9c>
    1126:	88 23       	and	r24, r24
    1128:	4a f0       	brmi	.+18     	; 0x113c <__mulsf3_pse+0x7a>
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	bb 1f       	adc	r27, r27
    1130:	66 1f       	adc	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	91 50       	subi	r25, 0x01	; 1
    1138:	50 40       	sbci	r21, 0x00	; 0
    113a:	a9 f7       	brne	.-22     	; 0x1126 <__mulsf3_pse+0x64>
    113c:	9e 3f       	cpi	r25, 0xFE	; 254
    113e:	51 05       	cpc	r21, r1
    1140:	70 f0       	brcs	.+28     	; 0x115e <__mulsf3_pse+0x9c>
    1142:	60 cf       	rjmp	.-320    	; 0x1004 <__fp_inf>
    1144:	aa cf       	rjmp	.-172    	; 0x109a <__fp_szero>
    1146:	5f 3f       	cpi	r21, 0xFF	; 255
    1148:	ec f3       	brlt	.-6      	; 0x1144 <__mulsf3_pse+0x82>
    114a:	98 3e       	cpi	r25, 0xE8	; 232
    114c:	dc f3       	brlt	.-10     	; 0x1144 <__mulsf3_pse+0x82>
    114e:	86 95       	lsr	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b7 95       	ror	r27
    1156:	f7 95       	ror	r31
    1158:	e7 95       	ror	r30
    115a:	9f 5f       	subi	r25, 0xFF	; 255
    115c:	c1 f7       	brne	.-16     	; 0x114e <__mulsf3_pse+0x8c>
    115e:	fe 2b       	or	r31, r30
    1160:	88 0f       	add	r24, r24
    1162:	91 1d       	adc	r25, r1
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	97 f9       	bld	r25, 7
    116a:	08 95       	ret

0000116c <round>:
    116c:	7b df       	rcall	.-266    	; 0x1064 <__fp_splitA>
    116e:	e0 f0       	brcs	.+56     	; 0x11a8 <round+0x3c>
    1170:	9e 37       	cpi	r25, 0x7E	; 126
    1172:	d8 f0       	brcs	.+54     	; 0x11aa <round+0x3e>
    1174:	96 39       	cpi	r25, 0x96	; 150
    1176:	b8 f4       	brcc	.+46     	; 0x11a6 <round+0x3a>
    1178:	9e 38       	cpi	r25, 0x8E	; 142
    117a:	48 f4       	brcc	.+18     	; 0x118e <round+0x22>
    117c:	67 2f       	mov	r22, r23
    117e:	78 2f       	mov	r23, r24
    1180:	88 27       	eor	r24, r24
    1182:	98 5f       	subi	r25, 0xF8	; 248
    1184:	f9 cf       	rjmp	.-14     	; 0x1178 <round+0xc>
    1186:	86 95       	lsr	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	93 95       	inc	r25
    118e:	95 39       	cpi	r25, 0x95	; 149
    1190:	d0 f3       	brcs	.-12     	; 0x1186 <round+0x1a>
    1192:	b6 2f       	mov	r27, r22
    1194:	b1 70       	andi	r27, 0x01	; 1
    1196:	6b 0f       	add	r22, r27
    1198:	71 1d       	adc	r23, r1
    119a:	81 1d       	adc	r24, r1
    119c:	20 f4       	brcc	.+8      	; 0x11a6 <round+0x3a>
    119e:	87 95       	ror	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	93 95       	inc	r25
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <__fp_mintl>
    11a8:	1c c0       	rjmp	.+56     	; 0x11e2 <__fp_mpack>
    11aa:	77 cf       	rjmp	.-274    	; 0x109a <__fp_szero>

000011ac <__fp_mintl>:
    11ac:	88 23       	and	r24, r24
    11ae:	71 f4       	brne	.+28     	; 0x11cc <__fp_mintl+0x20>
    11b0:	77 23       	and	r23, r23
    11b2:	21 f0       	breq	.+8      	; 0x11bc <__fp_mintl+0x10>
    11b4:	98 50       	subi	r25, 0x08	; 8
    11b6:	87 2b       	or	r24, r23
    11b8:	76 2f       	mov	r23, r22
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <__fp_mintl+0x1e>
    11bc:	66 23       	and	r22, r22
    11be:	11 f4       	brne	.+4      	; 0x11c4 <__fp_mintl+0x18>
    11c0:	99 27       	eor	r25, r25
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <__fp_mintl+0x32>
    11c4:	90 51       	subi	r25, 0x10	; 16
    11c6:	86 2b       	or	r24, r22
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	2a f0       	brmi	.+10     	; 0x11d8 <__fp_mintl+0x2c>
    11ce:	9a 95       	dec	r25
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	da f7       	brpl	.-10     	; 0x11ce <__fp_mintl+0x22>
    11d8:	88 0f       	add	r24, r24
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	97 f9       	bld	r25, 7
    11e0:	08 95       	ret

000011e2 <__fp_mpack>:
    11e2:	9f 3f       	cpi	r25, 0xFF	; 255
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <__fp_mpack_finite+0xc>

000011e6 <__fp_mpack_finite>:
    11e6:	91 50       	subi	r25, 0x01	; 1
    11e8:	20 f4       	brcc	.+8      	; 0x11f2 <__fp_mpack_finite+0xc>
    11ea:	87 95       	ror	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	88 0f       	add	r24, r24
    11f4:	91 1d       	adc	r25, r1
    11f6:	96 95       	lsr	r25
    11f8:	87 95       	ror	r24
    11fa:	97 f9       	bld	r25, 7
    11fc:	08 95       	ret

000011fe <malloc>:
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	91 05       	cpc	r25, r1
    1206:	10 f4       	brcc	.+4      	; 0x120c <malloc+0xe>
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	e0 91 28 25 	lds	r30, 0x2528
    1210:	f0 91 29 25 	lds	r31, 0x2529
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	a0 e0       	ldi	r26, 0x00	; 0
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	39 f1       	breq	.+78     	; 0x126e <malloc+0x70>
    1220:	40 81       	ld	r20, Z
    1222:	51 81       	ldd	r21, Z+1	; 0x01
    1224:	48 17       	cp	r20, r24
    1226:	59 07       	cpc	r21, r25
    1228:	b8 f0       	brcs	.+46     	; 0x1258 <malloc+0x5a>
    122a:	48 17       	cp	r20, r24
    122c:	59 07       	cpc	r21, r25
    122e:	71 f4       	brne	.+28     	; 0x124c <malloc+0x4e>
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	10 97       	sbiw	r26, 0x00	; 0
    1236:	29 f0       	breq	.+10     	; 0x1242 <malloc+0x44>
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	8d 93       	st	X+, r24
    123c:	9c 93       	st	X, r25
    123e:	13 97       	sbiw	r26, 0x03	; 3
    1240:	2c c0       	rjmp	.+88     	; 0x129a <malloc+0x9c>
    1242:	80 93 28 25 	sts	0x2528, r24
    1246:	90 93 29 25 	sts	0x2529, r25
    124a:	27 c0       	rjmp	.+78     	; 0x129a <malloc+0x9c>
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	31 f0       	breq	.+12     	; 0x125e <malloc+0x60>
    1252:	42 17       	cp	r20, r18
    1254:	53 07       	cpc	r21, r19
    1256:	18 f0       	brcs	.+6      	; 0x125e <malloc+0x60>
    1258:	a9 01       	movw	r20, r18
    125a:	db 01       	movw	r26, r22
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <malloc+0x62>
    125e:	ef 01       	movw	r28, r30
    1260:	9a 01       	movw	r18, r20
    1262:	bd 01       	movw	r22, r26
    1264:	df 01       	movw	r26, r30
    1266:	02 80       	ldd	r0, Z+2	; 0x02
    1268:	f3 81       	ldd	r31, Z+3	; 0x03
    126a:	e0 2d       	mov	r30, r0
    126c:	d7 cf       	rjmp	.-82     	; 0x121c <malloc+0x1e>
    126e:	21 15       	cp	r18, r1
    1270:	31 05       	cpc	r19, r1
    1272:	f9 f0       	breq	.+62     	; 0x12b2 <malloc+0xb4>
    1274:	28 1b       	sub	r18, r24
    1276:	39 0b       	sbc	r19, r25
    1278:	24 30       	cpi	r18, 0x04	; 4
    127a:	31 05       	cpc	r19, r1
    127c:	80 f4       	brcc	.+32     	; 0x129e <malloc+0xa0>
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	61 15       	cp	r22, r1
    1284:	71 05       	cpc	r23, r1
    1286:	21 f0       	breq	.+8      	; 0x1290 <malloc+0x92>
    1288:	fb 01       	movw	r30, r22
    128a:	82 83       	std	Z+2, r24	; 0x02
    128c:	93 83       	std	Z+3, r25	; 0x03
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <malloc+0x9a>
    1290:	80 93 28 25 	sts	0x2528, r24
    1294:	90 93 29 25 	sts	0x2529, r25
    1298:	fe 01       	movw	r30, r28
    129a:	32 96       	adiw	r30, 0x02	; 2
    129c:	44 c0       	rjmp	.+136    	; 0x1326 <malloc+0x128>
    129e:	fe 01       	movw	r30, r28
    12a0:	e2 0f       	add	r30, r18
    12a2:	f3 1f       	adc	r31, r19
    12a4:	81 93       	st	Z+, r24
    12a6:	91 93       	st	Z+, r25
    12a8:	22 50       	subi	r18, 0x02	; 2
    12aa:	31 09       	sbc	r19, r1
    12ac:	28 83       	st	Y, r18
    12ae:	39 83       	std	Y+1, r19	; 0x01
    12b0:	3a c0       	rjmp	.+116    	; 0x1326 <malloc+0x128>
    12b2:	20 91 26 25 	lds	r18, 0x2526
    12b6:	30 91 27 25 	lds	r19, 0x2527
    12ba:	23 2b       	or	r18, r19
    12bc:	41 f4       	brne	.+16     	; 0x12ce <malloc+0xd0>
    12be:	20 91 02 20 	lds	r18, 0x2002
    12c2:	30 91 03 20 	lds	r19, 0x2003
    12c6:	20 93 26 25 	sts	0x2526, r18
    12ca:	30 93 27 25 	sts	0x2527, r19
    12ce:	20 91 00 20 	lds	r18, 0x2000
    12d2:	30 91 01 20 	lds	r19, 0x2001
    12d6:	21 15       	cp	r18, r1
    12d8:	31 05       	cpc	r19, r1
    12da:	41 f4       	brne	.+16     	; 0x12ec <malloc+0xee>
    12dc:	2d b7       	in	r18, 0x3d	; 61
    12de:	3e b7       	in	r19, 0x3e	; 62
    12e0:	40 91 04 20 	lds	r20, 0x2004
    12e4:	50 91 05 20 	lds	r21, 0x2005
    12e8:	24 1b       	sub	r18, r20
    12ea:	35 0b       	sbc	r19, r21
    12ec:	e0 91 26 25 	lds	r30, 0x2526
    12f0:	f0 91 27 25 	lds	r31, 0x2527
    12f4:	e2 17       	cp	r30, r18
    12f6:	f3 07       	cpc	r31, r19
    12f8:	a0 f4       	brcc	.+40     	; 0x1322 <malloc+0x124>
    12fa:	2e 1b       	sub	r18, r30
    12fc:	3f 0b       	sbc	r19, r31
    12fe:	28 17       	cp	r18, r24
    1300:	39 07       	cpc	r19, r25
    1302:	78 f0       	brcs	.+30     	; 0x1322 <malloc+0x124>
    1304:	ac 01       	movw	r20, r24
    1306:	4e 5f       	subi	r20, 0xFE	; 254
    1308:	5f 4f       	sbci	r21, 0xFF	; 255
    130a:	24 17       	cp	r18, r20
    130c:	35 07       	cpc	r19, r21
    130e:	48 f0       	brcs	.+18     	; 0x1322 <malloc+0x124>
    1310:	4e 0f       	add	r20, r30
    1312:	5f 1f       	adc	r21, r31
    1314:	40 93 26 25 	sts	0x2526, r20
    1318:	50 93 27 25 	sts	0x2527, r21
    131c:	81 93       	st	Z+, r24
    131e:	91 93       	st	Z+, r25
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <malloc+0x128>
    1322:	e0 e0       	ldi	r30, 0x00	; 0
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	cf 01       	movw	r24, r30
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <free>:
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	09 f4       	brne	.+2      	; 0x1338 <free+0xa>
    1336:	87 c0       	rjmp	.+270    	; 0x1446 <free+0x118>
    1338:	fc 01       	movw	r30, r24
    133a:	32 97       	sbiw	r30, 0x02	; 2
    133c:	12 82       	std	Z+2, r1	; 0x02
    133e:	13 82       	std	Z+3, r1	; 0x03
    1340:	c0 91 28 25 	lds	r28, 0x2528
    1344:	d0 91 29 25 	lds	r29, 0x2529
    1348:	20 97       	sbiw	r28, 0x00	; 0
    134a:	81 f4       	brne	.+32     	; 0x136c <free+0x3e>
    134c:	20 81       	ld	r18, Z
    134e:	31 81       	ldd	r19, Z+1	; 0x01
    1350:	28 0f       	add	r18, r24
    1352:	39 1f       	adc	r19, r25
    1354:	80 91 26 25 	lds	r24, 0x2526
    1358:	90 91 27 25 	lds	r25, 0x2527
    135c:	82 17       	cp	r24, r18
    135e:	93 07       	cpc	r25, r19
    1360:	79 f5       	brne	.+94     	; 0x13c0 <free+0x92>
    1362:	e0 93 26 25 	sts	0x2526, r30
    1366:	f0 93 27 25 	sts	0x2527, r31
    136a:	6d c0       	rjmp	.+218    	; 0x1446 <free+0x118>
    136c:	de 01       	movw	r26, r28
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	ae 17       	cp	r26, r30
    1374:	bf 07       	cpc	r27, r31
    1376:	50 f4       	brcc	.+20     	; 0x138c <free+0x5e>
    1378:	12 96       	adiw	r26, 0x02	; 2
    137a:	4d 91       	ld	r20, X+
    137c:	5c 91       	ld	r21, X
    137e:	13 97       	sbiw	r26, 0x03	; 3
    1380:	9d 01       	movw	r18, r26
    1382:	41 15       	cp	r20, r1
    1384:	51 05       	cpc	r21, r1
    1386:	09 f1       	breq	.+66     	; 0x13ca <free+0x9c>
    1388:	da 01       	movw	r26, r20
    138a:	f3 cf       	rjmp	.-26     	; 0x1372 <free+0x44>
    138c:	a2 83       	std	Z+2, r26	; 0x02
    138e:	b3 83       	std	Z+3, r27	; 0x03
    1390:	40 81       	ld	r20, Z
    1392:	51 81       	ldd	r21, Z+1	; 0x01
    1394:	84 0f       	add	r24, r20
    1396:	95 1f       	adc	r25, r21
    1398:	8a 17       	cp	r24, r26
    139a:	9b 07       	cpc	r25, r27
    139c:	71 f4       	brne	.+28     	; 0x13ba <free+0x8c>
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	11 97       	sbiw	r26, 0x01	; 1
    13a4:	84 0f       	add	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	02 96       	adiw	r24, 0x02	; 2
    13aa:	80 83       	st	Z, r24
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	12 96       	adiw	r26, 0x02	; 2
    13b0:	8d 91       	ld	r24, X+
    13b2:	9c 91       	ld	r25, X
    13b4:	13 97       	sbiw	r26, 0x03	; 3
    13b6:	82 83       	std	Z+2, r24	; 0x02
    13b8:	93 83       	std	Z+3, r25	; 0x03
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	29 f4       	brne	.+10     	; 0x13ca <free+0x9c>
    13c0:	e0 93 28 25 	sts	0x2528, r30
    13c4:	f0 93 29 25 	sts	0x2529, r31
    13c8:	3e c0       	rjmp	.+124    	; 0x1446 <free+0x118>
    13ca:	d9 01       	movw	r26, r18
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	ed 93       	st	X+, r30
    13d0:	fc 93       	st	X, r31
    13d2:	13 97       	sbiw	r26, 0x03	; 3
    13d4:	4d 91       	ld	r20, X+
    13d6:	5d 91       	ld	r21, X+
    13d8:	a4 0f       	add	r26, r20
    13da:	b5 1f       	adc	r27, r21
    13dc:	ea 17       	cp	r30, r26
    13de:	fb 07       	cpc	r31, r27
    13e0:	79 f4       	brne	.+30     	; 0x1400 <free+0xd2>
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	84 0f       	add	r24, r20
    13e8:	95 1f       	adc	r25, r21
    13ea:	02 96       	adiw	r24, 0x02	; 2
    13ec:	d9 01       	movw	r26, r18
    13ee:	8d 93       	st	X+, r24
    13f0:	9c 93       	st	X, r25
    13f2:	11 97       	sbiw	r26, 0x01	; 1
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	12 96       	adiw	r26, 0x02	; 2
    13fa:	8d 93       	st	X+, r24
    13fc:	9c 93       	st	X, r25
    13fe:	13 97       	sbiw	r26, 0x03	; 3
    1400:	e0 e0       	ldi	r30, 0x00	; 0
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	19 f0       	breq	.+6      	; 0x1412 <free+0xe4>
    140c:	fe 01       	movw	r30, r28
    140e:	ec 01       	movw	r28, r24
    1410:	f9 cf       	rjmp	.-14     	; 0x1404 <free+0xd6>
    1412:	ce 01       	movw	r24, r28
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	28 81       	ld	r18, Y
    1418:	39 81       	ldd	r19, Y+1	; 0x01
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	20 91 26 25 	lds	r18, 0x2526
    1422:	30 91 27 25 	lds	r19, 0x2527
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	69 f4       	brne	.+26     	; 0x1446 <free+0x118>
    142c:	30 97       	sbiw	r30, 0x00	; 0
    142e:	29 f4       	brne	.+10     	; 0x143a <free+0x10c>
    1430:	10 92 28 25 	sts	0x2528, r1
    1434:	10 92 29 25 	sts	0x2529, r1
    1438:	02 c0       	rjmp	.+4      	; 0x143e <free+0x110>
    143a:	12 82       	std	Z+2, r1	; 0x02
    143c:	13 82       	std	Z+3, r1	; 0x03
    143e:	c0 93 26 25 	sts	0x2526, r28
    1442:	d0 93 27 25 	sts	0x2527, r29
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <memset>:
    144c:	dc 01       	movw	r26, r24
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <memset+0x6>
    1450:	6d 93       	st	X+, r22
    1452:	41 50       	subi	r20, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	e0 f7       	brcc	.-8      	; 0x1450 <memset+0x4>
    1458:	08 95       	ret

0000145a <strcat>:
    145a:	fb 01       	movw	r30, r22
    145c:	dc 01       	movw	r26, r24
    145e:	0d 90       	ld	r0, X+
    1460:	00 20       	and	r0, r0
    1462:	e9 f7       	brne	.-6      	; 0x145e <strcat+0x4>
    1464:	11 97       	sbiw	r26, 0x01	; 1
    1466:	01 90       	ld	r0, Z+
    1468:	0d 92       	st	X+, r0
    146a:	00 20       	and	r0, r0
    146c:	e1 f7       	brne	.-8      	; 0x1466 <strcat+0xc>
    146e:	08 95       	ret

00001470 <strcmp>:
    1470:	fb 01       	movw	r30, r22
    1472:	dc 01       	movw	r26, r24
    1474:	8d 91       	ld	r24, X+
    1476:	01 90       	ld	r0, Z+
    1478:	80 19       	sub	r24, r0
    147a:	01 10       	cpse	r0, r1
    147c:	d9 f3       	breq	.-10     	; 0x1474 <strcmp+0x4>
    147e:	99 0b       	sbc	r25, r25
    1480:	08 95       	ret

00001482 <strcpy>:
    1482:	fb 01       	movw	r30, r22
    1484:	dc 01       	movw	r26, r24
    1486:	01 90       	ld	r0, Z+
    1488:	0d 92       	st	X+, r0
    148a:	00 20       	and	r0, r0
    148c:	e1 f7       	brne	.-8      	; 0x1486 <strcpy+0x4>
    148e:	08 95       	ret

00001490 <__itoa_ncheck>:
    1490:	bb 27       	eor	r27, r27
    1492:	4a 30       	cpi	r20, 0x0A	; 10
    1494:	31 f4       	brne	.+12     	; 0x14a2 <__itoa_ncheck+0x12>
    1496:	99 23       	and	r25, r25
    1498:	22 f4       	brpl	.+8      	; 0x14a2 <__itoa_ncheck+0x12>
    149a:	bd e2       	ldi	r27, 0x2D	; 45
    149c:	90 95       	com	r25
    149e:	81 95       	neg	r24
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <__utoa_common>

000014a4 <__utoa_ncheck>:
    14a4:	bb 27       	eor	r27, r27

000014a6 <__utoa_common>:
    14a6:	fb 01       	movw	r30, r22
    14a8:	55 27       	eor	r21, r21
    14aa:	aa 27       	eor	r26, r26
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	aa 1f       	adc	r26, r26
    14b2:	a4 17       	cp	r26, r20
    14b4:	10 f0       	brcs	.+4      	; 0x14ba <__utoa_common+0x14>
    14b6:	a4 1b       	sub	r26, r20
    14b8:	83 95       	inc	r24
    14ba:	50 51       	subi	r21, 0x10	; 16
    14bc:	b9 f7       	brne	.-18     	; 0x14ac <__utoa_common+0x6>
    14be:	a0 5d       	subi	r26, 0xD0	; 208
    14c0:	aa 33       	cpi	r26, 0x3A	; 58
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <__utoa_common+0x20>
    14c4:	a9 5d       	subi	r26, 0xD9	; 217
    14c6:	a1 93       	st	Z+, r26
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	79 f7       	brne	.-34     	; 0x14aa <__utoa_common+0x4>
    14cc:	b1 11       	cpse	r27, r1
    14ce:	b1 93       	st	Z+, r27
    14d0:	11 92       	st	Z+, r1
    14d2:	cb 01       	movw	r24, r22
    14d4:	00 c0       	rjmp	.+0      	; 0x14d6 <strrev>

000014d6 <strrev>:
    14d6:	dc 01       	movw	r26, r24
    14d8:	fc 01       	movw	r30, r24
    14da:	67 2f       	mov	r22, r23
    14dc:	71 91       	ld	r23, Z+
    14de:	77 23       	and	r23, r23
    14e0:	e1 f7       	brne	.-8      	; 0x14da <strrev+0x4>
    14e2:	32 97       	sbiw	r30, 0x02	; 2
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <strrev+0x18>
    14e6:	7c 91       	ld	r23, X
    14e8:	6d 93       	st	X+, r22
    14ea:	70 83       	st	Z, r23
    14ec:	62 91       	ld	r22, -Z
    14ee:	ae 17       	cp	r26, r30
    14f0:	bf 07       	cpc	r27, r31
    14f2:	c8 f3       	brcs	.-14     	; 0x14e6 <strrev+0x10>
    14f4:	08 95       	ret

000014f6 <_exit>:
    14f6:	f8 94       	cli

000014f8 <__stop_program>:
    14f8:	ff cf       	rjmp	.-2      	; 0x14f8 <__stop_program>
