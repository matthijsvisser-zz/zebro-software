
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  00000cd4  00000d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040e  00802004  00802004  00000d6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001779  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000781  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a00  00000000  00000000  00002db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000045c  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008f5  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001221  00000000  00000000  00004509  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000572a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	00 c1       	rjmp	.+512    	; 0x266 <__vector_25>
  66:	00 00       	nop
  68:	32 c1       	rjmp	.+612    	; 0x2ce <__vector_26>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c1       	rjmp	.+708    	; 0x336 <__vector_28>
  72:	00 00       	nop
  74:	94 c1       	rjmp	.+808    	; 0x39e <__vector_29>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 ed       	ldi	r30, 0xD4	; 212
 21c:	fc e0       	ldi	r31, 0x0C	; 12
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a4 e0       	ldi	r26, 0x04	; 4
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a2 31       	cpi	r26, 0x12	; 18
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	e2 d0       	rcall	.+452    	; 0x406 <main>
 242:	46 c5       	rjmp	.+2700   	; 0xcd0 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
 246:	88 ed       	ldi	r24, 0xD8	; 216
 248:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
 24a:	e0 e5       	ldi	r30, 0x50	; 80
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	82 60       	ori	r24, 0x02	; 2
 252:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 254:	81 81       	ldd	r24, Z+1	; 0x01
 256:	81 ff       	sbrs	r24, 1
 258:	fd cf       	rjmp	.-6      	; 0x254 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
 25a:	88 ed       	ldi	r24, 0xD8	; 216
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 40 00 	sts	0x0040, r24
 264:	08 95       	ret

00000266 <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	08 b6       	in	r0, 0x38	; 56
 272:	0f 92       	push	r0
 274:	18 be       	out	0x38, r1	; 56
 276:	09 b6       	in	r0, 0x39	; 57
 278:	0f 92       	push	r0
 27a:	19 be       	out	0x39, r1	; 57
 27c:	0b b6       	in	r0, 0x3b	; 59
 27e:	0f 92       	push	r0
 280:	1b be       	out	0x3b, r1	; 59
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	90 e2       	ldi	r25, 0x20	; 32
 29e:	a5 d2       	rcall	.+1354   	; 0x7ea <USART_RXComplete>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	09 be       	out	0x39, r0	; 57
 2c0:	0f 90       	pop	r0
 2c2:	08 be       	out	0x38, r0	; 56
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	08 b6       	in	r0, 0x38	; 56
 2da:	0f 92       	push	r0
 2dc:	18 be       	out	0x38, r1	; 56
 2de:	09 b6       	in	r0, 0x39	; 57
 2e0:	0f 92       	push	r0
 2e2:	19 be       	out	0x39, r1	; 57
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	1b be       	out	0x3b, r1	; 59
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	8c d2       	rcall	.+1304   	; 0x820 <USART_DataRegEmpty>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	09 be       	out	0x39, r0	; 57
 328:	0f 90       	pop	r0
 32a:	08 be       	out	0x38, r0	; 56
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	08 b6       	in	r0, 0x38	; 56
 342:	0f 92       	push	r0
 344:	18 be       	out	0x38, r1	; 56
 346:	09 b6       	in	r0, 0x39	; 57
 348:	0f 92       	push	r0
 34a:	19 be       	out	0x39, r1	; 57
 34c:	0b b6       	in	r0, 0x3b	; 59
 34e:	0f 92       	push	r0
 350:	1b be       	out	0x3b, r1	; 59
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
 36a:	8b e0       	ldi	r24, 0x0B	; 11
 36c:	92 e2       	ldi	r25, 0x22	; 34
 36e:	3d d2       	rcall	.+1146   	; 0x7ea <USART_RXComplete>
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	09 be       	out	0x39, r0	; 57
 390:	0f 90       	pop	r0
 392:	08 be       	out	0x38, r0	; 56
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	08 b6       	in	r0, 0x38	; 56
 3aa:	0f 92       	push	r0
 3ac:	18 be       	out	0x38, r1	; 56
 3ae:	09 b6       	in	r0, 0x39	; 57
 3b0:	0f 92       	push	r0
 3b2:	19 be       	out	0x39, r1	; 57
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	1b be       	out	0x3b, r1	; 59
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
 3d2:	8b e0       	ldi	r24, 0x0B	; 11
 3d4:	92 e2       	ldi	r25, 0x22	; 34
 3d6:	24 d2       	rcall	.+1096   	; 0x820 <USART_DataRegEmpty>
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0b be       	out	0x3b, r0	; 59
 3f4:	0f 90       	pop	r0
 3f6:	09 be       	out	0x39, r0	; 57
 3f8:	0f 90       	pop	r0
 3fa:	08 be       	out	0x38, r0	; 56
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <main>:

#define UPDATEINTERVAL 1000

int main(void){
	
	SystemClock_init();										// 32 MHz clock
 406:	1f df       	rcall	.-450    	; 0x246 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
 408:	c1 2c       	mov	r12, r1
 40a:	e1 2c       	mov	r14, r1
 40c:	12 ec       	ldi	r17, 0xC2	; 194
 40e:	f1 2e       	mov	r15, r17
 410:	01 e0       	ldi	r16, 0x01	; 1
 412:	10 e0       	ldi	r17, 0x00	; 0
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	38 e4       	ldi	r19, 0x48	; 72
 418:	48 ee       	ldi	r20, 0xE8	; 232
 41a:	51 e0       	ldi	r21, 0x01	; 1
 41c:	60 ea       	ldi	r22, 0xA0	; 160
 41e:	78 e0       	ldi	r23, 0x08	; 8
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	90 e2       	ldi	r25, 0x20	; 32
 424:	42 d1       	rcall	.+644    	; 0x6aa <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	38 e4       	ldi	r19, 0x48	; 72
 42a:	48 ee       	ldi	r20, 0xE8	; 232
 42c:	51 e0       	ldi	r21, 0x01	; 1
 42e:	60 eb       	ldi	r22, 0xB0	; 176
 430:	78 e0       	ldi	r23, 0x08	; 8
 432:	8b e0       	ldi	r24, 0x0B	; 11
 434:	92 e2       	ldi	r25, 0x22	; 34
 436:	39 d1       	rcall	.+626    	; 0x6aa <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	e0 ea       	ldi	r30, 0xA0	; 160
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	82 83       	std	Z+2, r24	; 0x02
	sei();
 440:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	87 ea       	ldi	r24, 0xA7	; 167
 446:	91 e6       	ldi	r25, 0x61	; 97
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <main+0x42>
 450:	00 c0       	rjmp	.+0      	; 0x452 <main+0x4c>
 452:	00 00       	nop
	

	
	while(1) {
		_delay_ms(UPDATEINTERVAL);
		uart_puts(&uartC1, "1");
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e2       	ldi	r23, 0x20	; 32
 458:	8b e0       	ldi	r24, 0x0B	; 11
 45a:	92 e2       	ldi	r25, 0x22	; 34
 45c:	15 d0       	rcall	.+42     	; 0x488 <uart_puts>
		uart_puts(&uartC0, "0");
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	70 e2       	ldi	r23, 0x20	; 32
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	90 e2       	ldi	r25, 0x20	; 32
 466:	10 d0       	rcall	.+32     	; 0x488 <uart_puts>
 468:	ec cf       	rjmp	.-40     	; 0x442 <main+0x3c>

0000046a <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
 472:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
 474:	85 d1       	rcall	.+778    	; 0x780 <USART_TXBuffer_FreeSpace>
 476:	88 23       	and	r24, r24
 478:	19 f0       	breq	.+6      	; 0x480 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
 47a:	61 2f       	mov	r22, r17
 47c:	ce 01       	movw	r24, r28
 47e:	8c d1       	rcall	.+792    	; 0x798 <USART_TXBuffer_PutByte>
  }
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	08 95       	ret

00000488 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
 492:	eb 01       	movw	r28, r22
 494:	21 96       	adiw	r28, 0x01	; 1
 496:	fb 01       	movw	r30, r22
 498:	60 81       	ld	r22, Z
 49a:	66 23       	and	r22, r22
 49c:	29 f0       	breq	.+10     	; 0x4a8 <uart_puts+0x20>
    uart_putc(uart, c);
 49e:	c8 01       	movw	r24, r16
 4a0:	e4 df       	rcall	.-56     	; 0x46a <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
 4a2:	69 91       	ld	r22, Y+
 4a4:	61 11       	cpse	r22, r1
 4a6:	fb cf       	rjmp	.-10     	; 0x49e <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	08 95       	ret

000004b2 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
 4b2:	80 3a       	cpi	r24, 0xA0	; 160
 4b4:	28 e0       	ldi	r18, 0x08	; 8
 4b6:	92 07       	cpc	r25, r18
 4b8:	39 f4       	brne	.+14     	; 0x4c8 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
 4ba:	e0 e4       	ldi	r30, 0x40	; 64
 4bc:	f6 e0       	ldi	r31, 0x06	; 6
 4be:	88 e0       	ldi	r24, 0x08	; 8
 4c0:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
 4c2:	84 e0       	ldi	r24, 0x04	; 4
 4c4:	82 83       	std	Z+2, r24	; 0x02
     return;
 4c6:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
 4c8:	80 3b       	cpi	r24, 0xB0	; 176
 4ca:	28 e0       	ldi	r18, 0x08	; 8
 4cc:	92 07       	cpc	r25, r18
 4ce:	39 f4       	brne	.+14     	; 0x4de <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
 4d0:	e0 e4       	ldi	r30, 0x40	; 64
 4d2:	f6 e0       	ldi	r31, 0x06	; 6
 4d4:	80 e8       	ldi	r24, 0x80	; 128
 4d6:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
 4d8:	80 e4       	ldi	r24, 0x40	; 64
 4da:	82 83       	std	Z+2, r24	; 0x02
     return;
 4dc:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
 4de:	80 3a       	cpi	r24, 0xA0	; 160
 4e0:	29 e0       	ldi	r18, 0x09	; 9
 4e2:	92 07       	cpc	r25, r18
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
 4e6:	e0 e6       	ldi	r30, 0x60	; 96
 4e8:	f6 e0       	ldi	r31, 0x06	; 6
 4ea:	88 e0       	ldi	r24, 0x08	; 8
 4ec:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	82 83       	std	Z+2, r24	; 0x02
     return;
 4f2:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
 4f4:	80 3b       	cpi	r24, 0xB0	; 176
 4f6:	29 e0       	ldi	r18, 0x09	; 9
 4f8:	92 07       	cpc	r25, r18
 4fa:	39 f4       	brne	.+14     	; 0x50a <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
 4fc:	e0 e6       	ldi	r30, 0x60	; 96
 4fe:	f6 e0       	ldi	r31, 0x06	; 6
 500:	80 e8       	ldi	r24, 0x80	; 128
 502:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
 504:	80 e4       	ldi	r24, 0x40	; 64
 506:	82 83       	std	Z+2, r24	; 0x02
     return;
 508:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
 50a:	80 3a       	cpi	r24, 0xA0	; 160
 50c:	9a 40       	sbci	r25, 0x0A	; 10
 50e:	31 f4       	brne	.+12     	; 0x51c <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
 510:	e0 e8       	ldi	r30, 0x80	; 128
 512:	f6 e0       	ldi	r31, 0x06	; 6
 514:	88 e0       	ldi	r24, 0x08	; 8
 516:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
 518:	84 e0       	ldi	r24, 0x04	; 4
 51a:	82 83       	std	Z+2, r24	; 0x02
 51c:	08 95       	ret

0000051e <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
 51e:	4f 92       	push	r4
 520:	5f 92       	push	r5
 522:	6f 92       	push	r6
 524:	7f 92       	push	r7
 526:	8f 92       	push	r8
 528:	9f 92       	push	r9
 52a:	af 92       	push	r10
 52c:	bf 92       	push	r11
 52e:	cf 92       	push	r12
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	1f 93       	push	r17
 53a:	49 01       	movw	r8, r18
 53c:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
 53e:	4e 2d       	mov	r20, r14
 540:	41 70       	andi	r20, 0x01	; 1
 542:	20 e1       	ldi	r18, 0x10	; 16
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	79 01       	movw	r14, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <calc_bsel+0x30>
 54a:	f5 94       	asr	r15
 54c:	e7 94       	ror	r14
 54e:	4a 95       	dec	r20
 550:	e2 f7       	brpl	.-8      	; 0x54a <calc_bsel+0x2c>
  if ( scale < 0 ) {
 552:	00 23       	and	r16, r16
 554:	0c f0       	brlt	.+2      	; 0x558 <calc_bsel+0x3a>
 556:	39 c0       	rjmp	.+114    	; 0x5ca <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
 558:	81 d2       	rcall	.+1282   	; 0xa5c <__floatunsisf>
 55a:	2b 01       	movw	r4, r22
 55c:	3c 01       	movw	r6, r24
 55e:	b7 01       	movw	r22, r14
 560:	77 27       	eor	r23, r23
 562:	88 27       	eor	r24, r24
 564:	77 fd       	sbrc	r23, 7
 566:	80 95       	com	r24
 568:	98 2f       	mov	r25, r24
 56a:	7a d2       	rcall	.+1268   	; 0xa60 <__floatsisf>
 56c:	6b 01       	movw	r12, r22
 56e:	7c 01       	movw	r14, r24
 570:	c5 01       	movw	r24, r10
 572:	b4 01       	movw	r22, r8
 574:	73 d2       	rcall	.+1254   	; 0xa5c <__floatunsisf>
 576:	9b 01       	movw	r18, r22
 578:	ac 01       	movw	r20, r24
 57a:	c7 01       	movw	r24, r14
 57c:	b6 01       	movw	r22, r12
 57e:	fc d2       	rcall	.+1528   	; 0xb78 <__mulsf3>
 580:	9b 01       	movw	r18, r22
 582:	ac 01       	movw	r20, r24
 584:	c3 01       	movw	r24, r6
 586:	b2 01       	movw	r22, r4
 588:	d5 d1       	rcall	.+938    	; 0x934 <__divsf3>
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	40 e8       	ldi	r20, 0x80	; 128
 590:	5f e3       	ldi	r21, 0x3F	; 63
 592:	6b d1       	rcall	.+726    	; 0x86a <__subsf3>
 594:	6b 01       	movw	r12, r22
 596:	7c 01       	movw	r14, r24
 598:	11 27       	eor	r17, r17
 59a:	01 95       	neg	r16
 59c:	0c f4       	brge	.+2      	; 0x5a0 <calc_bsel+0x82>
 59e:	10 95       	com	r17
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <calc_bsel+0x8c>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	0a 95       	dec	r16
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <calc_bsel+0x88>
 5ae:	88 27       	eor	r24, r24
 5b0:	77 fd       	sbrc	r23, 7
 5b2:	80 95       	com	r24
 5b4:	98 2f       	mov	r25, r24
 5b6:	54 d2       	rcall	.+1192   	; 0xa60 <__floatsisf>
 5b8:	9b 01       	movw	r18, r22
 5ba:	ac 01       	movw	r20, r24
 5bc:	c7 01       	movw	r24, r14
 5be:	b6 01       	movw	r22, r12
 5c0:	db d2       	rcall	.+1462   	; 0xb78 <__mulsf3>
 5c2:	3d d3       	rcall	.+1658   	; 0xc3e <round>
 5c4:	1f d2       	rcall	.+1086   	; 0xa04 <__fixunssfsi>
 5c6:	cb 01       	movw	r24, r22
 5c8:	34 c0       	rjmp	.+104    	; 0x632 <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
 5ca:	48 d2       	rcall	.+1168   	; 0xa5c <__floatunsisf>
 5cc:	2b 01       	movw	r4, r22
 5ce:	3c 01       	movw	r6, r24
 5d0:	b7 01       	movw	r22, r14
 5d2:	77 27       	eor	r23, r23
 5d4:	88 27       	eor	r24, r24
 5d6:	77 fd       	sbrc	r23, 7
 5d8:	80 95       	com	r24
 5da:	98 2f       	mov	r25, r24
 5dc:	41 d2       	rcall	.+1154   	; 0xa60 <__floatsisf>
 5de:	6b 01       	movw	r12, r22
 5e0:	7c 01       	movw	r14, r24
 5e2:	c5 01       	movw	r24, r10
 5e4:	b4 01       	movw	r22, r8
 5e6:	3a d2       	rcall	.+1140   	; 0xa5c <__floatunsisf>
 5e8:	9b 01       	movw	r18, r22
 5ea:	ac 01       	movw	r20, r24
 5ec:	c7 01       	movw	r24, r14
 5ee:	b6 01       	movw	r22, r12
 5f0:	c3 d2       	rcall	.+1414   	; 0xb78 <__mulsf3>
 5f2:	9b 01       	movw	r18, r22
 5f4:	ac 01       	movw	r20, r24
 5f6:	c3 01       	movw	r24, r6
 5f8:	b2 01       	movw	r22, r4
 5fa:	9c d1       	rcall	.+824    	; 0x934 <__divsf3>
 5fc:	4b 01       	movw	r8, r22
 5fe:	5c 01       	movw	r10, r24
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <calc_bsel+0xec>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	0a 95       	dec	r16
 60c:	e2 f7       	brpl	.-8      	; 0x606 <calc_bsel+0xe8>
 60e:	88 27       	eor	r24, r24
 610:	77 fd       	sbrc	r23, 7
 612:	80 95       	com	r24
 614:	98 2f       	mov	r25, r24
 616:	24 d2       	rcall	.+1096   	; 0xa60 <__floatsisf>
 618:	9b 01       	movw	r18, r22
 61a:	ac 01       	movw	r20, r24
 61c:	c5 01       	movw	r24, r10
 61e:	b4 01       	movw	r22, r8
 620:	89 d1       	rcall	.+786    	; 0x934 <__divsf3>
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e8       	ldi	r20, 0x80	; 128
 628:	5f e3       	ldi	r21, 0x3F	; 63
 62a:	1f d1       	rcall	.+574    	; 0x86a <__subsf3>
 62c:	08 d3       	rcall	.+1552   	; 0xc3e <round>
 62e:	ea d1       	rcall	.+980    	; 0xa04 <__fixunssfsi>
 630:	cb 01       	movw	r24, r22
  }
}
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	bf 90       	pop	r11
 640:	af 90       	pop	r10
 642:	9f 90       	pop	r9
 644:	8f 90       	pop	r8
 646:	7f 90       	pop	r7
 648:	6f 90       	pop	r6
 64a:	5f 90       	pop	r5
 64c:	4f 90       	pop	r4
 64e:	08 95       	ret

00000650 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 650:	4f 92       	push	r4
 652:	5f 92       	push	r5
 654:	6f 92       	push	r6
 656:	7f 92       	push	r7
 658:	8f 92       	push	r8
 65a:	9f 92       	push	r9
 65c:	af 92       	push	r10
 65e:	bf 92       	push	r11
 660:	ef 92       	push	r14
 662:	0f 93       	push	r16
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	2b 01       	movw	r4, r22
 66a:	3c 01       	movw	r6, r24
 66c:	49 01       	movw	r8, r18
 66e:	5a 01       	movw	r10, r20
 670:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 672:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
 674:	ed 2e       	mov	r14, r29
 676:	0c 2f       	mov	r16, r28
 678:	a5 01       	movw	r20, r10
 67a:	94 01       	movw	r18, r8
 67c:	c3 01       	movw	r24, r6
 67e:	b2 01       	movw	r22, r4
 680:	4e df       	rcall	.-356    	; 0x51e <calc_bsel>
 682:	81 15       	cp	r24, r1
 684:	90 41       	sbci	r25, 0x10	; 16
 686:	18 f0       	brcs	.+6      	; 0x68e <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 688:	cf 5f       	subi	r28, 0xFF	; 255
 68a:	c8 30       	cpi	r28, 0x08	; 8
 68c:	99 f7       	brne	.-26     	; 0x674 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
 68e:	8c 2f       	mov	r24, r28
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	0f 91       	pop	r16
 696:	ef 90       	pop	r14
 698:	bf 90       	pop	r11
 69a:	af 90       	pop	r10
 69c:	9f 90       	pop	r9
 69e:	8f 90       	pop	r8
 6a0:	7f 90       	pop	r7
 6a2:	6f 90       	pop	r6
 6a4:	5f 90       	pop	r5
 6a6:	4f 90       	pop	r4
 6a8:	08 95       	ret

000006aa <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 6aa:	2f 92       	push	r2
 6ac:	3f 92       	push	r3
 6ae:	4f 92       	push	r4
 6b0:	5f 92       	push	r5
 6b2:	6f 92       	push	r6
 6b4:	7f 92       	push	r7
 6b6:	8f 92       	push	r8
 6b8:	9f 92       	push	r9
 6ba:	af 92       	push	r10
 6bc:	bf 92       	push	r11
 6be:	cf 92       	push	r12
 6c0:	ef 92       	push	r14
 6c2:	ff 92       	push	r15
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	ec 01       	movw	r28, r24
 6ce:	3b 01       	movw	r6, r22
 6d0:	49 01       	movw	r8, r18
 6d2:	5a 01       	movw	r10, r20
 6d4:	17 01       	movw	r2, r14
 6d6:	28 01       	movw	r4, r16
 6d8:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
 6da:	0c 2d       	mov	r16, r12
 6dc:	a2 01       	movw	r20, r4
 6de:	91 01       	movw	r18, r2
 6e0:	c5 01       	movw	r24, r10
 6e2:	b4 01       	movw	r22, r8
 6e4:	b5 df       	rcall	.-150    	; 0x650 <calc_bscale>
 6e6:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
 6e8:	08 2f       	mov	r16, r24
 6ea:	a2 01       	movw	r20, r4
 6ec:	91 01       	movw	r18, r2
 6ee:	c5 01       	movw	r24, r10
 6f0:	b4 01       	movw	r22, r8
 6f2:	15 df       	rcall	.-470    	; 0x51e <calc_bsel>
 6f4:	b8 2e       	mov	r11, r24
 6f6:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	b3 01       	movw	r22, r6
 6fc:	ce 01       	movw	r24, r28
 6fe:	32 d0       	rcall	.+100    	; 0x764 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
 700:	e8 81       	ld	r30, Y
 702:	f9 81       	ldd	r31, Y+1	; 0x01
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
 708:	e8 81       	ld	r30, Y
 70a:	f9 81       	ldd	r31, Y+1	; 0x01
 70c:	84 81       	ldd	r24, Z+4	; 0x04
 70e:	80 61       	ori	r24, 0x10	; 16
 710:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
 712:	e8 81       	ld	r30, Y
 714:	f9 81       	ldd	r31, Y+1	; 0x01
 716:	84 81       	ldd	r24, Z+4	; 0x04
 718:	88 60       	ori	r24, 0x08	; 8
 71a:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
 71c:	e8 81       	ld	r30, Y
 71e:	f9 81       	ldd	r31, Y+1	; 0x01
 720:	83 81       	ldd	r24, Z+3	; 0x03
 722:	8f 7c       	andi	r24, 0xCF	; 207
 724:	80 61       	ori	r24, 0x10	; 16
 726:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
 728:	e8 81       	ld	r30, Y
 72a:	f9 81       	ldd	r31, Y+1	; 0x01
 72c:	b6 82       	std	Z+6, r11	; 0x06
 72e:	e8 81       	ld	r30, Y
 730:	f9 81       	ldd	r31, Y+1	; 0x01
 732:	12 95       	swap	r17
 734:	10 7f       	andi	r17, 0xF0	; 240
 736:	e1 2a       	or	r14, r17
 738:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
 73a:	88 81       	ld	r24, Y
 73c:	99 81       	ldd	r25, Y+1	; 0x01
 73e:	b9 de       	rcall	.-654    	; 0x4b2 <set_usart_txrx_direction>
}
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	ff 90       	pop	r15
 74a:	ef 90       	pop	r14
 74c:	cf 90       	pop	r12
 74e:	bf 90       	pop	r11
 750:	af 90       	pop	r10
 752:	9f 90       	pop	r9
 754:	8f 90       	pop	r8
 756:	7f 90       	pop	r7
 758:	6f 90       	pop	r6
 75a:	5f 90       	pop	r5
 75c:	4f 90       	pop	r4
 75e:	3f 90       	pop	r3
 760:	2f 90       	pop	r2
 762:	08 95       	ret

00000764 <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
 764:	fc 01       	movw	r30, r24
 766:	60 83       	st	Z, r22
 768:	71 83       	std	Z+1, r23	; 0x01
 76a:	42 83       	std	Z+2, r20	; 0x02
 76c:	ec 5f       	subi	r30, 0xFC	; 252
 76e:	fd 4f       	sbci	r31, 0xFD	; 253
 770:	10 82       	st	Z, r1
 772:	31 97       	sbiw	r30, 0x01	; 1
 774:	10 82       	st	Z, r1
 776:	33 96       	adiw	r30, 0x03	; 3
 778:	10 82       	st	Z, r1
 77a:	31 97       	sbiw	r30, 0x01	; 1
 77c:	10 82       	st	Z, r1
 77e:	08 95       	ret

00000780 <USART_TXBuffer_FreeSpace>:
 780:	fc 01       	movw	r30, r24
 782:	eb 5f       	subi	r30, 0xFB	; 251
 784:	fd 4f       	sbci	r31, 0xFD	; 253
 786:	20 81       	ld	r18, Z
 788:	31 96       	adiw	r30, 0x01	; 1
 78a:	90 81       	ld	r25, Z
 78c:	2f 5f       	subi	r18, 0xFF	; 255
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	29 13       	cpse	r18, r25
 792:	01 c0       	rjmp	.+2      	; 0x796 <USART_TXBuffer_FreeSpace+0x16>
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	08 95       	ret

00000798 <USART_TXBuffer_PutByte>:
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	fc 01       	movw	r30, r24
 79e:	dc 01       	movw	r26, r24
 7a0:	ab 5f       	subi	r26, 0xFB	; 251
 7a2:	bd 4f       	sbci	r27, 0xFD	; 253
 7a4:	2c 91       	ld	r18, X
 7a6:	11 96       	adiw	r26, 0x01	; 1
 7a8:	9c 91       	ld	r25, X
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	29 13       	cpse	r18, r25
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <USART_TXBuffer_PutByte+0x1c>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	88 23       	and	r24, r24
 7b6:	b1 f0       	breq	.+44     	; 0x7e4 <USART_TXBuffer_PutByte+0x4c>
 7b8:	df 01       	movw	r26, r30
 7ba:	ab 5f       	subi	r26, 0xFB	; 251
 7bc:	bd 4f       	sbci	r27, 0xFD	; 253
 7be:	9c 91       	ld	r25, X
 7c0:	ef 01       	movw	r28, r30
 7c2:	c9 0f       	add	r28, r25
 7c4:	d1 1d       	adc	r29, r1
 7c6:	cd 5f       	subi	r28, 0xFD	; 253
 7c8:	de 4f       	sbci	r29, 0xFE	; 254
 7ca:	68 83       	st	Y, r22
 7cc:	9f 5f       	subi	r25, 0xFF	; 255
 7ce:	9c 93       	st	X, r25
 7d0:	a0 81       	ld	r26, Z
 7d2:	b1 81       	ldd	r27, Z+1	; 0x01
 7d4:	13 96       	adiw	r26, 0x03	; 3
 7d6:	9c 91       	ld	r25, X
 7d8:	13 97       	sbiw	r26, 0x03	; 3
 7da:	9c 7f       	andi	r25, 0xFC	; 252
 7dc:	22 81       	ldd	r18, Z+2	; 0x02
 7de:	92 2b       	or	r25, r18
 7e0:	13 96       	adiw	r26, 0x03	; 3
 7e2:	9c 93       	st	X, r25
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 7ea:	fc 01       	movw	r30, r24
 7ec:	ed 5f       	subi	r30, 0xFD	; 253
 7ee:	fd 4f       	sbci	r31, 0xFD	; 253
 7f0:	20 81       	ld	r18, Z
 7f2:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 7f4:	31 96       	adiw	r30, 0x01	; 1
 7f6:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
 7f8:	dc 01       	movw	r26, r24
 7fa:	ed 91       	ld	r30, X+
 7fc:	fc 91       	ld	r31, X
 7fe:	11 97       	sbiw	r26, 0x01	; 1
 800:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
 802:	23 17       	cp	r18, r19
 804:	59 f0       	breq	.+22     	; 0x81c <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 806:	fc 01       	movw	r30, r24
 808:	ed 5f       	subi	r30, 0xFD	; 253
 80a:	fd 4f       	sbci	r31, 0xFD	; 253
 80c:	30 81       	ld	r19, Z
 80e:	a3 0f       	add	r26, r19
 810:	b1 1d       	adc	r27, r1
 812:	13 96       	adiw	r26, 0x03	; 3
 814:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
 816:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 81c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 81e:	08 95       	ret

00000820 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 824:	fc 01       	movw	r30, r24
 826:	ea 5f       	subi	r30, 0xFA	; 250
 828:	fd 4f       	sbci	r31, 0xFD	; 253
 82a:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
 82c:	31 97       	sbiw	r30, 0x01	; 1
 82e:	30 81       	ld	r19, Z
 830:	32 13       	cpse	r19, r18
 832:	07 c0       	rjmp	.+14     	; 0x842 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 834:	dc 01       	movw	r26, r24
 836:	ed 91       	ld	r30, X+
 838:	fc 91       	ld	r31, X
 83a:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 83c:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 83e:	83 83       	std	Z+3, r24	; 0x03
 840:	11 c0       	rjmp	.+34     	; 0x864 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 842:	fc 01       	movw	r30, r24
 844:	ea 5f       	subi	r30, 0xFA	; 250
 846:	fd 4f       	sbci	r31, 0xFD	; 253
 848:	20 81       	ld	r18, Z
 84a:	dc 01       	movw	r26, r24
 84c:	a2 0f       	add	r26, r18
 84e:	b1 1d       	adc	r27, r1
 850:	ad 5f       	subi	r26, 0xFD	; 253
 852:	be 4f       	sbci	r27, 0xFE	; 254
 854:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
 856:	ec 01       	movw	r28, r24
 858:	a8 81       	ld	r26, Y
 85a:	b9 81       	ldd	r27, Y+1	; 0x01
 85c:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 85e:	80 81       	ld	r24, Z
 860:	8f 5f       	subi	r24, 0xFF	; 255
 862:	80 83       	st	Z, r24
	}
}
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	08 95       	ret

0000086a <__subsf3>:
 86a:	50 58       	subi	r21, 0x80	; 128

0000086c <__addsf3>:
 86c:	bb 27       	eor	r27, r27
 86e:	aa 27       	eor	r26, r26
 870:	0e d0       	rcall	.+28     	; 0x88e <__addsf3x>
 872:	48 c1       	rjmp	.+656    	; 0xb04 <__fp_round>
 874:	39 d1       	rcall	.+626    	; 0xae8 <__fp_pscA>
 876:	30 f0       	brcs	.+12     	; 0x884 <__addsf3+0x18>
 878:	3e d1       	rcall	.+636    	; 0xaf6 <__fp_pscB>
 87a:	20 f0       	brcs	.+8      	; 0x884 <__addsf3+0x18>
 87c:	31 f4       	brne	.+12     	; 0x88a <__addsf3+0x1e>
 87e:	9f 3f       	cpi	r25, 0xFF	; 255
 880:	11 f4       	brne	.+4      	; 0x886 <__addsf3+0x1a>
 882:	1e f4       	brtc	.+6      	; 0x88a <__addsf3+0x1e>
 884:	2e c1       	rjmp	.+604    	; 0xae2 <__fp_nan>
 886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3+0x1e>
 888:	e0 95       	com	r30
 88a:	e7 fb       	bst	r30, 7
 88c:	24 c1       	rjmp	.+584    	; 0xad6 <__fp_inf>

0000088e <__addsf3x>:
 88e:	e9 2f       	mov	r30, r25
 890:	4a d1       	rcall	.+660    	; 0xb26 <__fp_split3>
 892:	80 f3       	brcs	.-32     	; 0x874 <__addsf3+0x8>
 894:	ba 17       	cp	r27, r26
 896:	62 07       	cpc	r22, r18
 898:	73 07       	cpc	r23, r19
 89a:	84 07       	cpc	r24, r20
 89c:	95 07       	cpc	r25, r21
 89e:	18 f0       	brcs	.+6      	; 0x8a6 <__addsf3x+0x18>
 8a0:	71 f4       	brne	.+28     	; 0x8be <__addsf3x+0x30>
 8a2:	9e f5       	brtc	.+102    	; 0x90a <__addsf3x+0x7c>
 8a4:	62 c1       	rjmp	.+708    	; 0xb6a <__fp_zero>
 8a6:	0e f4       	brtc	.+2      	; 0x8aa <__addsf3x+0x1c>
 8a8:	e0 95       	com	r30
 8aa:	0b 2e       	mov	r0, r27
 8ac:	ba 2f       	mov	r27, r26
 8ae:	a0 2d       	mov	r26, r0
 8b0:	0b 01       	movw	r0, r22
 8b2:	b9 01       	movw	r22, r18
 8b4:	90 01       	movw	r18, r0
 8b6:	0c 01       	movw	r0, r24
 8b8:	ca 01       	movw	r24, r20
 8ba:	a0 01       	movw	r20, r0
 8bc:	11 24       	eor	r1, r1
 8be:	ff 27       	eor	r31, r31
 8c0:	59 1b       	sub	r21, r25
 8c2:	99 f0       	breq	.+38     	; 0x8ea <__addsf3x+0x5c>
 8c4:	59 3f       	cpi	r21, 0xF9	; 249
 8c6:	50 f4       	brcc	.+20     	; 0x8dc <__addsf3x+0x4e>
 8c8:	50 3e       	cpi	r21, 0xE0	; 224
 8ca:	68 f1       	brcs	.+90     	; 0x926 <__addsf3x+0x98>
 8cc:	1a 16       	cp	r1, r26
 8ce:	f0 40       	sbci	r31, 0x00	; 0
 8d0:	a2 2f       	mov	r26, r18
 8d2:	23 2f       	mov	r18, r19
 8d4:	34 2f       	mov	r19, r20
 8d6:	44 27       	eor	r20, r20
 8d8:	58 5f       	subi	r21, 0xF8	; 248
 8da:	f3 cf       	rjmp	.-26     	; 0x8c2 <__addsf3x+0x34>
 8dc:	46 95       	lsr	r20
 8de:	37 95       	ror	r19
 8e0:	27 95       	ror	r18
 8e2:	a7 95       	ror	r26
 8e4:	f0 40       	sbci	r31, 0x00	; 0
 8e6:	53 95       	inc	r21
 8e8:	c9 f7       	brne	.-14     	; 0x8dc <__addsf3x+0x4e>
 8ea:	7e f4       	brtc	.+30     	; 0x90a <__addsf3x+0x7c>
 8ec:	1f 16       	cp	r1, r31
 8ee:	ba 0b       	sbc	r27, r26
 8f0:	62 0b       	sbc	r22, r18
 8f2:	73 0b       	sbc	r23, r19
 8f4:	84 0b       	sbc	r24, r20
 8f6:	ba f0       	brmi	.+46     	; 0x926 <__addsf3x+0x98>
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	a1 f0       	breq	.+40     	; 0x924 <__addsf3x+0x96>
 8fc:	ff 0f       	add	r31, r31
 8fe:	bb 1f       	adc	r27, r27
 900:	66 1f       	adc	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	c2 f7       	brpl	.-16     	; 0x8f8 <__addsf3x+0x6a>
 908:	0e c0       	rjmp	.+28     	; 0x926 <__addsf3x+0x98>
 90a:	ba 0f       	add	r27, r26
 90c:	62 1f       	adc	r22, r18
 90e:	73 1f       	adc	r23, r19
 910:	84 1f       	adc	r24, r20
 912:	48 f4       	brcc	.+18     	; 0x926 <__addsf3x+0x98>
 914:	87 95       	ror	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b7 95       	ror	r27
 91c:	f7 95       	ror	r31
 91e:	9e 3f       	cpi	r25, 0xFE	; 254
 920:	08 f0       	brcs	.+2      	; 0x924 <__addsf3x+0x96>
 922:	b3 cf       	rjmp	.-154    	; 0x88a <__addsf3+0x1e>
 924:	93 95       	inc	r25
 926:	88 0f       	add	r24, r24
 928:	08 f0       	brcs	.+2      	; 0x92c <__addsf3x+0x9e>
 92a:	99 27       	eor	r25, r25
 92c:	ee 0f       	add	r30, r30
 92e:	97 95       	ror	r25
 930:	87 95       	ror	r24
 932:	08 95       	ret

00000934 <__divsf3>:
 934:	0c d0       	rcall	.+24     	; 0x94e <__divsf3x>
 936:	e6 c0       	rjmp	.+460    	; 0xb04 <__fp_round>
 938:	de d0       	rcall	.+444    	; 0xaf6 <__fp_pscB>
 93a:	40 f0       	brcs	.+16     	; 0x94c <__divsf3+0x18>
 93c:	d5 d0       	rcall	.+426    	; 0xae8 <__fp_pscA>
 93e:	30 f0       	brcs	.+12     	; 0x94c <__divsf3+0x18>
 940:	21 f4       	brne	.+8      	; 0x94a <__divsf3+0x16>
 942:	5f 3f       	cpi	r21, 0xFF	; 255
 944:	19 f0       	breq	.+6      	; 0x94c <__divsf3+0x18>
 946:	c7 c0       	rjmp	.+398    	; 0xad6 <__fp_inf>
 948:	51 11       	cpse	r21, r1
 94a:	10 c1       	rjmp	.+544    	; 0xb6c <__fp_szero>
 94c:	ca c0       	rjmp	.+404    	; 0xae2 <__fp_nan>

0000094e <__divsf3x>:
 94e:	eb d0       	rcall	.+470    	; 0xb26 <__fp_split3>
 950:	98 f3       	brcs	.-26     	; 0x938 <__divsf3+0x4>

00000952 <__divsf3_pse>:
 952:	99 23       	and	r25, r25
 954:	c9 f3       	breq	.-14     	; 0x948 <__divsf3+0x14>
 956:	55 23       	and	r21, r21
 958:	b1 f3       	breq	.-20     	; 0x946 <__divsf3+0x12>
 95a:	95 1b       	sub	r25, r21
 95c:	55 0b       	sbc	r21, r21
 95e:	bb 27       	eor	r27, r27
 960:	aa 27       	eor	r26, r26
 962:	62 17       	cp	r22, r18
 964:	73 07       	cpc	r23, r19
 966:	84 07       	cpc	r24, r20
 968:	38 f0       	brcs	.+14     	; 0x978 <__divsf3_pse+0x26>
 96a:	9f 5f       	subi	r25, 0xFF	; 255
 96c:	5f 4f       	sbci	r21, 0xFF	; 255
 96e:	22 0f       	add	r18, r18
 970:	33 1f       	adc	r19, r19
 972:	44 1f       	adc	r20, r20
 974:	aa 1f       	adc	r26, r26
 976:	a9 f3       	breq	.-22     	; 0x962 <__divsf3_pse+0x10>
 978:	33 d0       	rcall	.+102    	; 0x9e0 <__divsf3_pse+0x8e>
 97a:	0e 2e       	mov	r0, r30
 97c:	3a f0       	brmi	.+14     	; 0x98c <__divsf3_pse+0x3a>
 97e:	e0 e8       	ldi	r30, 0x80	; 128
 980:	30 d0       	rcall	.+96     	; 0x9e2 <__divsf3_pse+0x90>
 982:	91 50       	subi	r25, 0x01	; 1
 984:	50 40       	sbci	r21, 0x00	; 0
 986:	e6 95       	lsr	r30
 988:	00 1c       	adc	r0, r0
 98a:	ca f7       	brpl	.-14     	; 0x97e <__divsf3_pse+0x2c>
 98c:	29 d0       	rcall	.+82     	; 0x9e0 <__divsf3_pse+0x8e>
 98e:	fe 2f       	mov	r31, r30
 990:	27 d0       	rcall	.+78     	; 0x9e0 <__divsf3_pse+0x8e>
 992:	66 0f       	add	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	bb 1f       	adc	r27, r27
 99a:	26 17       	cp	r18, r22
 99c:	37 07       	cpc	r19, r23
 99e:	48 07       	cpc	r20, r24
 9a0:	ab 07       	cpc	r26, r27
 9a2:	b0 e8       	ldi	r27, 0x80	; 128
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <__divsf3_pse+0x56>
 9a6:	bb 0b       	sbc	r27, r27
 9a8:	80 2d       	mov	r24, r0
 9aa:	bf 01       	movw	r22, r30
 9ac:	ff 27       	eor	r31, r31
 9ae:	93 58       	subi	r25, 0x83	; 131
 9b0:	5f 4f       	sbci	r21, 0xFF	; 255
 9b2:	2a f0       	brmi	.+10     	; 0x9be <__divsf3_pse+0x6c>
 9b4:	9e 3f       	cpi	r25, 0xFE	; 254
 9b6:	51 05       	cpc	r21, r1
 9b8:	68 f0       	brcs	.+26     	; 0x9d4 <__divsf3_pse+0x82>
 9ba:	8d c0       	rjmp	.+282    	; 0xad6 <__fp_inf>
 9bc:	d7 c0       	rjmp	.+430    	; 0xb6c <__fp_szero>
 9be:	5f 3f       	cpi	r21, 0xFF	; 255
 9c0:	ec f3       	brlt	.-6      	; 0x9bc <__divsf3_pse+0x6a>
 9c2:	98 3e       	cpi	r25, 0xE8	; 232
 9c4:	dc f3       	brlt	.-10     	; 0x9bc <__divsf3_pse+0x6a>
 9c6:	86 95       	lsr	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	b7 95       	ror	r27
 9ce:	f7 95       	ror	r31
 9d0:	9f 5f       	subi	r25, 0xFF	; 255
 9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__divsf3_pse+0x74>
 9d4:	88 0f       	add	r24, r24
 9d6:	91 1d       	adc	r25, r1
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	97 f9       	bld	r25, 7
 9de:	08 95       	ret
 9e0:	e1 e0       	ldi	r30, 0x01	; 1
 9e2:	66 0f       	add	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	bb 1f       	adc	r27, r27
 9ea:	62 17       	cp	r22, r18
 9ec:	73 07       	cpc	r23, r19
 9ee:	84 07       	cpc	r24, r20
 9f0:	ba 07       	cpc	r27, r26
 9f2:	20 f0       	brcs	.+8      	; 0x9fc <__divsf3_pse+0xaa>
 9f4:	62 1b       	sub	r22, r18
 9f6:	73 0b       	sbc	r23, r19
 9f8:	84 0b       	sbc	r24, r20
 9fa:	ba 0b       	sbc	r27, r26
 9fc:	ee 1f       	adc	r30, r30
 9fe:	88 f7       	brcc	.-30     	; 0x9e2 <__divsf3_pse+0x90>
 a00:	e0 95       	com	r30
 a02:	08 95       	ret

00000a04 <__fixunssfsi>:
 a04:	98 d0       	rcall	.+304    	; 0xb36 <__fp_splitA>
 a06:	88 f0       	brcs	.+34     	; 0xa2a <__fixunssfsi+0x26>
 a08:	9f 57       	subi	r25, 0x7F	; 127
 a0a:	90 f0       	brcs	.+36     	; 0xa30 <__fixunssfsi+0x2c>
 a0c:	b9 2f       	mov	r27, r25
 a0e:	99 27       	eor	r25, r25
 a10:	b7 51       	subi	r27, 0x17	; 23
 a12:	a0 f0       	brcs	.+40     	; 0xa3c <__fixunssfsi+0x38>
 a14:	d1 f0       	breq	.+52     	; 0xa4a <__fixunssfsi+0x46>
 a16:	66 0f       	add	r22, r22
 a18:	77 1f       	adc	r23, r23
 a1a:	88 1f       	adc	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	1a f0       	brmi	.+6      	; 0xa26 <__fixunssfsi+0x22>
 a20:	ba 95       	dec	r27
 a22:	c9 f7       	brne	.-14     	; 0xa16 <__fixunssfsi+0x12>
 a24:	12 c0       	rjmp	.+36     	; 0xa4a <__fixunssfsi+0x46>
 a26:	b1 30       	cpi	r27, 0x01	; 1
 a28:	81 f0       	breq	.+32     	; 0xa4a <__fixunssfsi+0x46>
 a2a:	9f d0       	rcall	.+318    	; 0xb6a <__fp_zero>
 a2c:	b1 e0       	ldi	r27, 0x01	; 1
 a2e:	08 95       	ret
 a30:	9c c0       	rjmp	.+312    	; 0xb6a <__fp_zero>
 a32:	67 2f       	mov	r22, r23
 a34:	78 2f       	mov	r23, r24
 a36:	88 27       	eor	r24, r24
 a38:	b8 5f       	subi	r27, 0xF8	; 248
 a3a:	39 f0       	breq	.+14     	; 0xa4a <__fixunssfsi+0x46>
 a3c:	b9 3f       	cpi	r27, 0xF9	; 249
 a3e:	cc f3       	brlt	.-14     	; 0xa32 <__fixunssfsi+0x2e>
 a40:	86 95       	lsr	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	b3 95       	inc	r27
 a48:	d9 f7       	brne	.-10     	; 0xa40 <__fixunssfsi+0x3c>
 a4a:	3e f4       	brtc	.+14     	; 0xa5a <__fixunssfsi+0x56>
 a4c:	90 95       	com	r25
 a4e:	80 95       	com	r24
 a50:	70 95       	com	r23
 a52:	61 95       	neg	r22
 a54:	7f 4f       	sbci	r23, 0xFF	; 255
 a56:	8f 4f       	sbci	r24, 0xFF	; 255
 a58:	9f 4f       	sbci	r25, 0xFF	; 255
 a5a:	08 95       	ret

00000a5c <__floatunsisf>:
 a5c:	e8 94       	clt
 a5e:	09 c0       	rjmp	.+18     	; 0xa72 <__floatsisf+0x12>

00000a60 <__floatsisf>:
 a60:	97 fb       	bst	r25, 7
 a62:	3e f4       	brtc	.+14     	; 0xa72 <__floatsisf+0x12>
 a64:	90 95       	com	r25
 a66:	80 95       	com	r24
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	99 23       	and	r25, r25
 a74:	a9 f0       	breq	.+42     	; 0xaa0 <__floatsisf+0x40>
 a76:	f9 2f       	mov	r31, r25
 a78:	96 e9       	ldi	r25, 0x96	; 150
 a7a:	bb 27       	eor	r27, r27
 a7c:	93 95       	inc	r25
 a7e:	f6 95       	lsr	r31
 a80:	87 95       	ror	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	b7 95       	ror	r27
 a88:	f1 11       	cpse	r31, r1
 a8a:	f8 cf       	rjmp	.-16     	; 0xa7c <__floatsisf+0x1c>
 a8c:	fa f4       	brpl	.+62     	; 0xacc <__floatsisf+0x6c>
 a8e:	bb 0f       	add	r27, r27
 a90:	11 f4       	brne	.+4      	; 0xa96 <__floatsisf+0x36>
 a92:	60 ff       	sbrs	r22, 0
 a94:	1b c0       	rjmp	.+54     	; 0xacc <__floatsisf+0x6c>
 a96:	6f 5f       	subi	r22, 0xFF	; 255
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	16 c0       	rjmp	.+44     	; 0xacc <__floatsisf+0x6c>
 aa0:	88 23       	and	r24, r24
 aa2:	11 f0       	breq	.+4      	; 0xaa8 <__floatsisf+0x48>
 aa4:	96 e9       	ldi	r25, 0x96	; 150
 aa6:	11 c0       	rjmp	.+34     	; 0xaca <__floatsisf+0x6a>
 aa8:	77 23       	and	r23, r23
 aaa:	21 f0       	breq	.+8      	; 0xab4 <__floatsisf+0x54>
 aac:	9e e8       	ldi	r25, 0x8E	; 142
 aae:	87 2f       	mov	r24, r23
 ab0:	76 2f       	mov	r23, r22
 ab2:	05 c0       	rjmp	.+10     	; 0xabe <__floatsisf+0x5e>
 ab4:	66 23       	and	r22, r22
 ab6:	71 f0       	breq	.+28     	; 0xad4 <__floatsisf+0x74>
 ab8:	96 e8       	ldi	r25, 0x86	; 134
 aba:	86 2f       	mov	r24, r22
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	60 e0       	ldi	r22, 0x00	; 0
 ac0:	2a f0       	brmi	.+10     	; 0xacc <__floatsisf+0x6c>
 ac2:	9a 95       	dec	r25
 ac4:	66 0f       	add	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	da f7       	brpl	.-10     	; 0xac2 <__floatsisf+0x62>
 acc:	88 0f       	add	r24, r24
 ace:	96 95       	lsr	r25
 ad0:	87 95       	ror	r24
 ad2:	97 f9       	bld	r25, 7
 ad4:	08 95       	ret

00000ad6 <__fp_inf>:
 ad6:	97 f9       	bld	r25, 7
 ad8:	9f 67       	ori	r25, 0x7F	; 127
 ada:	80 e8       	ldi	r24, 0x80	; 128
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	08 95       	ret

00000ae2 <__fp_nan>:
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	80 ec       	ldi	r24, 0xC0	; 192
 ae6:	08 95       	ret

00000ae8 <__fp_pscA>:
 ae8:	00 24       	eor	r0, r0
 aea:	0a 94       	dec	r0
 aec:	16 16       	cp	r1, r22
 aee:	17 06       	cpc	r1, r23
 af0:	18 06       	cpc	r1, r24
 af2:	09 06       	cpc	r0, r25
 af4:	08 95       	ret

00000af6 <__fp_pscB>:
 af6:	00 24       	eor	r0, r0
 af8:	0a 94       	dec	r0
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	14 06       	cpc	r1, r20
 b00:	05 06       	cpc	r0, r21
 b02:	08 95       	ret

00000b04 <__fp_round>:
 b04:	09 2e       	mov	r0, r25
 b06:	03 94       	inc	r0
 b08:	00 0c       	add	r0, r0
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__fp_round+0xc>
 b0c:	88 23       	and	r24, r24
 b0e:	52 f0       	brmi	.+20     	; 0xb24 <__fp_round+0x20>
 b10:	bb 0f       	add	r27, r27
 b12:	40 f4       	brcc	.+16     	; 0xb24 <__fp_round+0x20>
 b14:	bf 2b       	or	r27, r31
 b16:	11 f4       	brne	.+4      	; 0xb1c <__fp_round+0x18>
 b18:	60 ff       	sbrs	r22, 0
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <__fp_round+0x20>
 b1c:	6f 5f       	subi	r22, 0xFF	; 255
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	08 95       	ret

00000b26 <__fp_split3>:
 b26:	57 fd       	sbrc	r21, 7
 b28:	90 58       	subi	r25, 0x80	; 128
 b2a:	44 0f       	add	r20, r20
 b2c:	55 1f       	adc	r21, r21
 b2e:	59 f0       	breq	.+22     	; 0xb46 <__fp_splitA+0x10>
 b30:	5f 3f       	cpi	r21, 0xFF	; 255
 b32:	71 f0       	breq	.+28     	; 0xb50 <__fp_splitA+0x1a>
 b34:	47 95       	ror	r20

00000b36 <__fp_splitA>:
 b36:	88 0f       	add	r24, r24
 b38:	97 fb       	bst	r25, 7
 b3a:	99 1f       	adc	r25, r25
 b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_splitA+0x20>
 b3e:	9f 3f       	cpi	r25, 0xFF	; 255
 b40:	79 f0       	breq	.+30     	; 0xb60 <__fp_splitA+0x2a>
 b42:	87 95       	ror	r24
 b44:	08 95       	ret
 b46:	12 16       	cp	r1, r18
 b48:	13 06       	cpc	r1, r19
 b4a:	14 06       	cpc	r1, r20
 b4c:	55 1f       	adc	r21, r21
 b4e:	f2 cf       	rjmp	.-28     	; 0xb34 <__fp_split3+0xe>
 b50:	46 95       	lsr	r20
 b52:	f1 df       	rcall	.-30     	; 0xb36 <__fp_splitA>
 b54:	08 c0       	rjmp	.+16     	; 0xb66 <__fp_splitA+0x30>
 b56:	16 16       	cp	r1, r22
 b58:	17 06       	cpc	r1, r23
 b5a:	18 06       	cpc	r1, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	f1 cf       	rjmp	.-30     	; 0xb42 <__fp_splitA+0xc>
 b60:	86 95       	lsr	r24
 b62:	71 05       	cpc	r23, r1
 b64:	61 05       	cpc	r22, r1
 b66:	08 94       	sec
 b68:	08 95       	ret

00000b6a <__fp_zero>:
 b6a:	e8 94       	clt

00000b6c <__fp_szero>:
 b6c:	bb 27       	eor	r27, r27
 b6e:	66 27       	eor	r22, r22
 b70:	77 27       	eor	r23, r23
 b72:	cb 01       	movw	r24, r22
 b74:	97 f9       	bld	r25, 7
 b76:	08 95       	ret

00000b78 <__mulsf3>:
 b78:	0b d0       	rcall	.+22     	; 0xb90 <__mulsf3x>
 b7a:	c4 cf       	rjmp	.-120    	; 0xb04 <__fp_round>
 b7c:	b5 df       	rcall	.-150    	; 0xae8 <__fp_pscA>
 b7e:	28 f0       	brcs	.+10     	; 0xb8a <__mulsf3+0x12>
 b80:	ba df       	rcall	.-140    	; 0xaf6 <__fp_pscB>
 b82:	18 f0       	brcs	.+6      	; 0xb8a <__mulsf3+0x12>
 b84:	95 23       	and	r25, r21
 b86:	09 f0       	breq	.+2      	; 0xb8a <__mulsf3+0x12>
 b88:	a6 cf       	rjmp	.-180    	; 0xad6 <__fp_inf>
 b8a:	ab cf       	rjmp	.-170    	; 0xae2 <__fp_nan>
 b8c:	11 24       	eor	r1, r1
 b8e:	ee cf       	rjmp	.-36     	; 0xb6c <__fp_szero>

00000b90 <__mulsf3x>:
 b90:	ca df       	rcall	.-108    	; 0xb26 <__fp_split3>
 b92:	a0 f3       	brcs	.-24     	; 0xb7c <__mulsf3+0x4>

00000b94 <__mulsf3_pse>:
 b94:	95 9f       	mul	r25, r21
 b96:	d1 f3       	breq	.-12     	; 0xb8c <__mulsf3+0x14>
 b98:	95 0f       	add	r25, r21
 b9a:	50 e0       	ldi	r21, 0x00	; 0
 b9c:	55 1f       	adc	r21, r21
 b9e:	62 9f       	mul	r22, r18
 ba0:	f0 01       	movw	r30, r0
 ba2:	72 9f       	mul	r23, r18
 ba4:	bb 27       	eor	r27, r27
 ba6:	f0 0d       	add	r31, r0
 ba8:	b1 1d       	adc	r27, r1
 baa:	63 9f       	mul	r22, r19
 bac:	aa 27       	eor	r26, r26
 bae:	f0 0d       	add	r31, r0
 bb0:	b1 1d       	adc	r27, r1
 bb2:	aa 1f       	adc	r26, r26
 bb4:	64 9f       	mul	r22, r20
 bb6:	66 27       	eor	r22, r22
 bb8:	b0 0d       	add	r27, r0
 bba:	a1 1d       	adc	r26, r1
 bbc:	66 1f       	adc	r22, r22
 bbe:	82 9f       	mul	r24, r18
 bc0:	22 27       	eor	r18, r18
 bc2:	b0 0d       	add	r27, r0
 bc4:	a1 1d       	adc	r26, r1
 bc6:	62 1f       	adc	r22, r18
 bc8:	73 9f       	mul	r23, r19
 bca:	b0 0d       	add	r27, r0
 bcc:	a1 1d       	adc	r26, r1
 bce:	62 1f       	adc	r22, r18
 bd0:	83 9f       	mul	r24, r19
 bd2:	a0 0d       	add	r26, r0
 bd4:	61 1d       	adc	r22, r1
 bd6:	22 1f       	adc	r18, r18
 bd8:	74 9f       	mul	r23, r20
 bda:	33 27       	eor	r19, r19
 bdc:	a0 0d       	add	r26, r0
 bde:	61 1d       	adc	r22, r1
 be0:	23 1f       	adc	r18, r19
 be2:	84 9f       	mul	r24, r20
 be4:	60 0d       	add	r22, r0
 be6:	21 1d       	adc	r18, r1
 be8:	82 2f       	mov	r24, r18
 bea:	76 2f       	mov	r23, r22
 bec:	6a 2f       	mov	r22, r26
 bee:	11 24       	eor	r1, r1
 bf0:	9f 57       	subi	r25, 0x7F	; 127
 bf2:	50 40       	sbci	r21, 0x00	; 0
 bf4:	8a f0       	brmi	.+34     	; 0xc18 <__mulsf3_pse+0x84>
 bf6:	e1 f0       	breq	.+56     	; 0xc30 <__mulsf3_pse+0x9c>
 bf8:	88 23       	and	r24, r24
 bfa:	4a f0       	brmi	.+18     	; 0xc0e <__mulsf3_pse+0x7a>
 bfc:	ee 0f       	add	r30, r30
 bfe:	ff 1f       	adc	r31, r31
 c00:	bb 1f       	adc	r27, r27
 c02:	66 1f       	adc	r22, r22
 c04:	77 1f       	adc	r23, r23
 c06:	88 1f       	adc	r24, r24
 c08:	91 50       	subi	r25, 0x01	; 1
 c0a:	50 40       	sbci	r21, 0x00	; 0
 c0c:	a9 f7       	brne	.-22     	; 0xbf8 <__mulsf3_pse+0x64>
 c0e:	9e 3f       	cpi	r25, 0xFE	; 254
 c10:	51 05       	cpc	r21, r1
 c12:	70 f0       	brcs	.+28     	; 0xc30 <__mulsf3_pse+0x9c>
 c14:	60 cf       	rjmp	.-320    	; 0xad6 <__fp_inf>
 c16:	aa cf       	rjmp	.-172    	; 0xb6c <__fp_szero>
 c18:	5f 3f       	cpi	r21, 0xFF	; 255
 c1a:	ec f3       	brlt	.-6      	; 0xc16 <__mulsf3_pse+0x82>
 c1c:	98 3e       	cpi	r25, 0xE8	; 232
 c1e:	dc f3       	brlt	.-10     	; 0xc16 <__mulsf3_pse+0x82>
 c20:	86 95       	lsr	r24
 c22:	77 95       	ror	r23
 c24:	67 95       	ror	r22
 c26:	b7 95       	ror	r27
 c28:	f7 95       	ror	r31
 c2a:	e7 95       	ror	r30
 c2c:	9f 5f       	subi	r25, 0xFF	; 255
 c2e:	c1 f7       	brne	.-16     	; 0xc20 <__mulsf3_pse+0x8c>
 c30:	fe 2b       	or	r31, r30
 c32:	88 0f       	add	r24, r24
 c34:	91 1d       	adc	r25, r1
 c36:	96 95       	lsr	r25
 c38:	87 95       	ror	r24
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <round>:
 c3e:	7b df       	rcall	.-266    	; 0xb36 <__fp_splitA>
 c40:	e0 f0       	brcs	.+56     	; 0xc7a <round+0x3c>
 c42:	9e 37       	cpi	r25, 0x7E	; 126
 c44:	d8 f0       	brcs	.+54     	; 0xc7c <round+0x3e>
 c46:	96 39       	cpi	r25, 0x96	; 150
 c48:	b8 f4       	brcc	.+46     	; 0xc78 <round+0x3a>
 c4a:	9e 38       	cpi	r25, 0x8E	; 142
 c4c:	48 f4       	brcc	.+18     	; 0xc60 <round+0x22>
 c4e:	67 2f       	mov	r22, r23
 c50:	78 2f       	mov	r23, r24
 c52:	88 27       	eor	r24, r24
 c54:	98 5f       	subi	r25, 0xF8	; 248
 c56:	f9 cf       	rjmp	.-14     	; 0xc4a <round+0xc>
 c58:	86 95       	lsr	r24
 c5a:	77 95       	ror	r23
 c5c:	67 95       	ror	r22
 c5e:	93 95       	inc	r25
 c60:	95 39       	cpi	r25, 0x95	; 149
 c62:	d0 f3       	brcs	.-12     	; 0xc58 <round+0x1a>
 c64:	b6 2f       	mov	r27, r22
 c66:	b1 70       	andi	r27, 0x01	; 1
 c68:	6b 0f       	add	r22, r27
 c6a:	71 1d       	adc	r23, r1
 c6c:	81 1d       	adc	r24, r1
 c6e:	20 f4       	brcc	.+8      	; 0xc78 <round+0x3a>
 c70:	87 95       	ror	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	93 95       	inc	r25
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <__fp_mintl>
 c7a:	1c c0       	rjmp	.+56     	; 0xcb4 <__fp_mpack>
 c7c:	77 cf       	rjmp	.-274    	; 0xb6c <__fp_szero>

00000c7e <__fp_mintl>:
 c7e:	88 23       	and	r24, r24
 c80:	71 f4       	brne	.+28     	; 0xc9e <__fp_mintl+0x20>
 c82:	77 23       	and	r23, r23
 c84:	21 f0       	breq	.+8      	; 0xc8e <__fp_mintl+0x10>
 c86:	98 50       	subi	r25, 0x08	; 8
 c88:	87 2b       	or	r24, r23
 c8a:	76 2f       	mov	r23, r22
 c8c:	07 c0       	rjmp	.+14     	; 0xc9c <__fp_mintl+0x1e>
 c8e:	66 23       	and	r22, r22
 c90:	11 f4       	brne	.+4      	; 0xc96 <__fp_mintl+0x18>
 c92:	99 27       	eor	r25, r25
 c94:	0d c0       	rjmp	.+26     	; 0xcb0 <__fp_mintl+0x32>
 c96:	90 51       	subi	r25, 0x10	; 16
 c98:	86 2b       	or	r24, r22
 c9a:	70 e0       	ldi	r23, 0x00	; 0
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	2a f0       	brmi	.+10     	; 0xcaa <__fp_mintl+0x2c>
 ca0:	9a 95       	dec	r25
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	da f7       	brpl	.-10     	; 0xca0 <__fp_mintl+0x22>
 caa:	88 0f       	add	r24, r24
 cac:	96 95       	lsr	r25
 cae:	87 95       	ror	r24
 cb0:	97 f9       	bld	r25, 7
 cb2:	08 95       	ret

00000cb4 <__fp_mpack>:
 cb4:	9f 3f       	cpi	r25, 0xFF	; 255
 cb6:	31 f0       	breq	.+12     	; 0xcc4 <__fp_mpack_finite+0xc>

00000cb8 <__fp_mpack_finite>:
 cb8:	91 50       	subi	r25, 0x01	; 1
 cba:	20 f4       	brcc	.+8      	; 0xcc4 <__fp_mpack_finite+0xc>
 cbc:	87 95       	ror	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b7 95       	ror	r27
 cc4:	88 0f       	add	r24, r24
 cc6:	91 1d       	adc	r25, r1
 cc8:	96 95       	lsr	r25
 cca:	87 95       	ror	r24
 ccc:	97 f9       	bld	r25, 7
 cce:	08 95       	ret

00000cd0 <_exit>:
 cd0:	f8 94       	cli

00000cd2 <__stop_program>:
 cd2:	ff cf       	rjmp	.-2      	; 0xcd2 <__stop_program>
