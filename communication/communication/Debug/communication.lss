
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  000011b0  00001244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000414  00802060  00802060  000012a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002567  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c32  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001114  00000000  00000000  0000461d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005ac  00000000  00000000  00005734  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a54  00000000  00000000  00005ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000192a  00000000  00000000  00006734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  0000805e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <StackPaint>
       2:	00 00       	nop
       4:	29 c1       	rjmp	.+594    	; 0x258 <__bad_interrupt>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c1       	rjmp	.+586    	; 0x258 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c1       	rjmp	.+578    	; 0x258 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c1       	rjmp	.+574    	; 0x258 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1d c1       	rjmp	.+570    	; 0x258 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1b c1       	rjmp	.+566    	; 0x258 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c1       	rjmp	.+562    	; 0x258 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c1       	rjmp	.+558    	; 0x258 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c1       	rjmp	.+554    	; 0x258 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c1       	rjmp	.+550    	; 0x258 <__bad_interrupt>
      32:	00 00       	nop
      34:	11 c1       	rjmp	.+546    	; 0x258 <__bad_interrupt>
      36:	00 00       	nop
      38:	0f c1       	rjmp	.+542    	; 0x258 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0d c1       	rjmp	.+538    	; 0x258 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c1       	rjmp	.+534    	; 0x258 <__bad_interrupt>
      42:	00 00       	nop
      44:	09 c1       	rjmp	.+530    	; 0x258 <__bad_interrupt>
      46:	00 00       	nop
      48:	07 c1       	rjmp	.+526    	; 0x258 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	05 c1       	rjmp	.+522    	; 0x258 <__bad_interrupt>
      4e:	00 00       	nop
      50:	03 c1       	rjmp	.+518    	; 0x258 <__bad_interrupt>
      52:	00 00       	nop
      54:	01 c1       	rjmp	.+514    	; 0x258 <__bad_interrupt>
      56:	00 00       	nop
      58:	ff c0       	rjmp	.+510    	; 0x258 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fd c0       	rjmp	.+506    	; 0x258 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fb c0       	rjmp	.+502    	; 0x258 <__bad_interrupt>
      62:	00 00       	nop
      64:	a9 c1       	rjmp	.+850    	; 0x3b8 <__vector_25>
      66:	00 00       	nop
      68:	db c1       	rjmp	.+950    	; 0x420 <__vector_26>
      6a:	00 00       	nop
      6c:	f5 c0       	rjmp	.+490    	; 0x258 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0b c2       	rjmp	.+1046   	; 0x488 <__vector_28>
      72:	00 00       	nop
      74:	3d c2       	rjmp	.+1146   	; 0x4f0 <__vector_29>
      76:	00 00       	nop
      78:	ef c0       	rjmp	.+478    	; 0x258 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ed c0       	rjmp	.+474    	; 0x258 <__bad_interrupt>
      7e:	00 00       	nop
      80:	eb c0       	rjmp	.+470    	; 0x258 <__bad_interrupt>
      82:	00 00       	nop
      84:	e9 c0       	rjmp	.+466    	; 0x258 <__bad_interrupt>
      86:	00 00       	nop
      88:	e7 c0       	rjmp	.+462    	; 0x258 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e5 c0       	rjmp	.+458    	; 0x258 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e3 c0       	rjmp	.+454    	; 0x258 <__bad_interrupt>
      92:	00 00       	nop
      94:	e1 c0       	rjmp	.+450    	; 0x258 <__bad_interrupt>
      96:	00 00       	nop
      98:	df c0       	rjmp	.+446    	; 0x258 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dd c0       	rjmp	.+442    	; 0x258 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	db c0       	rjmp	.+438    	; 0x258 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d9 c0       	rjmp	.+434    	; 0x258 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d7 c0       	rjmp	.+430    	; 0x258 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d5 c0       	rjmp	.+426    	; 0x258 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d3 c0       	rjmp	.+422    	; 0x258 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d1 c0       	rjmp	.+418    	; 0x258 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cf c0       	rjmp	.+414    	; 0x258 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cd c0       	rjmp	.+410    	; 0x258 <__bad_interrupt>
      be:	00 00       	nop
      c0:	cb c0       	rjmp	.+406    	; 0x258 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c9 c0       	rjmp	.+402    	; 0x258 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c7 c0       	rjmp	.+398    	; 0x258 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c5 c0       	rjmp	.+394    	; 0x258 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c3 c0       	rjmp	.+390    	; 0x258 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c1 c0       	rjmp	.+386    	; 0x258 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bf c0       	rjmp	.+382    	; 0x258 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bd c0       	rjmp	.+378    	; 0x258 <__bad_interrupt>
      de:	00 00       	nop
      e0:	bb c0       	rjmp	.+374    	; 0x258 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b9 c0       	rjmp	.+370    	; 0x258 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b7 c0       	rjmp	.+366    	; 0x258 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b5 c0       	rjmp	.+362    	; 0x258 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b3 c0       	rjmp	.+358    	; 0x258 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b1 c0       	rjmp	.+354    	; 0x258 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	af c0       	rjmp	.+350    	; 0x258 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ad c0       	rjmp	.+346    	; 0x258 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ab c0       	rjmp	.+342    	; 0x258 <__bad_interrupt>
     102:	00 00       	nop
     104:	a9 c0       	rjmp	.+338    	; 0x258 <__bad_interrupt>
     106:	00 00       	nop
     108:	a7 c0       	rjmp	.+334    	; 0x258 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a5 c0       	rjmp	.+330    	; 0x258 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a3 c0       	rjmp	.+326    	; 0x258 <__bad_interrupt>
     112:	00 00       	nop
     114:	a1 c0       	rjmp	.+322    	; 0x258 <__bad_interrupt>
     116:	00 00       	nop
     118:	9f c0       	rjmp	.+318    	; 0x258 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9d c0       	rjmp	.+314    	; 0x258 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9b c0       	rjmp	.+310    	; 0x258 <__bad_interrupt>
     122:	00 00       	nop
     124:	99 c0       	rjmp	.+306    	; 0x258 <__bad_interrupt>
     126:	00 00       	nop
     128:	97 c0       	rjmp	.+302    	; 0x258 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	95 c0       	rjmp	.+298    	; 0x258 <__bad_interrupt>
     12e:	00 00       	nop
     130:	93 c0       	rjmp	.+294    	; 0x258 <__bad_interrupt>
     132:	00 00       	nop
     134:	91 c0       	rjmp	.+290    	; 0x258 <__bad_interrupt>
     136:	00 00       	nop
     138:	8f c0       	rjmp	.+286    	; 0x258 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8d c0       	rjmp	.+282    	; 0x258 <__bad_interrupt>
     13e:	00 00       	nop
     140:	8b c0       	rjmp	.+278    	; 0x258 <__bad_interrupt>
     142:	00 00       	nop
     144:	89 c0       	rjmp	.+274    	; 0x258 <__bad_interrupt>
     146:	00 00       	nop
     148:	87 c0       	rjmp	.+270    	; 0x258 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	85 c0       	rjmp	.+266    	; 0x258 <__bad_interrupt>
     14e:	00 00       	nop
     150:	83 c0       	rjmp	.+262    	; 0x258 <__bad_interrupt>
     152:	00 00       	nop
     154:	81 c0       	rjmp	.+258    	; 0x258 <__bad_interrupt>
     156:	00 00       	nop
     158:	7f c0       	rjmp	.+254    	; 0x258 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7d c0       	rjmp	.+250    	; 0x258 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7b c0       	rjmp	.+246    	; 0x258 <__bad_interrupt>
     162:	00 00       	nop
     164:	79 c0       	rjmp	.+242    	; 0x258 <__bad_interrupt>
     166:	00 00       	nop
     168:	77 c0       	rjmp	.+238    	; 0x258 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	75 c0       	rjmp	.+234    	; 0x258 <__bad_interrupt>
     16e:	00 00       	nop
     170:	73 c0       	rjmp	.+230    	; 0x258 <__bad_interrupt>
     172:	00 00       	nop
     174:	71 c0       	rjmp	.+226    	; 0x258 <__bad_interrupt>
     176:	00 00       	nop
     178:	6f c0       	rjmp	.+222    	; 0x258 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6d c0       	rjmp	.+218    	; 0x258 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6b c0       	rjmp	.+214    	; 0x258 <__bad_interrupt>
     182:	00 00       	nop
     184:	69 c0       	rjmp	.+210    	; 0x258 <__bad_interrupt>
     186:	00 00       	nop
     188:	67 c0       	rjmp	.+206    	; 0x258 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	65 c0       	rjmp	.+202    	; 0x258 <__bad_interrupt>
     18e:	00 00       	nop
     190:	63 c0       	rjmp	.+198    	; 0x258 <__bad_interrupt>
     192:	00 00       	nop
     194:	61 c0       	rjmp	.+194    	; 0x258 <__bad_interrupt>
     196:	00 00       	nop
     198:	5f c0       	rjmp	.+190    	; 0x258 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5d c0       	rjmp	.+186    	; 0x258 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5b c0       	rjmp	.+182    	; 0x258 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	59 c0       	rjmp	.+178    	; 0x258 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	57 c0       	rjmp	.+174    	; 0x258 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	55 c0       	rjmp	.+170    	; 0x258 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	53 c0       	rjmp	.+166    	; 0x258 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	51 c0       	rjmp	.+162    	; 0x258 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4f c0       	rjmp	.+158    	; 0x258 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4d c0       	rjmp	.+154    	; 0x258 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4b c0       	rjmp	.+150    	; 0x258 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	49 c0       	rjmp	.+146    	; 0x258 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	47 c0       	rjmp	.+142    	; 0x258 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	45 c0       	rjmp	.+138    	; 0x258 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	43 c0       	rjmp	.+134    	; 0x258 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	41 c0       	rjmp	.+130    	; 0x258 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3f c0       	rjmp	.+126    	; 0x258 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3d c0       	rjmp	.+122    	; 0x258 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3b c0       	rjmp	.+118    	; 0x258 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	39 c0       	rjmp	.+114    	; 0x258 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	37 c0       	rjmp	.+110    	; 0x258 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	35 c0       	rjmp	.+106    	; 0x258 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	33 c0       	rjmp	.+102    	; 0x258 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	31 c0       	rjmp	.+98     	; 0x258 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	2f c0       	rjmp	.+94     	; 0x258 <__bad_interrupt>
	...

000001fc <StackPaint>:
    {
        *p = STACK_CANARY;
        p++;
    }
#else
    __asm volatile ("    ldi r30,lo8(_end)\n"
     1fc:	e4 e7       	ldi	r30, 0x74	; 116
     1fe:	f4 e2       	ldi	r31, 0x24	; 36
     200:	85 ec       	ldi	r24, 0xC5	; 197
     202:	9f e3       	ldi	r25, 0x3F	; 63
     204:	01 c0       	rjmp	.+2      	; 0x208 <.cmp>

00000206 <.loop>:
     206:	81 93       	st	Z+, r24

00000208 <.cmp>:
     208:	ef 3f       	cpi	r30, 0xFF	; 255
     20a:	f9 07       	cpc	r31, r25
     20c:	e0 f3       	brcs	.-8      	; 0x206 <.loop>
     20e:	d9 f3       	breq	.-10     	; 0x206 <.loop>
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	cd bf       	out	0x3d, r28	; 61
     218:	df e3       	ldi	r29, 0x3F	; 63
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0c bf       	out	0x3c, r16	; 60
     220:	18 be       	out	0x38, r1	; 56
     222:	19 be       	out	0x39, r1	; 57
     224:	1a be       	out	0x3a, r1	; 58
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_copy_data>:
     228:	10 e2       	ldi	r17, 0x20	; 32
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e0 eb       	ldi	r30, 0xB0	; 176
     230:	f1 e1       	ldi	r31, 0x11	; 17
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a0 36       	cpi	r26, 0x60	; 96
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>
     242:	1b be       	out	0x3b, r1	; 59

00000244 <__do_clear_bss>:
     244:	24 e2       	ldi	r18, 0x24	; 36
     246:	a0 e6       	ldi	r26, 0x60	; 96
     248:	b0 e2       	ldi	r27, 0x20	; 32
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	a4 37       	cpi	r26, 0x74	; 116
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	81 d1       	rcall	.+770    	; 0x558 <main>
     256:	aa c7       	rjmp	.+3924   	; 0x11ac <_exit>

00000258 <__bad_interrupt>:
     258:	d3 ce       	rjmp	.-602    	; 0x0 <__vectors>

0000025a <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
     25a:	88 ed       	ldi	r24, 0xD8	; 216
     25c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
     25e:	e0 e5       	ldi	r30, 0x50	; 80
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	82 60       	ori	r24, 0x02	; 2
     266:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     268:	81 81       	ldd	r24, Z+1	; 0x01
     26a:	81 ff       	sbrs	r24, 1
     26c:	fd cf       	rjmp	.-6      	; 0x268 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
     26e:	88 ed       	ldi	r24, 0xD8	; 216
     270:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	80 93 40 00 	sts	0x0040, r24
     278:	08 95       	ret

0000027a <printHeaderList>:
	current -> next = (struct node *) malloc(sizeof(node_t));
	for (int item = 0; item < DATASIZE; ++item){
		current -> next -> data[item] = data[item];
	}
	current -> next -> next = NULL;
}
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	82 e1       	ldi	r24, 0x12	; 18
     280:	90 e2       	ldi	r25, 0x20	; 32
     282:	7a d3       	rcall	.+1780   	; 0x978 <DebugPrint>
     284:	85 e2       	ldi	r24, 0x25	; 37
     286:	90 e2       	ldi	r25, 0x20	; 32
     288:	77 d3       	rcall	.+1774   	; 0x978 <DebugPrint>
     28a:	c0 e0       	ldi	r28, 0x00	; 0
     28c:	d0 e0       	ldi	r29, 0x00	; 0
     28e:	8a e2       	ldi	r24, 0x2A	; 42
     290:	90 e2       	ldi	r25, 0x20	; 32
     292:	72 d3       	rcall	.+1764   	; 0x978 <DebugPrint>
     294:	4a e0       	ldi	r20, 0x0A	; 10
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	ce 01       	movw	r24, r28
     29c:	54 d7       	rcall	.+3752   	; 0x1146 <__itoa_ncheck>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	6a d3       	rcall	.+1748   	; 0x978 <DebugPrint>
     2a4:	80 e3       	ldi	r24, 0x30	; 48
     2a6:	90 e2       	ldi	r25, 0x20	; 32
     2a8:	67 d3       	rcall	.+1742   	; 0x978 <DebugPrint>
     2aa:	21 96       	adiw	r28, 0x01	; 1
     2ac:	c5 30       	cpi	r28, 0x05	; 5
     2ae:	d1 05       	cpc	r29, r1
     2b0:	71 f7       	brne	.-36     	; 0x28e <printHeaderList+0x14>
     2b2:	81 e5       	ldi	r24, 0x51	; 81
     2b4:	90 e2       	ldi	r25, 0x20	; 32
     2b6:	60 d3       	rcall	.+1728   	; 0x978 <DebugPrint>
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	08 95       	ret

000002be <print_list>:
     2be:	cf 92       	push	r12
     2c0:	df 92       	push	r13
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	7c 01       	movw	r14, r24
     2d0:	d4 df       	rcall	.-88     	; 0x27a <printHeaderList>
     2d2:	e1 14       	cp	r14, r1
     2d4:	f1 04       	cpc	r15, r1
     2d6:	71 f1       	breq	.+92     	; 0x334 <print_list+0x76>
     2d8:	c1 2c       	mov	r12, r1
     2da:	d1 2c       	mov	r13, r1
     2dc:	4a e0       	ldi	r20, 0x0A	; 10
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	c6 01       	movw	r24, r12
     2e4:	30 d7       	rcall	.+3680   	; 0x1146 <__itoa_ncheck>
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	46 d3       	rcall	.+1676   	; 0x978 <DebugPrint>
     2ec:	88 e2       	ldi	r24, 0x28	; 40
     2ee:	90 e2       	ldi	r25, 0x20	; 32
     2f0:	43 d3       	rcall	.+1670   	; 0x978 <DebugPrint>
     2f2:	87 01       	movw	r16, r14
     2f4:	c0 e0       	ldi	r28, 0x00	; 0
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	87 ea       	ldi	r24, 0xA7	; 167
     2fa:	91 e6       	ldi	r25, 0x61	; 97
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <print_list+0x3e>
     300:	00 c0       	rjmp	.+0      	; 0x302 <print_list+0x44>
     302:	00 00       	nop
     304:	f8 01       	movw	r30, r16
     306:	81 91       	ld	r24, Z+
     308:	91 91       	ld	r25, Z+
     30a:	8f 01       	movw	r16, r30
     30c:	35 d3       	rcall	.+1642   	; 0x978 <DebugPrint>
     30e:	88 e2       	ldi	r24, 0x28	; 40
     310:	90 e2       	ldi	r25, 0x20	; 32
     312:	32 d3       	rcall	.+1636   	; 0x978 <DebugPrint>
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	c5 30       	cpi	r28, 0x05	; 5
     318:	d1 05       	cpc	r29, r1
     31a:	71 f7       	brne	.-36     	; 0x2f8 <print_list+0x3a>
     31c:	81 e5       	ldi	r24, 0x51	; 81
     31e:	90 e2       	ldi	r25, 0x20	; 32
     320:	2b d3       	rcall	.+1622   	; 0x978 <DebugPrint>
     322:	f7 01       	movw	r30, r14
     324:	e2 84       	ldd	r14, Z+10	; 0x0a
     326:	f3 84       	ldd	r15, Z+11	; 0x0b
     328:	ff ef       	ldi	r31, 0xFF	; 255
     32a:	cf 1a       	sub	r12, r31
     32c:	df 0a       	sbc	r13, r31
     32e:	e1 14       	cp	r14, r1
     330:	f1 04       	cpc	r15, r1
     332:	a1 f6       	brne	.-88     	; 0x2dc <print_list+0x1e>
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	08 95       	ret

00000346 <insert>:
 * @param  data     Data to write to memory
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 * @param  item 	Used for iteration
 */
void insert (node_t ** listHead, char* dataInternal [DATASIZE]){
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	8c 01       	movw	r16, r24
     354:	e6 2e       	mov	r14, r22
     356:	f7 2e       	mov	r15, r23
	
/*	if (malloc(sizeof(node_t) == NULL)){
		DebugPrint("No memory");
	}*/
	
	new_node = (struct node *) malloc(sizeof(node_t));
     358:	8c e0       	ldi	r24, 0x0C	; 12
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	cd d5       	rcall	.+2970   	; 0xef8 <malloc>
     35e:	ec 01       	movw	r28, r24
	if (new_node == NULL){
     360:	00 97       	sbiw	r24, 0x00	; 0
     362:	19 f4       	brne	.+6      	; 0x36a <insert+0x24>
		DebugPrint("No memory");
     364:	83 e3       	ldi	r24, 0x33	; 51
     366:	90 e2       	ldi	r25, 0x20	; 32
     368:	07 d3       	rcall	.+1550   	; 0x978 <DebugPrint>
	adress = new_node;
	itoa(adress,print,10);
	DebugPrint(print);
	DebugPrint("\r\n");
*/	
	memset(new_node, 0, sizeof(node_t));
     36a:	8c e0       	ldi	r24, 0x0C	; 12
     36c:	fe 01       	movw	r30, r28
     36e:	11 92       	st	Z+, r1
     370:	8a 95       	dec	r24
     372:	e9 f7       	brne	.-6      	; 0x36e <insert+0x28>
     374:	ee 2d       	mov	r30, r14
     376:	ff 2d       	mov	r31, r15
     378:	de 01       	movw	r26, r28
	
	for (int item = 0; item < DATASIZE; ++item){
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
		new_node -> data[item] = dataInternal[item];
     37e:	41 91       	ld	r20, Z+
     380:	51 91       	ld	r21, Z+
     382:	4d 93       	st	X+, r20
     384:	5d 93       	st	X+, r21
	DebugPrint(print);
	DebugPrint("\r\n");
*/	
	memset(new_node, 0, sizeof(node_t));
	
	for (int item = 0; item < DATASIZE; ++item){
     386:	2f 5f       	subi	r18, 0xFF	; 255
     388:	3f 4f       	sbci	r19, 0xFF	; 255
     38a:	25 30       	cpi	r18, 0x05	; 5
     38c:	31 05       	cpc	r19, r1
     38e:	b9 f7       	brne	.-18     	; 0x37e <insert+0x38>
		//DebugPrint("\r\nnew_node\r\n");
		//DebugPrint("test");
		//DebugPrint(new_node ->data[item]);
	}
	
	new_node -> next = *listHead;
     390:	f8 01       	movw	r30, r16
     392:	80 81       	ld	r24, Z
     394:	91 81       	ldd	r25, Z+1	; 0x01
     396:	8a 87       	std	Y+10, r24	; 0x0a
     398:	9b 87       	std	Y+11, r25	; 0x0b
	*listHead = new_node;
     39a:	c0 83       	st	Z, r28
     39c:	d1 83       	std	Z+1, r29	; 0x01
	DebugPrint(new_node -> data[DATASIZE-1]);
     39e:	88 85       	ldd	r24, Y+8	; 0x08
     3a0:	99 85       	ldd	r25, Y+9	; 0x09
     3a2:	ea d2       	rcall	.+1492   	; 0x978 <DebugPrint>
	
	DebugPrint("\n\r");
     3a4:	8d e3       	ldi	r24, 0x3D	; 61
     3a6:	90 e2       	ldi	r25, 0x20	; 32
     3a8:	e7 d2       	rcall	.+1486   	; 0x978 <DebugPrint>
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	08 95       	ret

000003b8 <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	08 b6       	in	r0, 0x38	; 56
     3c4:	0f 92       	push	r0
     3c6:	18 be       	out	0x38, r1	; 56
     3c8:	09 b6       	in	r0, 0x39	; 57
     3ca:	0f 92       	push	r0
     3cc:	19 be       	out	0x39, r1	; 57
     3ce:	0b b6       	in	r0, 0x3b	; 59
     3d0:	0f 92       	push	r0
     3d2:	1b be       	out	0x3b, r1	; 59
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
     3ec:	82 e6       	ldi	r24, 0x62	; 98
     3ee:	90 e2       	ldi	r25, 0x20	; 32
     3f0:	10 d3       	rcall	.+1568   	; 0xa12 <USART_RXComplete>
}
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	7f 91       	pop	r23
     400:	6f 91       	pop	r22
     402:	5f 91       	pop	r21
     404:	4f 91       	pop	r20
     406:	3f 91       	pop	r19
     408:	2f 91       	pop	r18
     40a:	0f 90       	pop	r0
     40c:	0b be       	out	0x3b, r0	; 59
     40e:	0f 90       	pop	r0
     410:	09 be       	out	0x39, r0	; 57
     412:	0f 90       	pop	r0
     414:	08 be       	out	0x38, r0	; 56
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	08 b6       	in	r0, 0x38	; 56
     42c:	0f 92       	push	r0
     42e:	18 be       	out	0x38, r1	; 56
     430:	09 b6       	in	r0, 0x39	; 57
     432:	0f 92       	push	r0
     434:	19 be       	out	0x39, r1	; 57
     436:	0b b6       	in	r0, 0x3b	; 59
     438:	0f 92       	push	r0
     43a:	1b be       	out	0x3b, r1	; 59
     43c:	2f 93       	push	r18
     43e:	3f 93       	push	r19
     440:	4f 93       	push	r20
     442:	5f 93       	push	r21
     444:	6f 93       	push	r22
     446:	7f 93       	push	r23
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
     454:	82 e6       	ldi	r24, 0x62	; 98
     456:	90 e2       	ldi	r25, 0x20	; 32
     458:	f7 d2       	rcall	.+1518   	; 0xa48 <USART_DataRegEmpty>
}
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	09 be       	out	0x39, r0	; 57
     47a:	0f 90       	pop	r0
     47c:	08 be       	out	0x38, r0	; 56
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	08 b6       	in	r0, 0x38	; 56
     494:	0f 92       	push	r0
     496:	18 be       	out	0x38, r1	; 56
     498:	09 b6       	in	r0, 0x39	; 57
     49a:	0f 92       	push	r0
     49c:	19 be       	out	0x39, r1	; 57
     49e:	0b b6       	in	r0, 0x3b	; 59
     4a0:	0f 92       	push	r0
     4a2:	1b be       	out	0x3b, r1	; 59
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     4bc:	89 e6       	ldi	r24, 0x69	; 105
     4be:	92 e2       	ldi	r25, 0x22	; 34
     4c0:	a8 d2       	rcall	.+1360   	; 0xa12 <USART_RXComplete>
}
     4c2:	ff 91       	pop	r31
     4c4:	ef 91       	pop	r30
     4c6:	bf 91       	pop	r27
     4c8:	af 91       	pop	r26
     4ca:	9f 91       	pop	r25
     4cc:	8f 91       	pop	r24
     4ce:	7f 91       	pop	r23
     4d0:	6f 91       	pop	r22
     4d2:	5f 91       	pop	r21
     4d4:	4f 91       	pop	r20
     4d6:	3f 91       	pop	r19
     4d8:	2f 91       	pop	r18
     4da:	0f 90       	pop	r0
     4dc:	0b be       	out	0x3b, r0	; 59
     4de:	0f 90       	pop	r0
     4e0:	09 be       	out	0x39, r0	; 57
     4e2:	0f 90       	pop	r0
     4e4:	08 be       	out	0x38, r0	; 56
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	08 b6       	in	r0, 0x38	; 56
     4fc:	0f 92       	push	r0
     4fe:	18 be       	out	0x38, r1	; 56
     500:	09 b6       	in	r0, 0x39	; 57
     502:	0f 92       	push	r0
     504:	19 be       	out	0x39, r1	; 57
     506:	0b b6       	in	r0, 0x3b	; 59
     508:	0f 92       	push	r0
     50a:	1b be       	out	0x3b, r1	; 59
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	4f 93       	push	r20
     512:	5f 93       	push	r21
     514:	6f 93       	push	r22
     516:	7f 93       	push	r23
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     524:	89 e6       	ldi	r24, 0x69	; 105
     526:	92 e2       	ldi	r25, 0x22	; 34
     528:	8f d2       	rcall	.+1310   	; 0xa48 <USART_DataRegEmpty>
}
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	7f 91       	pop	r23
     538:	6f 91       	pop	r22
     53a:	5f 91       	pop	r21
     53c:	4f 91       	pop	r20
     53e:	3f 91       	pop	r19
     540:	2f 91       	pop	r18
     542:	0f 90       	pop	r0
     544:	0b be       	out	0x3b, r0	; 59
     546:	0f 90       	pop	r0
     548:	09 be       	out	0x39, r0	; 57
     54a:	0f 90       	pop	r0
     54c:	08 be       	out	0x38, r0	; 56
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <main>:
extern node_t *listHead; // head


#define UPDATEINTERVAL 100			// in ms

int main(void){
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	66 97       	sbiw	r28, 0x16	; 22
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
     566:	79 de       	rcall	.-782    	; 0x25a <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
     568:	c1 2c       	mov	r12, r1
     56a:	e1 2c       	mov	r14, r1
     56c:	12 ec       	ldi	r17, 0xC2	; 194
     56e:	f1 2e       	mov	r15, r17
     570:	01 e0       	ldi	r16, 0x01	; 1
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	38 e4       	ldi	r19, 0x48	; 72
     578:	48 ee       	ldi	r20, 0xE8	; 232
     57a:	51 e0       	ldi	r21, 0x01	; 1
     57c:	60 ea       	ldi	r22, 0xA0	; 160
     57e:	78 e0       	ldi	r23, 0x08	; 8
     580:	82 e6       	ldi	r24, 0x62	; 98
     582:	90 e2       	ldi	r25, 0x20	; 32
     584:	9c d1       	rcall	.+824    	; 0x8be <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	38 e4       	ldi	r19, 0x48	; 72
     58a:	48 ee       	ldi	r20, 0xE8	; 232
     58c:	51 e0       	ldi	r21, 0x01	; 1
     58e:	60 eb       	ldi	r22, 0xB0	; 176
     590:	78 e0       	ldi	r23, 0x08	; 8
     592:	89 e6       	ldi	r24, 0x69	; 105
     594:	92 e2       	ldi	r25, 0x22	; 34
     596:	93 d1       	rcall	.+806    	; 0x8be <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	e0 ea       	ldi	r30, 0xA0	; 160
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	82 83       	std	Z+2, r24	; 0x02
	sei();
     5a0:	78 94       	sei
	
	DebugPrint(CLEARTERM);
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	90 e2       	ldi	r25, 0x20	; 32
     5a6:	e8 d1       	rcall	.+976    	; 0x978 <DebugPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a8:	2f ef       	ldi	r18, 0xFF	; 255
     5aa:	83 ec       	ldi	r24, 0xC3	; 195
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	21 50       	subi	r18, 0x01	; 1
     5b0:	80 40       	sbci	r24, 0x00	; 0
     5b2:	90 40       	sbci	r25, 0x00	; 0
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x56>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x60>
     5b8:	00 00       	nop
	DebugPrint("No memory");
	
*/	
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
     5ba:	8b e4       	ldi	r24, 0x4B	; 75
     5bc:	90 e2       	ldi	r25, 0x20	; 32
     5be:	e1 d1       	rcall	.+962    	; 0x982 <Command>
	Command(SBIV500);
     5c0:	84 e5       	ldi	r24, 0x54	; 84
     5c2:	90 e2       	ldi	r25, 0x20	; 32
     5c4:	de d1       	rcall	.+956    	; 0x982 <Command>
	
	char* database [DATASIZE];
	char buffer [12] = "abcdefg";
     5c6:	88 e0       	ldi	r24, 0x08	; 8
     5c8:	e6 e0       	ldi	r30, 0x06	; 6
     5ca:	f0 e2       	ldi	r31, 0x20	; 32
     5cc:	de 01       	movw	r26, r28
     5ce:	1b 96       	adiw	r26, 0x0b	; 11
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	8a 95       	dec	r24
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x78>
     5d8:	1b 8a       	std	Y+19, r1	; 0x13
     5da:	1c 8a       	std	Y+20, r1	; 0x14
     5dc:	1d 8a       	std	Y+21, r1	; 0x15
     5de:	1e 8a       	std	Y+22, r1	; 0x16
	
	uint16_t adress;
	char* print;
	
	database[0]= buffer;
     5e0:	ce 01       	movw	r24, r28
     5e2:	0b 96       	adiw	r24, 0x0b	; 11
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	9a 83       	std	Y+2, r25	; 0x02
     5e8:	8e 01       	movw	r16, r28
     5ea:	0d 5f       	subi	r16, 0xFD	; 253
     5ec:	1f 4f       	sbci	r17, 0xFF	; 255
     5ee:	5c 01       	movw	r10, r24
	for (int i = 1; i < DATASIZE; ++i){
		database[i]= buffer;
     5f0:	6c 01       	movw	r12, r24
     5f2:	f8 01       	movw	r30, r16
     5f4:	c0 82       	st	Z, r12
     5f6:	d1 82       	std	Z+1, r13	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	e1 2c       	mov	r14, r1
     5fc:	f1 2c       	mov	r15, r1
     5fe:	b7 01       	movw	r22, r14
     600:	c8 01       	movw	r24, r16
     602:	a1 d5       	rcall	.+2882   	; 0x1146 <__itoa_ncheck>
		
		adress = &database[i];
		itoa(adress,print,10);
		DebugPrint(print);
     604:	c7 01       	movw	r24, r14
     606:	b8 d1       	rcall	.+880    	; 0x978 <DebugPrint>
		DebugPrint("\r\n");
     608:	81 e5       	ldi	r24, 0x51	; 81
     60a:	90 e2       	ldi	r25, 0x20	; 32
     60c:	b5 d1       	rcall	.+874    	; 0x978 <DebugPrint>
     60e:	0e 5f       	subi	r16, 0xFE	; 254
     610:	1f 4f       	sbci	r17, 0xFF	; 255
	
	uint16_t adress;
	char* print;
	
	database[0]= buffer;
	for (int i = 1; i < DATASIZE; ++i){
     612:	0a 15       	cp	r16, r10
     614:	1b 05       	cpc	r17, r11
     616:	69 f7       	brne	.-38     	; 0x5f2 <main+0x9a>
		itoa(adress,print,10);
		DebugPrint(print);
		DebugPrint("\r\n");
	}
	
	DebugPrint("\r\n");
     618:	81 e5       	ldi	r24, 0x51	; 81
     61a:	90 e2       	ldi	r25, 0x20	; 32
     61c:	ad d1       	rcall	.+858    	; 0x978 <DebugPrint>
	char* val;
	const char* databaseSize;
	databaseSize = *database;
	size_t len = strlen(databaseSize);
     61e:	a9 81       	ldd	r26, Y+1	; 0x01
     620:	ba 81       	ldd	r27, Y+2	; 0x02
     622:	fd 01       	movw	r30, r26
     624:	01 90       	ld	r0, Z+
     626:	00 20       	and	r0, r0
     628:	e9 f7       	brne	.-6      	; 0x624 <main+0xcc>
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	4a e0       	ldi	r20, 0x0A	; 10
     62e:	00 e0       	ldi	r16, 0x00	; 0
     630:	10 e0       	ldi	r17, 0x00	; 0
     632:	b8 01       	movw	r22, r16
     634:	cf 01       	movw	r24, r30
     636:	8a 1b       	sub	r24, r26
     638:	9b 0b       	sbc	r25, r27
     63a:	85 d5       	rcall	.+2826   	; 0x1146 <__itoa_ncheck>
	itoa(len,val,10);
	DebugPrint(val);
     63c:	c8 01       	movw	r24, r16
     63e:	9c d1       	rcall	.+824    	; 0x978 <DebugPrint>
	DebugPrint("\r\n");
     640:	81 e5       	ldi	r24, 0x51	; 81
     642:	90 e2       	ldi	r25, 0x20	; 32
     644:	99 d1       	rcall	.+818    	; 0x978 <DebugPrint>
     646:	03 e1       	ldi	r16, 0x13	; 19
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	ff ef       	ldi	r31, 0xFF	; 255
     64c:	23 ec       	ldi	r18, 0xC3	; 195
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	f1 50       	subi	r31, 0x01	; 1
     652:	20 40       	sbci	r18, 0x00	; 0
     654:	80 40       	sbci	r24, 0x00	; 0
     656:	e1 f7       	brne	.-8      	; 0x650 <main+0xf8>
     658:	00 c0       	rjmp	.+0      	; 0x65a <main+0x102>
     65a:	00 00       	nop

	for (int i = 1; i < 20; ++i){
	  _delay_ms(UPDATEINTERVAL);	
	  insert(&listHead,database);
     65c:	be 01       	movw	r22, r28
     65e:	6f 5f       	subi	r22, 0xFF	; 255
     660:	7f 4f       	sbci	r23, 0xFF	; 255
     662:	80 e6       	ldi	r24, 0x60	; 96
     664:	90 e2       	ldi	r25, 0x20	; 32
     666:	6f de       	rcall	.-802    	; 0x346 <insert>
     668:	01 50       	subi	r16, 0x01	; 1
     66a:	11 09       	sbc	r17, r1
	size_t len = strlen(databaseSize);
	itoa(len,val,10);
	DebugPrint(val);
	DebugPrint("\r\n");

	for (int i = 1; i < 20; ++i){
     66c:	01 15       	cp	r16, r1
     66e:	11 05       	cpc	r17, r1
     670:	61 f7       	brne	.-40     	; 0x64a <main+0xf2>
	  _delay_ms(UPDATEINTERVAL);	
	  insert(&listHead,database);
	}
	print_list(listHead);
     672:	80 91 60 20 	lds	r24, 0x2060
     676:	90 91 61 20 	lds	r25, 0x2061
     67a:	21 de       	rcall	.-958    	; 0x2be <print_list>
     67c:	ff cf       	rjmp	.-2      	; 0x67c <main+0x124>

0000067e <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     688:	8f d1       	rcall	.+798    	; 0x9a8 <USART_TXBuffer_FreeSpace>
     68a:	88 23       	and	r24, r24
     68c:	19 f0       	breq	.+6      	; 0x694 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     68e:	61 2f       	mov	r22, r17
     690:	ce 01       	movw	r24, r28
     692:	96 d1       	rcall	.+812    	; 0x9c0 <USART_TXBuffer_PutByte>
  }
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	08 95       	ret

0000069c <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     6a6:	eb 01       	movw	r28, r22
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	fb 01       	movw	r30, r22
     6ac:	60 81       	ld	r22, Z
     6ae:	66 23       	and	r22, r22
     6b0:	29 f0       	breq	.+10     	; 0x6bc <uart_puts+0x20>
    uart_putc(uart, c);
     6b2:	c8 01       	movw	r24, r16
     6b4:	e4 df       	rcall	.-56     	; 0x67e <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     6b6:	69 91       	ld	r22, Y+
     6b8:	61 11       	cpse	r22, r1
     6ba:	fb cf       	rjmp	.-10     	; 0x6b2 <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	08 95       	ret

000006c6 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     6c6:	80 3a       	cpi	r24, 0xA0	; 160
     6c8:	28 e0       	ldi	r18, 0x08	; 8
     6ca:	92 07       	cpc	r25, r18
     6cc:	39 f4       	brne	.+14     	; 0x6dc <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     6ce:	e0 e4       	ldi	r30, 0x40	; 64
     6d0:	f6 e0       	ldi	r31, 0x06	; 6
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	82 83       	std	Z+2, r24	; 0x02
     return;
     6da:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     6dc:	80 3b       	cpi	r24, 0xB0	; 176
     6de:	28 e0       	ldi	r18, 0x08	; 8
     6e0:	92 07       	cpc	r25, r18
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     6e4:	e0 e4       	ldi	r30, 0x40	; 64
     6e6:	f6 e0       	ldi	r31, 0x06	; 6
     6e8:	80 e8       	ldi	r24, 0x80	; 128
     6ea:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
     6ee:	82 83       	std	Z+2, r24	; 0x02
     return;
     6f0:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     6f2:	80 3a       	cpi	r24, 0xA0	; 160
     6f4:	29 e0       	ldi	r18, 0x09	; 9
     6f6:	92 07       	cpc	r25, r18
     6f8:	39 f4       	brne	.+14     	; 0x708 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     6fa:	e0 e6       	ldi	r30, 0x60	; 96
     6fc:	f6 e0       	ldi	r31, 0x06	; 6
     6fe:	88 e0       	ldi	r24, 0x08	; 8
     700:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     702:	84 e0       	ldi	r24, 0x04	; 4
     704:	82 83       	std	Z+2, r24	; 0x02
     return;
     706:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     708:	80 3b       	cpi	r24, 0xB0	; 176
     70a:	29 e0       	ldi	r18, 0x09	; 9
     70c:	92 07       	cpc	r25, r18
     70e:	39 f4       	brne	.+14     	; 0x71e <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     710:	e0 e6       	ldi	r30, 0x60	; 96
     712:	f6 e0       	ldi	r31, 0x06	; 6
     714:	80 e8       	ldi	r24, 0x80	; 128
     716:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	82 83       	std	Z+2, r24	; 0x02
     return;
     71c:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     71e:	80 3a       	cpi	r24, 0xA0	; 160
     720:	9a 40       	sbci	r25, 0x0A	; 10
     722:	31 f4       	brne	.+12     	; 0x730 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     724:	e0 e8       	ldi	r30, 0x80	; 128
     726:	f6 e0       	ldi	r31, 0x06	; 6
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	82 83       	std	Z+2, r24	; 0x02
     730:	08 95       	ret

00000732 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	49 01       	movw	r8, r18
     750:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     752:	4e 2d       	mov	r20, r14
     754:	41 70       	andi	r20, 0x01	; 1
     756:	20 e1       	ldi	r18, 0x10	; 16
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	79 01       	movw	r14, r18
     75c:	02 c0       	rjmp	.+4      	; 0x762 <calc_bsel+0x30>
     75e:	f5 94       	asr	r15
     760:	e7 94       	ror	r14
     762:	4a 95       	dec	r20
     764:	e2 f7       	brpl	.-8      	; 0x75e <calc_bsel+0x2c>
  if ( scale < 0 ) {
     766:	00 23       	and	r16, r16
     768:	0c f0       	brlt	.+2      	; 0x76c <calc_bsel+0x3a>
     76a:	39 c0       	rjmp	.+114    	; 0x7de <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     76c:	8b d2       	rcall	.+1302   	; 0xc84 <__floatunsisf>
     76e:	2b 01       	movw	r4, r22
     770:	3c 01       	movw	r6, r24
     772:	b7 01       	movw	r22, r14
     774:	77 27       	eor	r23, r23
     776:	88 27       	eor	r24, r24
     778:	77 fd       	sbrc	r23, 7
     77a:	80 95       	com	r24
     77c:	98 2f       	mov	r25, r24
     77e:	84 d2       	rcall	.+1288   	; 0xc88 <__floatsisf>
     780:	6b 01       	movw	r12, r22
     782:	7c 01       	movw	r14, r24
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	7d d2       	rcall	.+1274   	; 0xc84 <__floatunsisf>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	06 d3       	rcall	.+1548   	; 0xda0 <__mulsf3>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	c3 01       	movw	r24, r6
     79a:	b2 01       	movw	r22, r4
     79c:	df d1       	rcall	.+958    	; 0xb5c <__divsf3>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	75 d1       	rcall	.+746    	; 0xa92 <__subsf3>
     7a8:	6b 01       	movw	r12, r22
     7aa:	7c 01       	movw	r14, r24
     7ac:	11 27       	eor	r17, r17
     7ae:	01 95       	neg	r16
     7b0:	0c f4       	brge	.+2      	; 0x7b4 <calc_bsel+0x82>
     7b2:	10 95       	com	r17
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <calc_bsel+0x8c>
     7ba:	66 0f       	add	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	0a 95       	dec	r16
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <calc_bsel+0x88>
     7c2:	88 27       	eor	r24, r24
     7c4:	77 fd       	sbrc	r23, 7
     7c6:	80 95       	com	r24
     7c8:	98 2f       	mov	r25, r24
     7ca:	5e d2       	rcall	.+1212   	; 0xc88 <__floatsisf>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	e5 d2       	rcall	.+1482   	; 0xda0 <__mulsf3>
     7d6:	47 d3       	rcall	.+1678   	; 0xe66 <round>
     7d8:	29 d2       	rcall	.+1106   	; 0xc2c <__fixunssfsi>
     7da:	cb 01       	movw	r24, r22
     7dc:	34 c0       	rjmp	.+104    	; 0x846 <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     7de:	52 d2       	rcall	.+1188   	; 0xc84 <__floatunsisf>
     7e0:	2b 01       	movw	r4, r22
     7e2:	3c 01       	movw	r6, r24
     7e4:	b7 01       	movw	r22, r14
     7e6:	77 27       	eor	r23, r23
     7e8:	88 27       	eor	r24, r24
     7ea:	77 fd       	sbrc	r23, 7
     7ec:	80 95       	com	r24
     7ee:	98 2f       	mov	r25, r24
     7f0:	4b d2       	rcall	.+1174   	; 0xc88 <__floatsisf>
     7f2:	6b 01       	movw	r12, r22
     7f4:	7c 01       	movw	r14, r24
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	44 d2       	rcall	.+1160   	; 0xc84 <__floatunsisf>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	cd d2       	rcall	.+1434   	; 0xda0 <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c3 01       	movw	r24, r6
     80c:	b2 01       	movw	r22, r4
     80e:	a6 d1       	rcall	.+844    	; 0xb5c <__divsf3>
     810:	4b 01       	movw	r8, r22
     812:	5c 01       	movw	r10, r24
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	02 c0       	rjmp	.+4      	; 0x81e <calc_bsel+0xec>
     81a:	66 0f       	add	r22, r22
     81c:	77 1f       	adc	r23, r23
     81e:	0a 95       	dec	r16
     820:	e2 f7       	brpl	.-8      	; 0x81a <calc_bsel+0xe8>
     822:	88 27       	eor	r24, r24
     824:	77 fd       	sbrc	r23, 7
     826:	80 95       	com	r24
     828:	98 2f       	mov	r25, r24
     82a:	2e d2       	rcall	.+1116   	; 0xc88 <__floatsisf>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	93 d1       	rcall	.+806    	; 0xb5c <__divsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	5f e3       	ldi	r21, 0x3F	; 63
     83e:	29 d1       	rcall	.+594    	; 0xa92 <__subsf3>
     840:	12 d3       	rcall	.+1572   	; 0xe66 <round>
     842:	f4 d1       	rcall	.+1000   	; 0xc2c <__fixunssfsi>
     844:	cb 01       	movw	r24, r22
  }
}
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	08 95       	ret

00000864 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     864:	4f 92       	push	r4
     866:	5f 92       	push	r5
     868:	6f 92       	push	r6
     86a:	7f 92       	push	r7
     86c:	8f 92       	push	r8
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	ef 92       	push	r14
     876:	0f 93       	push	r16
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	2b 01       	movw	r4, r22
     87e:	3c 01       	movw	r6, r24
     880:	49 01       	movw	r8, r18
     882:	5a 01       	movw	r10, r20
     884:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     886:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     888:	ed 2e       	mov	r14, r29
     88a:	0c 2f       	mov	r16, r28
     88c:	a5 01       	movw	r20, r10
     88e:	94 01       	movw	r18, r8
     890:	c3 01       	movw	r24, r6
     892:	b2 01       	movw	r22, r4
     894:	4e df       	rcall	.-356    	; 0x732 <calc_bsel>
     896:	81 15       	cp	r24, r1
     898:	90 41       	sbci	r25, 0x10	; 16
     89a:	18 f0       	brcs	.+6      	; 0x8a2 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     89c:	cf 5f       	subi	r28, 0xFF	; 255
     89e:	c8 30       	cpi	r28, 0x08	; 8
     8a0:	99 f7       	brne	.-26     	; 0x888 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     8a2:	8c 2f       	mov	r24, r28
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	0f 91       	pop	r16
     8aa:	ef 90       	pop	r14
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	08 95       	ret

000008be <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     8be:	2f 92       	push	r2
     8c0:	3f 92       	push	r3
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	8f 92       	push	r8
     8cc:	9f 92       	push	r9
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
     8e2:	3b 01       	movw	r6, r22
     8e4:	49 01       	movw	r8, r18
     8e6:	5a 01       	movw	r10, r20
     8e8:	17 01       	movw	r2, r14
     8ea:	28 01       	movw	r4, r16
     8ec:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     8ee:	0c 2d       	mov	r16, r12
     8f0:	a2 01       	movw	r20, r4
     8f2:	91 01       	movw	r18, r2
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	b5 df       	rcall	.-150    	; 0x864 <calc_bscale>
     8fa:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     8fc:	08 2f       	mov	r16, r24
     8fe:	a2 01       	movw	r20, r4
     900:	91 01       	movw	r18, r2
     902:	c5 01       	movw	r24, r10
     904:	b4 01       	movw	r22, r8
     906:	15 df       	rcall	.-470    	; 0x732 <calc_bsel>
     908:	b8 2e       	mov	r11, r24
     90a:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	b3 01       	movw	r22, r6
     910:	ce 01       	movw	r24, r28
     912:	3c d0       	rcall	.+120    	; 0x98c <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     914:	e8 81       	ld	r30, Y
     916:	f9 81       	ldd	r31, Y+1	; 0x01
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     91c:	e8 81       	ld	r30, Y
     91e:	f9 81       	ldd	r31, Y+1	; 0x01
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	80 61       	ori	r24, 0x10	; 16
     924:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     926:	e8 81       	ld	r30, Y
     928:	f9 81       	ldd	r31, Y+1	; 0x01
     92a:	84 81       	ldd	r24, Z+4	; 0x04
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     930:	e8 81       	ld	r30, Y
     932:	f9 81       	ldd	r31, Y+1	; 0x01
     934:	83 81       	ldd	r24, Z+3	; 0x03
     936:	8f 7c       	andi	r24, 0xCF	; 207
     938:	80 61       	ori	r24, 0x10	; 16
     93a:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     93c:	e8 81       	ld	r30, Y
     93e:	f9 81       	ldd	r31, Y+1	; 0x01
     940:	b6 82       	std	Z+6, r11	; 0x06
     942:	e8 81       	ld	r30, Y
     944:	f9 81       	ldd	r31, Y+1	; 0x01
     946:	12 95       	swap	r17
     948:	10 7f       	andi	r17, 0xF0	; 240
     94a:	e1 2a       	or	r14, r17
     94c:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     94e:	88 81       	ld	r24, Y
     950:	99 81       	ldd	r25, Y+1	; 0x01
     952:	b9 de       	rcall	.-654    	; 0x6c6 <set_usart_txrx_direction>
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	6f 90       	pop	r6
     96e:	5f 90       	pop	r5
     970:	4f 90       	pop	r4
     972:	3f 90       	pop	r3
     974:	2f 90       	pop	r2
     976:	08 95       	ret

00000978 <DebugPrint>:
 * Print a string of information on the UART C1 (DEBUG) interface.
 * @param   *debugData	String of information
 * @param   value		Temporarily string value to add a cariage return and new line feed
 */
void DebugPrint (char *debugData){
	uart_puts(&uartC1, debugData);
     978:	bc 01       	movw	r22, r24
     97a:	89 e6       	ldi	r24, 0x69	; 105
     97c:	92 e2       	ldi	r25, 0x22	; 34
     97e:	8e ce       	rjmp	.-740    	; 0x69c <uart_puts>
     980:	08 95       	ret

00000982 <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
     982:	bc 01       	movw	r22, r24
     984:	82 e6       	ldi	r24, 0x62	; 98
     986:	90 e2       	ldi	r25, 0x20	; 32
     988:	89 ce       	rjmp	.-750    	; 0x69c <uart_puts>
     98a:	08 95       	ret

0000098c <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
     98c:	fc 01       	movw	r30, r24
     98e:	60 83       	st	Z, r22
     990:	71 83       	std	Z+1, r23	; 0x01
     992:	42 83       	std	Z+2, r20	; 0x02
     994:	ec 5f       	subi	r30, 0xFC	; 252
     996:	fd 4f       	sbci	r31, 0xFD	; 253
     998:	10 82       	st	Z, r1
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	10 82       	st	Z, r1
     99e:	33 96       	adiw	r30, 0x03	; 3
     9a0:	10 82       	st	Z, r1
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	10 82       	st	Z, r1
     9a6:	08 95       	ret

000009a8 <USART_TXBuffer_FreeSpace>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	eb 5f       	subi	r30, 0xFB	; 251
     9ac:	fd 4f       	sbci	r31, 0xFD	; 253
     9ae:	20 81       	ld	r18, Z
     9b0:	31 96       	adiw	r30, 0x01	; 1
     9b2:	90 81       	ld	r25, Z
     9b4:	2f 5f       	subi	r18, 0xFF	; 255
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	29 13       	cpse	r18, r25
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <USART_TXBuffer_FreeSpace+0x16>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret

000009c0 <USART_TXBuffer_PutByte>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	fc 01       	movw	r30, r24
     9c6:	dc 01       	movw	r26, r24
     9c8:	ab 5f       	subi	r26, 0xFB	; 251
     9ca:	bd 4f       	sbci	r27, 0xFD	; 253
     9cc:	2c 91       	ld	r18, X
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	9c 91       	ld	r25, X
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	29 13       	cpse	r18, r25
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <USART_TXBuffer_PutByte+0x1c>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	88 23       	and	r24, r24
     9de:	b1 f0       	breq	.+44     	; 0xa0c <USART_TXBuffer_PutByte+0x4c>
     9e0:	df 01       	movw	r26, r30
     9e2:	ab 5f       	subi	r26, 0xFB	; 251
     9e4:	bd 4f       	sbci	r27, 0xFD	; 253
     9e6:	9c 91       	ld	r25, X
     9e8:	ef 01       	movw	r28, r30
     9ea:	c9 0f       	add	r28, r25
     9ec:	d1 1d       	adc	r29, r1
     9ee:	cd 5f       	subi	r28, 0xFD	; 253
     9f0:	de 4f       	sbci	r29, 0xFE	; 254
     9f2:	68 83       	st	Y, r22
     9f4:	9f 5f       	subi	r25, 0xFF	; 255
     9f6:	9c 93       	st	X, r25
     9f8:	a0 81       	ld	r26, Z
     9fa:	b1 81       	ldd	r27, Z+1	; 0x01
     9fc:	13 96       	adiw	r26, 0x03	; 3
     9fe:	9c 91       	ld	r25, X
     a00:	13 97       	sbiw	r26, 0x03	; 3
     a02:	9c 7f       	andi	r25, 0xFC	; 252
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	92 2b       	or	r25, r18
     a08:	13 96       	adiw	r26, 0x03	; 3
     a0a:	9c 93       	st	X, r25
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     a12:	fc 01       	movw	r30, r24
     a14:	ed 5f       	subi	r30, 0xFD	; 253
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
     a18:	20 81       	ld	r18, Z
     a1a:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     a1c:	31 96       	adiw	r30, 0x01	; 1
     a1e:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     a20:	dc 01       	movw	r26, r24
     a22:	ed 91       	ld	r30, X+
     a24:	fc 91       	ld	r31, X
     a26:	11 97       	sbiw	r26, 0x01	; 1
     a28:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     a2a:	23 17       	cp	r18, r19
     a2c:	59 f0       	breq	.+22     	; 0xa44 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     a2e:	fc 01       	movw	r30, r24
     a30:	ed 5f       	subi	r30, 0xFD	; 253
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	30 81       	ld	r19, Z
     a36:	a3 0f       	add	r26, r19
     a38:	b1 1d       	adc	r27, r1
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     a3e:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     a44:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     a46:	08 95       	ret

00000a48 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     a4c:	fc 01       	movw	r30, r24
     a4e:	ea 5f       	subi	r30, 0xFA	; 250
     a50:	fd 4f       	sbci	r31, 0xFD	; 253
     a52:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	30 81       	ld	r19, Z
     a58:	32 13       	cpse	r19, r18
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     a5c:	dc 01       	movw	r26, r24
     a5e:	ed 91       	ld	r30, X+
     a60:	fc 91       	ld	r31, X
     a62:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     a64:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     a66:	83 83       	std	Z+3, r24	; 0x03
     a68:	11 c0       	rjmp	.+34     	; 0xa8c <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     a6a:	fc 01       	movw	r30, r24
     a6c:	ea 5f       	subi	r30, 0xFA	; 250
     a6e:	fd 4f       	sbci	r31, 0xFD	; 253
     a70:	20 81       	ld	r18, Z
     a72:	dc 01       	movw	r26, r24
     a74:	a2 0f       	add	r26, r18
     a76:	b1 1d       	adc	r27, r1
     a78:	ad 5f       	subi	r26, 0xFD	; 253
     a7a:	be 4f       	sbci	r27, 0xFE	; 254
     a7c:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     a7e:	ec 01       	movw	r28, r24
     a80:	a8 81       	ld	r26, Y
     a82:	b9 81       	ldd	r27, Y+1	; 0x01
     a84:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     a86:	80 81       	ld	r24, Z
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	80 83       	st	Z, r24
	}
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <__subsf3>:
     a92:	50 58       	subi	r21, 0x80	; 128

00000a94 <__addsf3>:
     a94:	bb 27       	eor	r27, r27
     a96:	aa 27       	eor	r26, r26
     a98:	0e d0       	rcall	.+28     	; 0xab6 <__addsf3x>
     a9a:	48 c1       	rjmp	.+656    	; 0xd2c <__fp_round>
     a9c:	39 d1       	rcall	.+626    	; 0xd10 <__fp_pscA>
     a9e:	30 f0       	brcs	.+12     	; 0xaac <__addsf3+0x18>
     aa0:	3e d1       	rcall	.+636    	; 0xd1e <__fp_pscB>
     aa2:	20 f0       	brcs	.+8      	; 0xaac <__addsf3+0x18>
     aa4:	31 f4       	brne	.+12     	; 0xab2 <__addsf3+0x1e>
     aa6:	9f 3f       	cpi	r25, 0xFF	; 255
     aa8:	11 f4       	brne	.+4      	; 0xaae <__addsf3+0x1a>
     aaa:	1e f4       	brtc	.+6      	; 0xab2 <__addsf3+0x1e>
     aac:	2e c1       	rjmp	.+604    	; 0xd0a <__fp_nan>
     aae:	0e f4       	brtc	.+2      	; 0xab2 <__addsf3+0x1e>
     ab0:	e0 95       	com	r30
     ab2:	e7 fb       	bst	r30, 7
     ab4:	24 c1       	rjmp	.+584    	; 0xcfe <__fp_inf>

00000ab6 <__addsf3x>:
     ab6:	e9 2f       	mov	r30, r25
     ab8:	4a d1       	rcall	.+660    	; 0xd4e <__fp_split3>
     aba:	80 f3       	brcs	.-32     	; 0xa9c <__addsf3+0x8>
     abc:	ba 17       	cp	r27, r26
     abe:	62 07       	cpc	r22, r18
     ac0:	73 07       	cpc	r23, r19
     ac2:	84 07       	cpc	r24, r20
     ac4:	95 07       	cpc	r25, r21
     ac6:	18 f0       	brcs	.+6      	; 0xace <__addsf3x+0x18>
     ac8:	71 f4       	brne	.+28     	; 0xae6 <__addsf3x+0x30>
     aca:	9e f5       	brtc	.+102    	; 0xb32 <__addsf3x+0x7c>
     acc:	62 c1       	rjmp	.+708    	; 0xd92 <__fp_zero>
     ace:	0e f4       	brtc	.+2      	; 0xad2 <__addsf3x+0x1c>
     ad0:	e0 95       	com	r30
     ad2:	0b 2e       	mov	r0, r27
     ad4:	ba 2f       	mov	r27, r26
     ad6:	a0 2d       	mov	r26, r0
     ad8:	0b 01       	movw	r0, r22
     ada:	b9 01       	movw	r22, r18
     adc:	90 01       	movw	r18, r0
     ade:	0c 01       	movw	r0, r24
     ae0:	ca 01       	movw	r24, r20
     ae2:	a0 01       	movw	r20, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	ff 27       	eor	r31, r31
     ae8:	59 1b       	sub	r21, r25
     aea:	99 f0       	breq	.+38     	; 0xb12 <__addsf3x+0x5c>
     aec:	59 3f       	cpi	r21, 0xF9	; 249
     aee:	50 f4       	brcc	.+20     	; 0xb04 <__addsf3x+0x4e>
     af0:	50 3e       	cpi	r21, 0xE0	; 224
     af2:	68 f1       	brcs	.+90     	; 0xb4e <__addsf3x+0x98>
     af4:	1a 16       	cp	r1, r26
     af6:	f0 40       	sbci	r31, 0x00	; 0
     af8:	a2 2f       	mov	r26, r18
     afa:	23 2f       	mov	r18, r19
     afc:	34 2f       	mov	r19, r20
     afe:	44 27       	eor	r20, r20
     b00:	58 5f       	subi	r21, 0xF8	; 248
     b02:	f3 cf       	rjmp	.-26     	; 0xaea <__addsf3x+0x34>
     b04:	46 95       	lsr	r20
     b06:	37 95       	ror	r19
     b08:	27 95       	ror	r18
     b0a:	a7 95       	ror	r26
     b0c:	f0 40       	sbci	r31, 0x00	; 0
     b0e:	53 95       	inc	r21
     b10:	c9 f7       	brne	.-14     	; 0xb04 <__addsf3x+0x4e>
     b12:	7e f4       	brtc	.+30     	; 0xb32 <__addsf3x+0x7c>
     b14:	1f 16       	cp	r1, r31
     b16:	ba 0b       	sbc	r27, r26
     b18:	62 0b       	sbc	r22, r18
     b1a:	73 0b       	sbc	r23, r19
     b1c:	84 0b       	sbc	r24, r20
     b1e:	ba f0       	brmi	.+46     	; 0xb4e <__addsf3x+0x98>
     b20:	91 50       	subi	r25, 0x01	; 1
     b22:	a1 f0       	breq	.+40     	; 0xb4c <__addsf3x+0x96>
     b24:	ff 0f       	add	r31, r31
     b26:	bb 1f       	adc	r27, r27
     b28:	66 1f       	adc	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	c2 f7       	brpl	.-16     	; 0xb20 <__addsf3x+0x6a>
     b30:	0e c0       	rjmp	.+28     	; 0xb4e <__addsf3x+0x98>
     b32:	ba 0f       	add	r27, r26
     b34:	62 1f       	adc	r22, r18
     b36:	73 1f       	adc	r23, r19
     b38:	84 1f       	adc	r24, r20
     b3a:	48 f4       	brcc	.+18     	; 0xb4e <__addsf3x+0x98>
     b3c:	87 95       	ror	r24
     b3e:	77 95       	ror	r23
     b40:	67 95       	ror	r22
     b42:	b7 95       	ror	r27
     b44:	f7 95       	ror	r31
     b46:	9e 3f       	cpi	r25, 0xFE	; 254
     b48:	08 f0       	brcs	.+2      	; 0xb4c <__addsf3x+0x96>
     b4a:	b3 cf       	rjmp	.-154    	; 0xab2 <__addsf3+0x1e>
     b4c:	93 95       	inc	r25
     b4e:	88 0f       	add	r24, r24
     b50:	08 f0       	brcs	.+2      	; 0xb54 <__addsf3x+0x9e>
     b52:	99 27       	eor	r25, r25
     b54:	ee 0f       	add	r30, r30
     b56:	97 95       	ror	r25
     b58:	87 95       	ror	r24
     b5a:	08 95       	ret

00000b5c <__divsf3>:
     b5c:	0c d0       	rcall	.+24     	; 0xb76 <__divsf3x>
     b5e:	e6 c0       	rjmp	.+460    	; 0xd2c <__fp_round>
     b60:	de d0       	rcall	.+444    	; 0xd1e <__fp_pscB>
     b62:	40 f0       	brcs	.+16     	; 0xb74 <__divsf3+0x18>
     b64:	d5 d0       	rcall	.+426    	; 0xd10 <__fp_pscA>
     b66:	30 f0       	brcs	.+12     	; 0xb74 <__divsf3+0x18>
     b68:	21 f4       	brne	.+8      	; 0xb72 <__divsf3+0x16>
     b6a:	5f 3f       	cpi	r21, 0xFF	; 255
     b6c:	19 f0       	breq	.+6      	; 0xb74 <__divsf3+0x18>
     b6e:	c7 c0       	rjmp	.+398    	; 0xcfe <__fp_inf>
     b70:	51 11       	cpse	r21, r1
     b72:	10 c1       	rjmp	.+544    	; 0xd94 <__fp_szero>
     b74:	ca c0       	rjmp	.+404    	; 0xd0a <__fp_nan>

00000b76 <__divsf3x>:
     b76:	eb d0       	rcall	.+470    	; 0xd4e <__fp_split3>
     b78:	98 f3       	brcs	.-26     	; 0xb60 <__divsf3+0x4>

00000b7a <__divsf3_pse>:
     b7a:	99 23       	and	r25, r25
     b7c:	c9 f3       	breq	.-14     	; 0xb70 <__divsf3+0x14>
     b7e:	55 23       	and	r21, r21
     b80:	b1 f3       	breq	.-20     	; 0xb6e <__divsf3+0x12>
     b82:	95 1b       	sub	r25, r21
     b84:	55 0b       	sbc	r21, r21
     b86:	bb 27       	eor	r27, r27
     b88:	aa 27       	eor	r26, r26
     b8a:	62 17       	cp	r22, r18
     b8c:	73 07       	cpc	r23, r19
     b8e:	84 07       	cpc	r24, r20
     b90:	38 f0       	brcs	.+14     	; 0xba0 <__divsf3_pse+0x26>
     b92:	9f 5f       	subi	r25, 0xFF	; 255
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	44 1f       	adc	r20, r20
     b9c:	aa 1f       	adc	r26, r26
     b9e:	a9 f3       	breq	.-22     	; 0xb8a <__divsf3_pse+0x10>
     ba0:	33 d0       	rcall	.+102    	; 0xc08 <__divsf3_pse+0x8e>
     ba2:	0e 2e       	mov	r0, r30
     ba4:	3a f0       	brmi	.+14     	; 0xbb4 <__divsf3_pse+0x3a>
     ba6:	e0 e8       	ldi	r30, 0x80	; 128
     ba8:	30 d0       	rcall	.+96     	; 0xc0a <__divsf3_pse+0x90>
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	50 40       	sbci	r21, 0x00	; 0
     bae:	e6 95       	lsr	r30
     bb0:	00 1c       	adc	r0, r0
     bb2:	ca f7       	brpl	.-14     	; 0xba6 <__divsf3_pse+0x2c>
     bb4:	29 d0       	rcall	.+82     	; 0xc08 <__divsf3_pse+0x8e>
     bb6:	fe 2f       	mov	r31, r30
     bb8:	27 d0       	rcall	.+78     	; 0xc08 <__divsf3_pse+0x8e>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	bb 1f       	adc	r27, r27
     bc2:	26 17       	cp	r18, r22
     bc4:	37 07       	cpc	r19, r23
     bc6:	48 07       	cpc	r20, r24
     bc8:	ab 07       	cpc	r26, r27
     bca:	b0 e8       	ldi	r27, 0x80	; 128
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__divsf3_pse+0x56>
     bce:	bb 0b       	sbc	r27, r27
     bd0:	80 2d       	mov	r24, r0
     bd2:	bf 01       	movw	r22, r30
     bd4:	ff 27       	eor	r31, r31
     bd6:	93 58       	subi	r25, 0x83	; 131
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	2a f0       	brmi	.+10     	; 0xbe6 <__divsf3_pse+0x6c>
     bdc:	9e 3f       	cpi	r25, 0xFE	; 254
     bde:	51 05       	cpc	r21, r1
     be0:	68 f0       	brcs	.+26     	; 0xbfc <__divsf3_pse+0x82>
     be2:	8d c0       	rjmp	.+282    	; 0xcfe <__fp_inf>
     be4:	d7 c0       	rjmp	.+430    	; 0xd94 <__fp_szero>
     be6:	5f 3f       	cpi	r21, 0xFF	; 255
     be8:	ec f3       	brlt	.-6      	; 0xbe4 <__divsf3_pse+0x6a>
     bea:	98 3e       	cpi	r25, 0xE8	; 232
     bec:	dc f3       	brlt	.-10     	; 0xbe4 <__divsf3_pse+0x6a>
     bee:	86 95       	lsr	r24
     bf0:	77 95       	ror	r23
     bf2:	67 95       	ror	r22
     bf4:	b7 95       	ror	r27
     bf6:	f7 95       	ror	r31
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	c9 f7       	brne	.-14     	; 0xbee <__divsf3_pse+0x74>
     bfc:	88 0f       	add	r24, r24
     bfe:	91 1d       	adc	r25, r1
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	97 f9       	bld	r25, 7
     c06:	08 95       	ret
     c08:	e1 e0       	ldi	r30, 0x01	; 1
     c0a:	66 0f       	add	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	88 1f       	adc	r24, r24
     c10:	bb 1f       	adc	r27, r27
     c12:	62 17       	cp	r22, r18
     c14:	73 07       	cpc	r23, r19
     c16:	84 07       	cpc	r24, r20
     c18:	ba 07       	cpc	r27, r26
     c1a:	20 f0       	brcs	.+8      	; 0xc24 <__divsf3_pse+0xaa>
     c1c:	62 1b       	sub	r22, r18
     c1e:	73 0b       	sbc	r23, r19
     c20:	84 0b       	sbc	r24, r20
     c22:	ba 0b       	sbc	r27, r26
     c24:	ee 1f       	adc	r30, r30
     c26:	88 f7       	brcc	.-30     	; 0xc0a <__divsf3_pse+0x90>
     c28:	e0 95       	com	r30
     c2a:	08 95       	ret

00000c2c <__fixunssfsi>:
     c2c:	98 d0       	rcall	.+304    	; 0xd5e <__fp_splitA>
     c2e:	88 f0       	brcs	.+34     	; 0xc52 <__fixunssfsi+0x26>
     c30:	9f 57       	subi	r25, 0x7F	; 127
     c32:	90 f0       	brcs	.+36     	; 0xc58 <__fixunssfsi+0x2c>
     c34:	b9 2f       	mov	r27, r25
     c36:	99 27       	eor	r25, r25
     c38:	b7 51       	subi	r27, 0x17	; 23
     c3a:	a0 f0       	brcs	.+40     	; 0xc64 <__fixunssfsi+0x38>
     c3c:	d1 f0       	breq	.+52     	; 0xc72 <__fixunssfsi+0x46>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	1a f0       	brmi	.+6      	; 0xc4e <__fixunssfsi+0x22>
     c48:	ba 95       	dec	r27
     c4a:	c9 f7       	brne	.-14     	; 0xc3e <__fixunssfsi+0x12>
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <__fixunssfsi+0x46>
     c4e:	b1 30       	cpi	r27, 0x01	; 1
     c50:	81 f0       	breq	.+32     	; 0xc72 <__fixunssfsi+0x46>
     c52:	9f d0       	rcall	.+318    	; 0xd92 <__fp_zero>
     c54:	b1 e0       	ldi	r27, 0x01	; 1
     c56:	08 95       	ret
     c58:	9c c0       	rjmp	.+312    	; 0xd92 <__fp_zero>
     c5a:	67 2f       	mov	r22, r23
     c5c:	78 2f       	mov	r23, r24
     c5e:	88 27       	eor	r24, r24
     c60:	b8 5f       	subi	r27, 0xF8	; 248
     c62:	39 f0       	breq	.+14     	; 0xc72 <__fixunssfsi+0x46>
     c64:	b9 3f       	cpi	r27, 0xF9	; 249
     c66:	cc f3       	brlt	.-14     	; 0xc5a <__fixunssfsi+0x2e>
     c68:	86 95       	lsr	r24
     c6a:	77 95       	ror	r23
     c6c:	67 95       	ror	r22
     c6e:	b3 95       	inc	r27
     c70:	d9 f7       	brne	.-10     	; 0xc68 <__fixunssfsi+0x3c>
     c72:	3e f4       	brtc	.+14     	; 0xc82 <__fixunssfsi+0x56>
     c74:	90 95       	com	r25
     c76:	80 95       	com	r24
     c78:	70 95       	com	r23
     c7a:	61 95       	neg	r22
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	8f 4f       	sbci	r24, 0xFF	; 255
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	08 95       	ret

00000c84 <__floatunsisf>:
     c84:	e8 94       	clt
     c86:	09 c0       	rjmp	.+18     	; 0xc9a <__floatsisf+0x12>

00000c88 <__floatsisf>:
     c88:	97 fb       	bst	r25, 7
     c8a:	3e f4       	brtc	.+14     	; 0xc9a <__floatsisf+0x12>
     c8c:	90 95       	com	r25
     c8e:	80 95       	com	r24
     c90:	70 95       	com	r23
     c92:	61 95       	neg	r22
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	8f 4f       	sbci	r24, 0xFF	; 255
     c98:	9f 4f       	sbci	r25, 0xFF	; 255
     c9a:	99 23       	and	r25, r25
     c9c:	a9 f0       	breq	.+42     	; 0xcc8 <__floatsisf+0x40>
     c9e:	f9 2f       	mov	r31, r25
     ca0:	96 e9       	ldi	r25, 0x96	; 150
     ca2:	bb 27       	eor	r27, r27
     ca4:	93 95       	inc	r25
     ca6:	f6 95       	lsr	r31
     ca8:	87 95       	ror	r24
     caa:	77 95       	ror	r23
     cac:	67 95       	ror	r22
     cae:	b7 95       	ror	r27
     cb0:	f1 11       	cpse	r31, r1
     cb2:	f8 cf       	rjmp	.-16     	; 0xca4 <__floatsisf+0x1c>
     cb4:	fa f4       	brpl	.+62     	; 0xcf4 <__floatsisf+0x6c>
     cb6:	bb 0f       	add	r27, r27
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__floatsisf+0x36>
     cba:	60 ff       	sbrs	r22, 0
     cbc:	1b c0       	rjmp	.+54     	; 0xcf4 <__floatsisf+0x6c>
     cbe:	6f 5f       	subi	r22, 0xFF	; 255
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	8f 4f       	sbci	r24, 0xFF	; 255
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	16 c0       	rjmp	.+44     	; 0xcf4 <__floatsisf+0x6c>
     cc8:	88 23       	and	r24, r24
     cca:	11 f0       	breq	.+4      	; 0xcd0 <__floatsisf+0x48>
     ccc:	96 e9       	ldi	r25, 0x96	; 150
     cce:	11 c0       	rjmp	.+34     	; 0xcf2 <__floatsisf+0x6a>
     cd0:	77 23       	and	r23, r23
     cd2:	21 f0       	breq	.+8      	; 0xcdc <__floatsisf+0x54>
     cd4:	9e e8       	ldi	r25, 0x8E	; 142
     cd6:	87 2f       	mov	r24, r23
     cd8:	76 2f       	mov	r23, r22
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__floatsisf+0x5e>
     cdc:	66 23       	and	r22, r22
     cde:	71 f0       	breq	.+28     	; 0xcfc <__floatsisf+0x74>
     ce0:	96 e8       	ldi	r25, 0x86	; 134
     ce2:	86 2f       	mov	r24, r22
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	2a f0       	brmi	.+10     	; 0xcf4 <__floatsisf+0x6c>
     cea:	9a 95       	dec	r25
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	da f7       	brpl	.-10     	; 0xcea <__floatsisf+0x62>
     cf4:	88 0f       	add	r24, r24
     cf6:	96 95       	lsr	r25
     cf8:	87 95       	ror	r24
     cfa:	97 f9       	bld	r25, 7
     cfc:	08 95       	ret

00000cfe <__fp_inf>:
     cfe:	97 f9       	bld	r25, 7
     d00:	9f 67       	ori	r25, 0x7F	; 127
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	08 95       	ret

00000d0a <__fp_nan>:
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
     d0c:	80 ec       	ldi	r24, 0xC0	; 192
     d0e:	08 95       	ret

00000d10 <__fp_pscA>:
     d10:	00 24       	eor	r0, r0
     d12:	0a 94       	dec	r0
     d14:	16 16       	cp	r1, r22
     d16:	17 06       	cpc	r1, r23
     d18:	18 06       	cpc	r1, r24
     d1a:	09 06       	cpc	r0, r25
     d1c:	08 95       	ret

00000d1e <__fp_pscB>:
     d1e:	00 24       	eor	r0, r0
     d20:	0a 94       	dec	r0
     d22:	12 16       	cp	r1, r18
     d24:	13 06       	cpc	r1, r19
     d26:	14 06       	cpc	r1, r20
     d28:	05 06       	cpc	r0, r21
     d2a:	08 95       	ret

00000d2c <__fp_round>:
     d2c:	09 2e       	mov	r0, r25
     d2e:	03 94       	inc	r0
     d30:	00 0c       	add	r0, r0
     d32:	11 f4       	brne	.+4      	; 0xd38 <__fp_round+0xc>
     d34:	88 23       	and	r24, r24
     d36:	52 f0       	brmi	.+20     	; 0xd4c <__fp_round+0x20>
     d38:	bb 0f       	add	r27, r27
     d3a:	40 f4       	brcc	.+16     	; 0xd4c <__fp_round+0x20>
     d3c:	bf 2b       	or	r27, r31
     d3e:	11 f4       	brne	.+4      	; 0xd44 <__fp_round+0x18>
     d40:	60 ff       	sbrs	r22, 0
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__fp_round+0x20>
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	8f 4f       	sbci	r24, 0xFF	; 255
     d4a:	9f 4f       	sbci	r25, 0xFF	; 255
     d4c:	08 95       	ret

00000d4e <__fp_split3>:
     d4e:	57 fd       	sbrc	r21, 7
     d50:	90 58       	subi	r25, 0x80	; 128
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	59 f0       	breq	.+22     	; 0xd6e <__fp_splitA+0x10>
     d58:	5f 3f       	cpi	r21, 0xFF	; 255
     d5a:	71 f0       	breq	.+28     	; 0xd78 <__fp_splitA+0x1a>
     d5c:	47 95       	ror	r20

00000d5e <__fp_splitA>:
     d5e:	88 0f       	add	r24, r24
     d60:	97 fb       	bst	r25, 7
     d62:	99 1f       	adc	r25, r25
     d64:	61 f0       	breq	.+24     	; 0xd7e <__fp_splitA+0x20>
     d66:	9f 3f       	cpi	r25, 0xFF	; 255
     d68:	79 f0       	breq	.+30     	; 0xd88 <__fp_splitA+0x2a>
     d6a:	87 95       	ror	r24
     d6c:	08 95       	ret
     d6e:	12 16       	cp	r1, r18
     d70:	13 06       	cpc	r1, r19
     d72:	14 06       	cpc	r1, r20
     d74:	55 1f       	adc	r21, r21
     d76:	f2 cf       	rjmp	.-28     	; 0xd5c <__fp_split3+0xe>
     d78:	46 95       	lsr	r20
     d7a:	f1 df       	rcall	.-30     	; 0xd5e <__fp_splitA>
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <__fp_splitA+0x30>
     d7e:	16 16       	cp	r1, r22
     d80:	17 06       	cpc	r1, r23
     d82:	18 06       	cpc	r1, r24
     d84:	99 1f       	adc	r25, r25
     d86:	f1 cf       	rjmp	.-30     	; 0xd6a <__fp_splitA+0xc>
     d88:	86 95       	lsr	r24
     d8a:	71 05       	cpc	r23, r1
     d8c:	61 05       	cpc	r22, r1
     d8e:	08 94       	sec
     d90:	08 95       	ret

00000d92 <__fp_zero>:
     d92:	e8 94       	clt

00000d94 <__fp_szero>:
     d94:	bb 27       	eor	r27, r27
     d96:	66 27       	eor	r22, r22
     d98:	77 27       	eor	r23, r23
     d9a:	cb 01       	movw	r24, r22
     d9c:	97 f9       	bld	r25, 7
     d9e:	08 95       	ret

00000da0 <__mulsf3>:
     da0:	0b d0       	rcall	.+22     	; 0xdb8 <__mulsf3x>
     da2:	c4 cf       	rjmp	.-120    	; 0xd2c <__fp_round>
     da4:	b5 df       	rcall	.-150    	; 0xd10 <__fp_pscA>
     da6:	28 f0       	brcs	.+10     	; 0xdb2 <__mulsf3+0x12>
     da8:	ba df       	rcall	.-140    	; 0xd1e <__fp_pscB>
     daa:	18 f0       	brcs	.+6      	; 0xdb2 <__mulsf3+0x12>
     dac:	95 23       	and	r25, r21
     dae:	09 f0       	breq	.+2      	; 0xdb2 <__mulsf3+0x12>
     db0:	a6 cf       	rjmp	.-180    	; 0xcfe <__fp_inf>
     db2:	ab cf       	rjmp	.-170    	; 0xd0a <__fp_nan>
     db4:	11 24       	eor	r1, r1
     db6:	ee cf       	rjmp	.-36     	; 0xd94 <__fp_szero>

00000db8 <__mulsf3x>:
     db8:	ca df       	rcall	.-108    	; 0xd4e <__fp_split3>
     dba:	a0 f3       	brcs	.-24     	; 0xda4 <__mulsf3+0x4>

00000dbc <__mulsf3_pse>:
     dbc:	95 9f       	mul	r25, r21
     dbe:	d1 f3       	breq	.-12     	; 0xdb4 <__mulsf3+0x14>
     dc0:	95 0f       	add	r25, r21
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	55 1f       	adc	r21, r21
     dc6:	62 9f       	mul	r22, r18
     dc8:	f0 01       	movw	r30, r0
     dca:	72 9f       	mul	r23, r18
     dcc:	bb 27       	eor	r27, r27
     dce:	f0 0d       	add	r31, r0
     dd0:	b1 1d       	adc	r27, r1
     dd2:	63 9f       	mul	r22, r19
     dd4:	aa 27       	eor	r26, r26
     dd6:	f0 0d       	add	r31, r0
     dd8:	b1 1d       	adc	r27, r1
     dda:	aa 1f       	adc	r26, r26
     ddc:	64 9f       	mul	r22, r20
     dde:	66 27       	eor	r22, r22
     de0:	b0 0d       	add	r27, r0
     de2:	a1 1d       	adc	r26, r1
     de4:	66 1f       	adc	r22, r22
     de6:	82 9f       	mul	r24, r18
     de8:	22 27       	eor	r18, r18
     dea:	b0 0d       	add	r27, r0
     dec:	a1 1d       	adc	r26, r1
     dee:	62 1f       	adc	r22, r18
     df0:	73 9f       	mul	r23, r19
     df2:	b0 0d       	add	r27, r0
     df4:	a1 1d       	adc	r26, r1
     df6:	62 1f       	adc	r22, r18
     df8:	83 9f       	mul	r24, r19
     dfa:	a0 0d       	add	r26, r0
     dfc:	61 1d       	adc	r22, r1
     dfe:	22 1f       	adc	r18, r18
     e00:	74 9f       	mul	r23, r20
     e02:	33 27       	eor	r19, r19
     e04:	a0 0d       	add	r26, r0
     e06:	61 1d       	adc	r22, r1
     e08:	23 1f       	adc	r18, r19
     e0a:	84 9f       	mul	r24, r20
     e0c:	60 0d       	add	r22, r0
     e0e:	21 1d       	adc	r18, r1
     e10:	82 2f       	mov	r24, r18
     e12:	76 2f       	mov	r23, r22
     e14:	6a 2f       	mov	r22, r26
     e16:	11 24       	eor	r1, r1
     e18:	9f 57       	subi	r25, 0x7F	; 127
     e1a:	50 40       	sbci	r21, 0x00	; 0
     e1c:	8a f0       	brmi	.+34     	; 0xe40 <__mulsf3_pse+0x84>
     e1e:	e1 f0       	breq	.+56     	; 0xe58 <__mulsf3_pse+0x9c>
     e20:	88 23       	and	r24, r24
     e22:	4a f0       	brmi	.+18     	; 0xe36 <__mulsf3_pse+0x7a>
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	bb 1f       	adc	r27, r27
     e2a:	66 1f       	adc	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	91 50       	subi	r25, 0x01	; 1
     e32:	50 40       	sbci	r21, 0x00	; 0
     e34:	a9 f7       	brne	.-22     	; 0xe20 <__mulsf3_pse+0x64>
     e36:	9e 3f       	cpi	r25, 0xFE	; 254
     e38:	51 05       	cpc	r21, r1
     e3a:	70 f0       	brcs	.+28     	; 0xe58 <__mulsf3_pse+0x9c>
     e3c:	60 cf       	rjmp	.-320    	; 0xcfe <__fp_inf>
     e3e:	aa cf       	rjmp	.-172    	; 0xd94 <__fp_szero>
     e40:	5f 3f       	cpi	r21, 0xFF	; 255
     e42:	ec f3       	brlt	.-6      	; 0xe3e <__mulsf3_pse+0x82>
     e44:	98 3e       	cpi	r25, 0xE8	; 232
     e46:	dc f3       	brlt	.-10     	; 0xe3e <__mulsf3_pse+0x82>
     e48:	86 95       	lsr	r24
     e4a:	77 95       	ror	r23
     e4c:	67 95       	ror	r22
     e4e:	b7 95       	ror	r27
     e50:	f7 95       	ror	r31
     e52:	e7 95       	ror	r30
     e54:	9f 5f       	subi	r25, 0xFF	; 255
     e56:	c1 f7       	brne	.-16     	; 0xe48 <__mulsf3_pse+0x8c>
     e58:	fe 2b       	or	r31, r30
     e5a:	88 0f       	add	r24, r24
     e5c:	91 1d       	adc	r25, r1
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret

00000e66 <round>:
     e66:	7b df       	rcall	.-266    	; 0xd5e <__fp_splitA>
     e68:	e0 f0       	brcs	.+56     	; 0xea2 <round+0x3c>
     e6a:	9e 37       	cpi	r25, 0x7E	; 126
     e6c:	d8 f0       	brcs	.+54     	; 0xea4 <round+0x3e>
     e6e:	96 39       	cpi	r25, 0x96	; 150
     e70:	b8 f4       	brcc	.+46     	; 0xea0 <round+0x3a>
     e72:	9e 38       	cpi	r25, 0x8E	; 142
     e74:	48 f4       	brcc	.+18     	; 0xe88 <round+0x22>
     e76:	67 2f       	mov	r22, r23
     e78:	78 2f       	mov	r23, r24
     e7a:	88 27       	eor	r24, r24
     e7c:	98 5f       	subi	r25, 0xF8	; 248
     e7e:	f9 cf       	rjmp	.-14     	; 0xe72 <round+0xc>
     e80:	86 95       	lsr	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	93 95       	inc	r25
     e88:	95 39       	cpi	r25, 0x95	; 149
     e8a:	d0 f3       	brcs	.-12     	; 0xe80 <round+0x1a>
     e8c:	b6 2f       	mov	r27, r22
     e8e:	b1 70       	andi	r27, 0x01	; 1
     e90:	6b 0f       	add	r22, r27
     e92:	71 1d       	adc	r23, r1
     e94:	81 1d       	adc	r24, r1
     e96:	20 f4       	brcc	.+8      	; 0xea0 <round+0x3a>
     e98:	87 95       	ror	r24
     e9a:	77 95       	ror	r23
     e9c:	67 95       	ror	r22
     e9e:	93 95       	inc	r25
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <__fp_mintl>
     ea2:	1c c0       	rjmp	.+56     	; 0xedc <__fp_mpack>
     ea4:	77 cf       	rjmp	.-274    	; 0xd94 <__fp_szero>

00000ea6 <__fp_mintl>:
     ea6:	88 23       	and	r24, r24
     ea8:	71 f4       	brne	.+28     	; 0xec6 <__fp_mintl+0x20>
     eaa:	77 23       	and	r23, r23
     eac:	21 f0       	breq	.+8      	; 0xeb6 <__fp_mintl+0x10>
     eae:	98 50       	subi	r25, 0x08	; 8
     eb0:	87 2b       	or	r24, r23
     eb2:	76 2f       	mov	r23, r22
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <__fp_mintl+0x1e>
     eb6:	66 23       	and	r22, r22
     eb8:	11 f4       	brne	.+4      	; 0xebe <__fp_mintl+0x18>
     eba:	99 27       	eor	r25, r25
     ebc:	0d c0       	rjmp	.+26     	; 0xed8 <__fp_mintl+0x32>
     ebe:	90 51       	subi	r25, 0x10	; 16
     ec0:	86 2b       	or	r24, r22
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	2a f0       	brmi	.+10     	; 0xed2 <__fp_mintl+0x2c>
     ec8:	9a 95       	dec	r25
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	da f7       	brpl	.-10     	; 0xec8 <__fp_mintl+0x22>
     ed2:	88 0f       	add	r24, r24
     ed4:	96 95       	lsr	r25
     ed6:	87 95       	ror	r24
     ed8:	97 f9       	bld	r25, 7
     eda:	08 95       	ret

00000edc <__fp_mpack>:
     edc:	9f 3f       	cpi	r25, 0xFF	; 255
     ede:	31 f0       	breq	.+12     	; 0xeec <__fp_mpack_finite+0xc>

00000ee0 <__fp_mpack_finite>:
     ee0:	91 50       	subi	r25, 0x01	; 1
     ee2:	20 f4       	brcc	.+8      	; 0xeec <__fp_mpack_finite+0xc>
     ee4:	87 95       	ror	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b7 95       	ror	r27
     eec:	88 0f       	add	r24, r24
     eee:	91 1d       	adc	r25, r1
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <malloc>:
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	91 05       	cpc	r25, r1
     f00:	10 f4       	brcc	.+4      	; 0xf06 <malloc+0xe>
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	e0 91 72 24 	lds	r30, 0x2472
     f0a:	f0 91 73 24 	lds	r31, 0x2473
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	30 97       	sbiw	r30, 0x00	; 0
     f18:	39 f1       	breq	.+78     	; 0xf68 <malloc+0x70>
     f1a:	40 81       	ld	r20, Z
     f1c:	51 81       	ldd	r21, Z+1	; 0x01
     f1e:	48 17       	cp	r20, r24
     f20:	59 07       	cpc	r21, r25
     f22:	b8 f0       	brcs	.+46     	; 0xf52 <malloc+0x5a>
     f24:	48 17       	cp	r20, r24
     f26:	59 07       	cpc	r21, r25
     f28:	71 f4       	brne	.+28     	; 0xf46 <malloc+0x4e>
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	10 97       	sbiw	r26, 0x00	; 0
     f30:	29 f0       	breq	.+10     	; 0xf3c <malloc+0x44>
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	8d 93       	st	X+, r24
     f36:	9c 93       	st	X, r25
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	2c c0       	rjmp	.+88     	; 0xf94 <malloc+0x9c>
     f3c:	80 93 72 24 	sts	0x2472, r24
     f40:	90 93 73 24 	sts	0x2473, r25
     f44:	27 c0       	rjmp	.+78     	; 0xf94 <malloc+0x9c>
     f46:	21 15       	cp	r18, r1
     f48:	31 05       	cpc	r19, r1
     f4a:	31 f0       	breq	.+12     	; 0xf58 <malloc+0x60>
     f4c:	42 17       	cp	r20, r18
     f4e:	53 07       	cpc	r21, r19
     f50:	18 f0       	brcs	.+6      	; 0xf58 <malloc+0x60>
     f52:	a9 01       	movw	r20, r18
     f54:	db 01       	movw	r26, r22
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <malloc+0x62>
     f58:	ef 01       	movw	r28, r30
     f5a:	9a 01       	movw	r18, r20
     f5c:	bd 01       	movw	r22, r26
     f5e:	df 01       	movw	r26, r30
     f60:	02 80       	ldd	r0, Z+2	; 0x02
     f62:	f3 81       	ldd	r31, Z+3	; 0x03
     f64:	e0 2d       	mov	r30, r0
     f66:	d7 cf       	rjmp	.-82     	; 0xf16 <malloc+0x1e>
     f68:	21 15       	cp	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	f9 f0       	breq	.+62     	; 0xfac <malloc+0xb4>
     f6e:	28 1b       	sub	r18, r24
     f70:	39 0b       	sbc	r19, r25
     f72:	24 30       	cpi	r18, 0x04	; 4
     f74:	31 05       	cpc	r19, r1
     f76:	80 f4       	brcc	.+32     	; 0xf98 <malloc+0xa0>
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	61 15       	cp	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	21 f0       	breq	.+8      	; 0xf8a <malloc+0x92>
     f82:	fb 01       	movw	r30, r22
     f84:	82 83       	std	Z+2, r24	; 0x02
     f86:	93 83       	std	Z+3, r25	; 0x03
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <malloc+0x9a>
     f8a:	80 93 72 24 	sts	0x2472, r24
     f8e:	90 93 73 24 	sts	0x2473, r25
     f92:	fe 01       	movw	r30, r28
     f94:	32 96       	adiw	r30, 0x02	; 2
     f96:	44 c0       	rjmp	.+136    	; 0x1020 <malloc+0x128>
     f98:	fe 01       	movw	r30, r28
     f9a:	e2 0f       	add	r30, r18
     f9c:	f3 1f       	adc	r31, r19
     f9e:	81 93       	st	Z+, r24
     fa0:	91 93       	st	Z+, r25
     fa2:	22 50       	subi	r18, 0x02	; 2
     fa4:	31 09       	sbc	r19, r1
     fa6:	28 83       	st	Y, r18
     fa8:	39 83       	std	Y+1, r19	; 0x01
     faa:	3a c0       	rjmp	.+116    	; 0x1020 <malloc+0x128>
     fac:	20 91 70 24 	lds	r18, 0x2470
     fb0:	30 91 71 24 	lds	r19, 0x2471
     fb4:	23 2b       	or	r18, r19
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <malloc+0xd0>
     fb8:	20 91 02 20 	lds	r18, 0x2002
     fbc:	30 91 03 20 	lds	r19, 0x2003
     fc0:	20 93 70 24 	sts	0x2470, r18
     fc4:	30 93 71 24 	sts	0x2471, r19
     fc8:	20 91 00 20 	lds	r18, 0x2000
     fcc:	30 91 01 20 	lds	r19, 0x2001
     fd0:	21 15       	cp	r18, r1
     fd2:	31 05       	cpc	r19, r1
     fd4:	41 f4       	brne	.+16     	; 0xfe6 <malloc+0xee>
     fd6:	2d b7       	in	r18, 0x3d	; 61
     fd8:	3e b7       	in	r19, 0x3e	; 62
     fda:	40 91 04 20 	lds	r20, 0x2004
     fde:	50 91 05 20 	lds	r21, 0x2005
     fe2:	24 1b       	sub	r18, r20
     fe4:	35 0b       	sbc	r19, r21
     fe6:	e0 91 70 24 	lds	r30, 0x2470
     fea:	f0 91 71 24 	lds	r31, 0x2471
     fee:	e2 17       	cp	r30, r18
     ff0:	f3 07       	cpc	r31, r19
     ff2:	a0 f4       	brcc	.+40     	; 0x101c <malloc+0x124>
     ff4:	2e 1b       	sub	r18, r30
     ff6:	3f 0b       	sbc	r19, r31
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	78 f0       	brcs	.+30     	; 0x101c <malloc+0x124>
     ffe:	ac 01       	movw	r20, r24
    1000:	4e 5f       	subi	r20, 0xFE	; 254
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	24 17       	cp	r18, r20
    1006:	35 07       	cpc	r19, r21
    1008:	48 f0       	brcs	.+18     	; 0x101c <malloc+0x124>
    100a:	4e 0f       	add	r20, r30
    100c:	5f 1f       	adc	r21, r31
    100e:	40 93 70 24 	sts	0x2470, r20
    1012:	50 93 71 24 	sts	0x2471, r21
    1016:	81 93       	st	Z+, r24
    1018:	91 93       	st	Z+, r25
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <malloc+0x128>
    101c:	e0 e0       	ldi	r30, 0x00	; 0
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	cf 01       	movw	r24, r30
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <free>:
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	09 f4       	brne	.+2      	; 0x1032 <free+0xa>
    1030:	87 c0       	rjmp	.+270    	; 0x1140 <free+0x118>
    1032:	fc 01       	movw	r30, r24
    1034:	32 97       	sbiw	r30, 0x02	; 2
    1036:	12 82       	std	Z+2, r1	; 0x02
    1038:	13 82       	std	Z+3, r1	; 0x03
    103a:	c0 91 72 24 	lds	r28, 0x2472
    103e:	d0 91 73 24 	lds	r29, 0x2473
    1042:	20 97       	sbiw	r28, 0x00	; 0
    1044:	81 f4       	brne	.+32     	; 0x1066 <free+0x3e>
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	28 0f       	add	r18, r24
    104c:	39 1f       	adc	r19, r25
    104e:	80 91 70 24 	lds	r24, 0x2470
    1052:	90 91 71 24 	lds	r25, 0x2471
    1056:	82 17       	cp	r24, r18
    1058:	93 07       	cpc	r25, r19
    105a:	79 f5       	brne	.+94     	; 0x10ba <free+0x92>
    105c:	e0 93 70 24 	sts	0x2470, r30
    1060:	f0 93 71 24 	sts	0x2471, r31
    1064:	6d c0       	rjmp	.+218    	; 0x1140 <free+0x118>
    1066:	de 01       	movw	r26, r28
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	ae 17       	cp	r26, r30
    106e:	bf 07       	cpc	r27, r31
    1070:	50 f4       	brcc	.+20     	; 0x1086 <free+0x5e>
    1072:	12 96       	adiw	r26, 0x02	; 2
    1074:	4d 91       	ld	r20, X+
    1076:	5c 91       	ld	r21, X
    1078:	13 97       	sbiw	r26, 0x03	; 3
    107a:	9d 01       	movw	r18, r26
    107c:	41 15       	cp	r20, r1
    107e:	51 05       	cpc	r21, r1
    1080:	09 f1       	breq	.+66     	; 0x10c4 <free+0x9c>
    1082:	da 01       	movw	r26, r20
    1084:	f3 cf       	rjmp	.-26     	; 0x106c <free+0x44>
    1086:	a2 83       	std	Z+2, r26	; 0x02
    1088:	b3 83       	std	Z+3, r27	; 0x03
    108a:	40 81       	ld	r20, Z
    108c:	51 81       	ldd	r21, Z+1	; 0x01
    108e:	84 0f       	add	r24, r20
    1090:	95 1f       	adc	r25, r21
    1092:	8a 17       	cp	r24, r26
    1094:	9b 07       	cpc	r25, r27
    1096:	71 f4       	brne	.+28     	; 0x10b4 <free+0x8c>
    1098:	8d 91       	ld	r24, X+
    109a:	9c 91       	ld	r25, X
    109c:	11 97       	sbiw	r26, 0x01	; 1
    109e:	84 0f       	add	r24, r20
    10a0:	95 1f       	adc	r25, r21
    10a2:	02 96       	adiw	r24, 0x02	; 2
    10a4:	80 83       	st	Z, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	8d 91       	ld	r24, X+
    10ac:	9c 91       	ld	r25, X
    10ae:	13 97       	sbiw	r26, 0x03	; 3
    10b0:	82 83       	std	Z+2, r24	; 0x02
    10b2:	93 83       	std	Z+3, r25	; 0x03
    10b4:	21 15       	cp	r18, r1
    10b6:	31 05       	cpc	r19, r1
    10b8:	29 f4       	brne	.+10     	; 0x10c4 <free+0x9c>
    10ba:	e0 93 72 24 	sts	0x2472, r30
    10be:	f0 93 73 24 	sts	0x2473, r31
    10c2:	3e c0       	rjmp	.+124    	; 0x1140 <free+0x118>
    10c4:	d9 01       	movw	r26, r18
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	ed 93       	st	X+, r30
    10ca:	fc 93       	st	X, r31
    10cc:	13 97       	sbiw	r26, 0x03	; 3
    10ce:	4d 91       	ld	r20, X+
    10d0:	5d 91       	ld	r21, X+
    10d2:	a4 0f       	add	r26, r20
    10d4:	b5 1f       	adc	r27, r21
    10d6:	ea 17       	cp	r30, r26
    10d8:	fb 07       	cpc	r31, r27
    10da:	79 f4       	brne	.+30     	; 0x10fa <free+0xd2>
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	84 0f       	add	r24, r20
    10e2:	95 1f       	adc	r25, r21
    10e4:	02 96       	adiw	r24, 0x02	; 2
    10e6:	d9 01       	movw	r26, r18
    10e8:	8d 93       	st	X+, r24
    10ea:	9c 93       	st	X, r25
    10ec:	11 97       	sbiw	r26, 0x01	; 1
    10ee:	82 81       	ldd	r24, Z+2	; 0x02
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	12 96       	adiw	r26, 0x02	; 2
    10f4:	8d 93       	st	X+, r24
    10f6:	9c 93       	st	X, r25
    10f8:	13 97       	sbiw	r26, 0x03	; 3
    10fa:	e0 e0       	ldi	r30, 0x00	; 0
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	19 f0       	breq	.+6      	; 0x110c <free+0xe4>
    1106:	fe 01       	movw	r30, r28
    1108:	ec 01       	movw	r28, r24
    110a:	f9 cf       	rjmp	.-14     	; 0x10fe <free+0xd6>
    110c:	ce 01       	movw	r24, r28
    110e:	02 96       	adiw	r24, 0x02	; 2
    1110:	28 81       	ld	r18, Y
    1112:	39 81       	ldd	r19, Y+1	; 0x01
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	20 91 70 24 	lds	r18, 0x2470
    111c:	30 91 71 24 	lds	r19, 0x2471
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	69 f4       	brne	.+26     	; 0x1140 <free+0x118>
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	29 f4       	brne	.+10     	; 0x1134 <free+0x10c>
    112a:	10 92 72 24 	sts	0x2472, r1
    112e:	10 92 73 24 	sts	0x2473, r1
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <free+0x110>
    1134:	12 82       	std	Z+2, r1	; 0x02
    1136:	13 82       	std	Z+3, r1	; 0x03
    1138:	c0 93 70 24 	sts	0x2470, r28
    113c:	d0 93 71 24 	sts	0x2471, r29
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <__itoa_ncheck>:
    1146:	bb 27       	eor	r27, r27
    1148:	4a 30       	cpi	r20, 0x0A	; 10
    114a:	31 f4       	brne	.+12     	; 0x1158 <__itoa_ncheck+0x12>
    114c:	99 23       	and	r25, r25
    114e:	22 f4       	brpl	.+8      	; 0x1158 <__itoa_ncheck+0x12>
    1150:	bd e2       	ldi	r27, 0x2D	; 45
    1152:	90 95       	com	r25
    1154:	81 95       	neg	r24
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	01 c0       	rjmp	.+2      	; 0x115c <__utoa_common>

0000115a <__utoa_ncheck>:
    115a:	bb 27       	eor	r27, r27

0000115c <__utoa_common>:
    115c:	fb 01       	movw	r30, r22
    115e:	55 27       	eor	r21, r21
    1160:	aa 27       	eor	r26, r26
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	aa 1f       	adc	r26, r26
    1168:	a4 17       	cp	r26, r20
    116a:	10 f0       	brcs	.+4      	; 0x1170 <__utoa_common+0x14>
    116c:	a4 1b       	sub	r26, r20
    116e:	83 95       	inc	r24
    1170:	50 51       	subi	r21, 0x10	; 16
    1172:	b9 f7       	brne	.-18     	; 0x1162 <__utoa_common+0x6>
    1174:	a0 5d       	subi	r26, 0xD0	; 208
    1176:	aa 33       	cpi	r26, 0x3A	; 58
    1178:	08 f0       	brcs	.+2      	; 0x117c <__utoa_common+0x20>
    117a:	a9 5d       	subi	r26, 0xD9	; 217
    117c:	a1 93       	st	Z+, r26
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	79 f7       	brne	.-34     	; 0x1160 <__utoa_common+0x4>
    1182:	b1 11       	cpse	r27, r1
    1184:	b1 93       	st	Z+, r27
    1186:	11 92       	st	Z+, r1
    1188:	cb 01       	movw	r24, r22
    118a:	00 c0       	rjmp	.+0      	; 0x118c <strrev>

0000118c <strrev>:
    118c:	dc 01       	movw	r26, r24
    118e:	fc 01       	movw	r30, r24
    1190:	67 2f       	mov	r22, r23
    1192:	71 91       	ld	r23, Z+
    1194:	77 23       	and	r23, r23
    1196:	e1 f7       	brne	.-8      	; 0x1190 <strrev+0x4>
    1198:	32 97       	sbiw	r30, 0x02	; 2
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <strrev+0x18>
    119c:	7c 91       	ld	r23, X
    119e:	6d 93       	st	X+, r22
    11a0:	70 83       	st	Z, r23
    11a2:	62 91       	ld	r22, -Z
    11a4:	ae 17       	cp	r26, r30
    11a6:	bf 07       	cpc	r27, r31
    11a8:	c8 f3       	brcs	.-14     	; 0x119c <strrev+0x10>
    11aa:	08 95       	ret

000011ac <_exit>:
    11ac:	f8 94       	cli

000011ae <__stop_program>:
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <__stop_program>
