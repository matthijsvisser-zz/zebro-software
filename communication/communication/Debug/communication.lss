
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00802000  00000fae  00001042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000048e  00802058  00802058  0000109a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002275  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b12  00000000  00000000  000034bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e4d  00000000  00000000  00003fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  00004e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009d8  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001596  00000000  00000000  00005d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000072de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	00 c1       	rjmp	.+512    	; 0x266 <__vector_25>
  66:	00 00       	nop
  68:	32 c1       	rjmp	.+612    	; 0x2ce <__vector_26>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c1       	rjmp	.+708    	; 0x336 <__vector_28>
  72:	00 00       	nop
  74:	94 c1       	rjmp	.+808    	; 0x39e <__vector_29>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee ea       	ldi	r30, 0xAE	; 174
 21c:	ff e0       	ldi	r31, 0x0F	; 15
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a8 35       	cpi	r26, 0x58	; 88
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	24 e2       	ldi	r18, 0x24	; 36
 232:	a8 e5       	ldi	r26, 0x58	; 88
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a6 3e       	cpi	r26, 0xE6	; 230
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	e2 d0       	rcall	.+452    	; 0x406 <main>
 242:	b3 c6       	rjmp	.+3430   	; 0xfaa <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
 246:	88 ed       	ldi	r24, 0xD8	; 216
 248:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
 24a:	e0 e5       	ldi	r30, 0x50	; 80
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	82 60       	ori	r24, 0x02	; 2
 252:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 254:	81 81       	ldd	r24, Z+1	; 0x01
 256:	81 ff       	sbrs	r24, 1
 258:	fd cf       	rjmp	.-6      	; 0x254 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
 25a:	88 ed       	ldi	r24, 0xD8	; 216
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 40 00 	sts	0x0040, r24
 264:	08 95       	ret

00000266 <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	08 b6       	in	r0, 0x38	; 56
 272:	0f 92       	push	r0
 274:	18 be       	out	0x38, r1	; 56
 276:	09 b6       	in	r0, 0x39	; 57
 278:	0f 92       	push	r0
 27a:	19 be       	out	0x39, r1	; 57
 27c:	0b b6       	in	r0, 0x3b	; 59
 27e:	0f 92       	push	r0
 280:	1b be       	out	0x3b, r1	; 59
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
 29a:	88 e5       	ldi	r24, 0x58	; 88
 29c:	90 e2       	ldi	r25, 0x20	; 32
 29e:	f0 d3       	rcall	.+2016   	; 0xa80 <USART_RXComplete>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	09 be       	out	0x39, r0	; 57
 2c0:	0f 90       	pop	r0
 2c2:	08 be       	out	0x38, r0	; 56
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	08 b6       	in	r0, 0x38	; 56
 2da:	0f 92       	push	r0
 2dc:	18 be       	out	0x38, r1	; 56
 2de:	09 b6       	in	r0, 0x39	; 57
 2e0:	0f 92       	push	r0
 2e2:	19 be       	out	0x39, r1	; 57
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	1b be       	out	0x3b, r1	; 59
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
 302:	88 e5       	ldi	r24, 0x58	; 88
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	d7 d3       	rcall	.+1966   	; 0xab6 <USART_DataRegEmpty>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	09 be       	out	0x39, r0	; 57
 328:	0f 90       	pop	r0
 32a:	08 be       	out	0x38, r0	; 56
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	08 b6       	in	r0, 0x38	; 56
 342:	0f 92       	push	r0
 344:	18 be       	out	0x38, r1	; 56
 346:	09 b6       	in	r0, 0x39	; 57
 348:	0f 92       	push	r0
 34a:	19 be       	out	0x39, r1	; 57
 34c:	0b b6       	in	r0, 0x3b	; 59
 34e:	0f 92       	push	r0
 350:	1b be       	out	0x3b, r1	; 59
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
 36a:	8f e5       	ldi	r24, 0x5F	; 95
 36c:	92 e2       	ldi	r25, 0x22	; 34
 36e:	88 d3       	rcall	.+1808   	; 0xa80 <USART_RXComplete>
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	09 be       	out	0x39, r0	; 57
 390:	0f 90       	pop	r0
 392:	08 be       	out	0x38, r0	; 56
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	08 b6       	in	r0, 0x38	; 56
 3aa:	0f 92       	push	r0
 3ac:	18 be       	out	0x38, r1	; 56
 3ae:	09 b6       	in	r0, 0x39	; 57
 3b0:	0f 92       	push	r0
 3b2:	19 be       	out	0x39, r1	; 57
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	1b be       	out	0x3b, r1	; 59
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
 3d2:	8f e5       	ldi	r24, 0x5F	; 95
 3d4:	92 e2       	ldi	r25, 0x22	; 34
 3d6:	6f d3       	rcall	.+1758   	; 0xab6 <USART_DataRegEmpty>
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0b be       	out	0x3b, r0	; 59
 3f4:	0f 90       	pop	r0
 3f6:	09 be       	out	0x39, r0	; 57
 3f8:	0f 90       	pop	r0
 3fa:	08 be       	out	0x38, r0	; 56
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <main>:

void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x);

#define UPDATEINTERVAL 1000			// in ms

int main(void){
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	c0 58       	subi	r28, 0x80	; 128
 410:	d1 09       	sbc	r29, r1
 412:	cd bf       	out	0x3d, r28	; 61
 414:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
 416:	17 df       	rcall	.-466    	; 0x246 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
 418:	c1 2c       	mov	r12, r1
 41a:	e1 2c       	mov	r14, r1
 41c:	12 ec       	ldi	r17, 0xC2	; 194
 41e:	f1 2e       	mov	r15, r17
 420:	01 e0       	ldi	r16, 0x01	; 1
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	38 e4       	ldi	r19, 0x48	; 72
 428:	48 ee       	ldi	r20, 0xE8	; 232
 42a:	51 e0       	ldi	r21, 0x01	; 1
 42c:	60 ea       	ldi	r22, 0xA0	; 160
 42e:	78 e0       	ldi	r23, 0x08	; 8
 430:	88 e5       	ldi	r24, 0x58	; 88
 432:	90 e2       	ldi	r25, 0x20	; 32
 434:	63 d2       	rcall	.+1222   	; 0x8fc <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	38 e4       	ldi	r19, 0x48	; 72
 43a:	48 ee       	ldi	r20, 0xE8	; 232
 43c:	51 e0       	ldi	r21, 0x01	; 1
 43e:	60 eb       	ldi	r22, 0xB0	; 176
 440:	78 e0       	ldi	r23, 0x08	; 8
 442:	8f e5       	ldi	r24, 0x5F	; 95
 444:	92 e2       	ldi	r25, 0x22	; 34
 446:	5a d2       	rcall	.+1204   	; 0x8fc <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	e0 ea       	ldi	r30, 0xA0	; 160
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	82 83       	std	Z+2, r24	; 0x02
	sei();
 450:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 452:	2f ef       	ldi	r18, 0xFF	; 255
 454:	87 ea       	ldi	r24, 0xA7	; 167
 456:	91 e6       	ldi	r25, 0x61	; 97
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <main+0x52>
 460:	00 c0       	rjmp	.+0      	; 0x462 <main+0x5c>
 462:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e2       	ldi	r25, 0x20	; 32
 468:	ab d2       	rcall	.+1366   	; 0x9c0 <Command>
	Command(SBIV500);
 46a:	89 e0       	ldi	r24, 0x09	; 9
 46c:	90 e2       	ldi	r25, 0x20	; 32
 46e:	a8 d2       	rcall	.+1360   	; 0x9c0 <Command>
	
	
	while(1) {
		char message[128];
		
		memset(message, EOS, strlen(message));
 470:	8e 01       	movw	r16, r28
 472:	0f 5f       	subi	r16, 0xFF	; 255
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	f8 01       	movw	r30, r16
 478:	01 90       	ld	r0, Z+
 47a:	00 20       	and	r0, r0
 47c:	e9 f7       	brne	.-6      	; 0x478 <main+0x72>
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	af 01       	movw	r20, r30
 482:	40 1b       	sub	r20, r16
 484:	51 0b       	sbc	r21, r17
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	c8 01       	movw	r24, r16
 48c:	6c d5       	rcall	.+2776   	; 0xf66 <memset>
 48e:	2f ef       	ldi	r18, 0xFF	; 255
 490:	87 ea       	ldi	r24, 0xA7	; 167
 492:	91 e6       	ldi	r25, 0x61	; 97
 494:	21 50       	subi	r18, 0x01	; 1
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <main+0x8e>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <main+0x98>
 49e:	00 00       	nop
		_delay_ms(UPDATEINTERVAL);
		DebugPrint(CLEARTERM);
 4a0:	84 e1       	ldi	r24, 0x14	; 20
 4a2:	90 e2       	ldi	r25, 0x20	; 32
 4a4:	88 d2       	rcall	.+1296   	; 0x9b6 <DebugPrint>
		//DebugPrint(TranslateMessage());
		strcpy(message,TranslateMessage());
 4a6:	ab d0       	rcall	.+342    	; 0x5fe <TranslateMessage>
 4a8:	bc 01       	movw	r22, r24
 4aa:	c8 01       	movw	r24, r16
 4ac:	77 d5       	rcall	.+2798   	; 0xf9c <strcpy>
		
//		DebugPrint(message);
		if (ValidateMessage(message,TYPE_RRN) == true){
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	c8 01       	movw	r24, r16
 4b2:	09 d0       	rcall	.+18     	; 0x4c6 <ValidateMessage>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	19 f4       	brne	.+6      	; 0x4be <main+0xb8>
			DetermineCommandtype(message);
 4b8:	c8 01       	movw	r24, r16
 4ba:	22 d0       	rcall	.+68     	; 0x500 <DetermineCommandtype>
 4bc:	dc cf       	rjmp	.-72     	; 0x476 <main+0x70>
		}else{
			DebugPrint("Not valid");
 4be:	8f e1       	ldi	r24, 0x1F	; 31
 4c0:	90 e2       	ldi	r25, 0x20	; 32
 4c2:	79 d2       	rcall	.+1266   	; 0x9b6 <DebugPrint>
		}

	}
 4c4:	d8 cf       	rjmp	.-80     	; 0x476 <main+0x70>

000004c6 <ValidateMessage>:
 * @param   command    Type of command
 * @return  true/false 
 */
uint8_t ValidateMessage (char *message, uint8_t command){
    uint8_t messageLength;
    messageLength = strlen(message) - 2;
 4c6:	fc 01       	movw	r30, r24
 4c8:	01 90       	ld	r0, Z+
 4ca:	00 20       	and	r0, r0
 4cc:	e9 f7       	brne	.-6      	; 0x4c8 <ValidateMessage+0x2>
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	e8 1b       	sub	r30, r24
 4d2:	f9 0b       	sbc	r31, r25

    switch (command) {
 4d4:	61 30       	cpi	r22, 0x01	; 1
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <ValidateMessage+0x1c>
        case 1: // command RRN
            if (messageLength == RRN_LENGTH){
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	e9 32       	cpi	r30, 0x29	; 41
 4dc:	19 f0       	breq	.+6      	; 0x4e4 <ValidateMessage+0x1e>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
        case 3: // command XX
            if (messageLength == RRN_LENGTH){
                return false;
            }
        default:
            return false;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 4e4:	08 95       	ret

000004e6 <RRN_function>:
/**
 * Ranging result notification flag
 * @param  	
 * @param	
 */
void RRN_function (char *message){
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
	uart_puts(&uartC1, "\r\nfunctie\r\n");
 4ec:	69 e2       	ldi	r22, 0x29	; 41
 4ee:	70 e2       	ldi	r23, 0x20	; 32
 4f0:	8f e5       	ldi	r24, 0x5F	; 95
 4f2:	92 e2       	ldi	r25, 0x22	; 34
 4f4:	f2 d0       	rcall	.+484    	; 0x6da <uart_puts>
	DebugPrint(message);
 4f6:	ce 01       	movw	r24, r28
 4f8:	5e d2       	rcall	.+1212   	; 0x9b6 <DebugPrint>
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <DetermineCommandtype>:
/**
 * Determines the meaning of the message
 * @param  	value	received value
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	00 d0       	rcall	.+0      	; 0x50e <DetermineCommandtype+0xe>
 50e:	1f 92       	push	r1
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	7c 01       	movw	r14, r24
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
	
	memset(command, EOS, strlen(command));	
 516:	ce 01       	movw	r24, r28
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	fc 01       	movw	r30, r24
 51c:	01 90       	ld	r0, Z+
 51e:	00 20       	and	r0, r0
 520:	e9 f7       	brne	.-6      	; 0x51c <DetermineCommandtype+0x1c>
 522:	31 97       	sbiw	r30, 0x01	; 1
 524:	af 01       	movw	r20, r30
 526:	48 1b       	sub	r20, r24
 528:	59 0b       	sbc	r21, r25
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	1b d5       	rcall	.+2614   	; 0xf66 <memset>
	messagePointer = message;
	
	DebugPrint(message);
 530:	c7 01       	movw	r24, r14
 532:	41 d2       	rcall	.+1154   	; 0x9b6 <DebugPrint>

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
 534:	f7 01       	movw	r30, r14
 536:	81 81       	ldd	r24, Z+1	; 0x01
 538:	8a 33       	cpi	r24, 0x3A	; 58
 53a:	29 f4       	brne	.+10     	; 0x546 <DetermineCommandtype+0x46>
	memset(command, EOS, strlen(command));	
	messagePointer = message;
	
	DebugPrint(message);

	*messagePointer++;
 53c:	87 01       	movw	r16, r14
 53e:	0f 5f       	subi	r16, 0xFF	; 255
 540:	1f 4f       	sbci	r17, 0xFF	; 255
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	21 c0       	rjmp	.+66     	; 0x588 <DetermineCommandtype+0x88>
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
 546:	87 01       	movw	r16, r14
 548:	0e 5f       	subi	r16, 0xFE	; 254
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
		if(*messagePointer == ( COMMAND_END)){ break;}		
 54c:	f7 01       	movw	r30, r14
 54e:	92 81       	ldd	r25, Z+2	; 0x02
 550:	9a 33       	cpi	r25, 0x3A	; 58
 552:	c9 f0       	breq	.+50     	; 0x586 <DetermineCommandtype+0x86>
 554:	98 01       	movw	r18, r16
 556:	d7 01       	movw	r26, r14
 558:	13 96       	adiw	r26, 0x03	; 3
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	04 c0       	rjmp	.+8      	; 0x566 <DetermineCommandtype+0x66>
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
 55e:	89 01       	movw	r16, r18
		if(*messagePointer == ( COMMAND_END)){ break;}		
 560:	9d 91       	ld	r25, X+
 562:	9a 33       	cpi	r25, 0x3A	; 58
 564:	89 f0       	breq	.+34     	; 0x588 <DetermineCommandtype+0x88>
 566:	89 01       	movw	r16, r18
		command[count] = *messagePointer;		
 568:	e1 e0       	ldi	r30, 0x01	; 1
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	ec 0f       	add	r30, r28
 56e:	fd 1f       	adc	r31, r29
 570:	e8 0f       	add	r30, r24
 572:	f1 1d       	adc	r31, r1
 574:	90 83       	st	Z, r25
		count++;
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	2f 5f       	subi	r18, 0xFF	; 255
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
 57c:	f8 01       	movw	r30, r16
 57e:	90 81       	ld	r25, Z
 580:	9a 33       	cpi	r25, 0x3A	; 58
 582:	69 f7       	brne	.-38     	; 0x55e <DetermineCommandtype+0x5e>
 584:	01 c0       	rjmp	.+2      	; 0x588 <DetermineCommandtype+0x88>
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
 586:	80 e0       	ldi	r24, 0x00	; 0
		*messagePointer++;
		if(*messagePointer == ( COMMAND_END)){ break;}		
		command[count] = *messagePointer;		
		count++;
	}
	command[count] = EOS;
 588:	e1 e0       	ldi	r30, 0x01	; 1
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	ec 0f       	add	r30, r28
 58e:	fd 1f       	adc	r31, r29
 590:	e8 0f       	add	r30, r24
 592:	f1 1d       	adc	r31, r1
 594:	10 82       	st	Z, r1
	
	*messagePointer++;

	if		(strcmp(command, "*RRN") == 0){	// Data Notification Message
 596:	65 e3       	ldi	r22, 0x35	; 53
 598:	70 e2       	ldi	r23, 0x20	; 32
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	f5 d4       	rcall	.+2538   	; 0xf8a <strcmp>
 5a0:	89 2b       	or	r24, r25
 5a2:	21 f4       	brne	.+8      	; 0x5ac <DetermineCommandtype+0xac>
		RRN_function(messagePointer);
 5a4:	c8 01       	movw	r24, r16
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	9e df       	rcall	.-196    	; 0x4e6 <RRN_function>
 5aa:	1f c0       	rjmp	.+62     	; 0x5ea <DetermineCommandtype+0xea>
	}else if(strcmp(command, "DNO")  == 0){	// Node ID Notification Message
 5ac:	6a e3       	ldi	r22, 0x3A	; 58
 5ae:	70 e2       	ldi	r23, 0x20	; 32
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	ea d4       	rcall	.+2516   	; 0xf8a <strcmp>
 5b6:	89 2b       	or	r24, r25
 5b8:	c1 f0       	breq	.+48     	; 0x5ea <DetermineCommandtype+0xea>
		
	}else if(strcmp(command, "NIN")  == 0){	// Ranging Result Notification Message
 5ba:	6e e3       	ldi	r22, 0x3E	; 62
 5bc:	70 e2       	ldi	r23, 0x20	; 32
 5be:	ce 01       	movw	r24, r28
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	e3 d4       	rcall	.+2502   	; 0xf8a <strcmp>
 5c4:	89 2b       	or	r24, r25
 5c6:	89 f0       	breq	.+34     	; 0x5ea <DetermineCommandtype+0xea>
		//printf("NIN\n");
	}else if(strcmp(command, "SDAT") == 0){	// SDAT Notification Messages
 5c8:	62 e4       	ldi	r22, 0x42	; 66
 5ca:	70 e2       	ldi	r23, 0x20	; 32
 5cc:	ce 01       	movw	r24, r28
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	dc d4       	rcall	.+2488   	; 0xf8a <strcmp>
 5d2:	89 2b       	or	r24, r25
 5d4:	51 f0       	breq	.+20     	; 0x5ea <DetermineCommandtype+0xea>
		//printf("SDAT\n");
	}else if(strcmp(command, "AIR")  == 0){	// AIR Notification Message
 5d6:	67 e4       	ldi	r22, 0x47	; 71
 5d8:	70 e2       	ldi	r23, 0x20	; 32
 5da:	ce 01       	movw	r24, r28
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	d5 d4       	rcall	.+2474   	; 0xf8a <strcmp>
 5e0:	89 2b       	or	r24, r25
 5e2:	19 f0       	breq	.+6      	; 0x5ea <DetermineCommandtype+0xea>
		//printf("AIR\n");
	}else{
		DebugPrint("No command\r\n");
 5e4:	8b e4       	ldi	r24, 0x4B	; 75
 5e6:	90 e2       	ldi	r25, 0x20	; 32
 5e8:	e6 d1       	rcall	.+972    	; 0x9b6 <DebugPrint>
	}
}
 5ea:	24 96       	adiw	r28, 0x04	; 4
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	08 95       	ret

000005fe <TranslateMessage>:
 * Translates the received message converts characters
 * to a single string
 * @param  	value	received value
 * @return	message pointer to the translated message
 */
char * TranslateMessage (void){
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	c0 58       	subi	r28, 0x80	; 128
 60c:	d1 09       	sbc	r29, r1
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	de bf       	out	0x3e, r29	; 62
	char value[128];

	memset(globalMessage, EOS, strlen(globalMessage));
 612:	e6 e6       	ldi	r30, 0x66	; 102
 614:	f4 e2       	ldi	r31, 0x24	; 36
 616:	01 90       	ld	r0, Z+
 618:	00 20       	and	r0, r0
 61a:	e9 f7       	brne	.-6      	; 0x616 <TranslateMessage+0x18>
 61c:	31 97       	sbiw	r30, 0x01	; 1
 61e:	af 01       	movw	r20, r30
 620:	46 56       	subi	r20, 0x66	; 102
 622:	54 42       	sbci	r21, 0x24	; 36
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	86 e6       	ldi	r24, 0x66	; 102
 62a:	94 e2       	ldi	r25, 0x24	; 36
 62c:	9c d4       	rcall	.+2360   	; 0xf66 <memset>
	memset(value, EOS, strlen(value));
 62e:	8e 01       	movw	r16, r28
 630:	0f 5f       	subi	r16, 0xFF	; 255
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	f8 01       	movw	r30, r16
 636:	01 90       	ld	r0, Z+
 638:	00 20       	and	r0, r0
 63a:	e9 f7       	brne	.-6      	; 0x636 <TranslateMessage+0x38>
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	af 01       	movw	r20, r30
 640:	40 1b       	sub	r20, r16
 642:	51 0b       	sbc	r21, r17
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	c8 01       	movw	r24, r16
 64a:	8d d4       	rcall	.+2330   	; 0xf66 <memset>

	value[0] = uart_getc(&uartC0);
 64c:	88 e5       	ldi	r24, 0x58	; 88
 64e:	90 e2       	ldi	r25, 0x20	; 32
 650:	21 d0       	rcall	.+66     	; 0x694 <uart_getc>
 652:	89 83       	std	Y+1, r24	; 0x01
	strcpy(globalMessage, value);
 654:	b8 01       	movw	r22, r16
 656:	86 e6       	ldi	r24, 0x66	; 102
 658:	94 e2       	ldi	r25, 0x24	; 36
 65a:	a0 d4       	rcall	.+2368   	; 0xf9c <strcpy>
	while (value[0] != CR){
 65c:	89 81       	ldd	r24, Y+1	; 0x01
 65e:	8d 30       	cpi	r24, 0x0D	; 13
 660:	71 f0       	breq	.+28     	; 0x67e <TranslateMessage+0x80>
		if (value[0] != CR){	
 662:	8d 30       	cpi	r24, 0x0D	; 13
 664:	31 f0       	breq	.+12     	; 0x672 <TranslateMessage+0x74>
			
			strcat(globalMessage, value);	
 666:	be 01       	movw	r22, r28
 668:	6f 5f       	subi	r22, 0xFF	; 255
 66a:	7f 4f       	sbci	r23, 0xFF	; 255
 66c:	86 e6       	ldi	r24, 0x66	; 102
 66e:	94 e2       	ldi	r25, 0x24	; 36
 670:	81 d4       	rcall	.+2306   	; 0xf74 <strcat>
		}
		value[0] = uart_getc(&uartC0);
 672:	88 e5       	ldi	r24, 0x58	; 88
 674:	90 e2       	ldi	r25, 0x20	; 32
 676:	0e d0       	rcall	.+28     	; 0x694 <uart_getc>
 678:	89 83       	std	Y+1, r24	; 0x01
	memset(globalMessage, EOS, strlen(globalMessage));
	memset(value, EOS, strlen(value));

	value[0] = uart_getc(&uartC0);
	strcpy(globalMessage, value);
	while (value[0] != CR){
 67a:	8d 30       	cpi	r24, 0x0D	; 13
 67c:	91 f7       	brne	.-28     	; 0x662 <TranslateMessage+0x64>
			strcat(globalMessage, value);	
		}
		value[0] = uart_getc(&uartC0);
	}
	return globalMessage;
 67e:	86 e6       	ldi	r24, 0x66	; 102
 680:	94 e2       	ldi	r25, 0x24	; 36
 682:	c0 58       	subi	r28, 0x80	; 128
 684:	df 4f       	sbci	r29, 0xFF	; 255
 686:	cd bf       	out	0x3d, r28	; 61
 688:	de bf       	out	0x3e, r29	; 62
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <uart_getc>:
 *
 *  \return received byte from circulair buffer (low byte) or
 *          UART_NO_DATA if buffer is empty
 */
uint16_t uart_getc(USART_data_t *uart)
{
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	ec 01       	movw	r28, r24
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
 69a:	da d1       	rcall	.+948    	; 0xa50 <USART_RXBufferData_Available>
 69c:	88 23       	and	r24, r24
 69e:	49 f0       	breq	.+18     	; 0x6b2 <uart_getc+0x1e>
    return UART_NO_DATA;
}
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
 6a0:	e0 eb       	ldi	r30, 0xB0	; 176
 6a2:	f8 e0       	ldi	r31, 0x08	; 8
 6a4:	81 81       	ldd	r24, Z+1	; 0x01
 6a6:	86 ff       	sbrs	r24, 6
 6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <uart_getc+0x10>
  data = USART_RXBuffer_GetByte(uart);
 6aa:	ce 01       	movw	r24, r28
 6ac:	dc d1       	rcall	.+952    	; 0xa66 <USART_RXBuffer_GetByte>

  return (data & 0x00FF);
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <uart_getc+0x22>
{
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
    return UART_NO_DATA;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 e0       	ldi	r25, 0x01	; 1
/*
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );

return USARTC1.DATA;
*/
}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ec 01       	movw	r28, r24
 6c4:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
 6c6:	8f d1       	rcall	.+798    	; 0x9e6 <USART_TXBuffer_FreeSpace>
 6c8:	88 23       	and	r24, r24
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
 6cc:	61 2f       	mov	r22, r17
 6ce:	ce 01       	movw	r24, r28
 6d0:	96 d1       	rcall	.+812    	; 0x9fe <USART_TXBuffer_PutByte>
  }
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	08 95       	ret

000006da <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
 6e4:	eb 01       	movw	r28, r22
 6e6:	21 96       	adiw	r28, 0x01	; 1
 6e8:	fb 01       	movw	r30, r22
 6ea:	60 81       	ld	r22, Z
 6ec:	66 23       	and	r22, r22
 6ee:	29 f0       	breq	.+10     	; 0x6fa <uart_puts+0x20>
    uart_putc(uart, c);
 6f0:	c8 01       	movw	r24, r16
 6f2:	e4 df       	rcall	.-56     	; 0x6bc <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
 6f4:	69 91       	ld	r22, Y+
 6f6:	61 11       	cpse	r22, r1
 6f8:	fb cf       	rjmp	.-10     	; 0x6f0 <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	08 95       	ret

00000704 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
 704:	80 3a       	cpi	r24, 0xA0	; 160
 706:	28 e0       	ldi	r18, 0x08	; 8
 708:	92 07       	cpc	r25, r18
 70a:	39 f4       	brne	.+14     	; 0x71a <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
 70c:	e0 e4       	ldi	r30, 0x40	; 64
 70e:	f6 e0       	ldi	r31, 0x06	; 6
 710:	88 e0       	ldi	r24, 0x08	; 8
 712:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
 714:	84 e0       	ldi	r24, 0x04	; 4
 716:	82 83       	std	Z+2, r24	; 0x02
     return;
 718:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
 71a:	80 3b       	cpi	r24, 0xB0	; 176
 71c:	28 e0       	ldi	r18, 0x08	; 8
 71e:	92 07       	cpc	r25, r18
 720:	39 f4       	brne	.+14     	; 0x730 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
 722:	e0 e4       	ldi	r30, 0x40	; 64
 724:	f6 e0       	ldi	r31, 0x06	; 6
 726:	80 e8       	ldi	r24, 0x80	; 128
 728:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
 72a:	80 e4       	ldi	r24, 0x40	; 64
 72c:	82 83       	std	Z+2, r24	; 0x02
     return;
 72e:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
 730:	80 3a       	cpi	r24, 0xA0	; 160
 732:	29 e0       	ldi	r18, 0x09	; 9
 734:	92 07       	cpc	r25, r18
 736:	39 f4       	brne	.+14     	; 0x746 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
 738:	e0 e6       	ldi	r30, 0x60	; 96
 73a:	f6 e0       	ldi	r31, 0x06	; 6
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	82 83       	std	Z+2, r24	; 0x02
     return;
 744:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
 746:	80 3b       	cpi	r24, 0xB0	; 176
 748:	29 e0       	ldi	r18, 0x09	; 9
 74a:	92 07       	cpc	r25, r18
 74c:	39 f4       	brne	.+14     	; 0x75c <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
 74e:	e0 e6       	ldi	r30, 0x60	; 96
 750:	f6 e0       	ldi	r31, 0x06	; 6
 752:	80 e8       	ldi	r24, 0x80	; 128
 754:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
 756:	80 e4       	ldi	r24, 0x40	; 64
 758:	82 83       	std	Z+2, r24	; 0x02
     return;
 75a:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
 75c:	80 3a       	cpi	r24, 0xA0	; 160
 75e:	9a 40       	sbci	r25, 0x0A	; 10
 760:	31 f4       	brne	.+12     	; 0x76e <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
 762:	e0 e8       	ldi	r30, 0x80	; 128
 764:	f6 e0       	ldi	r31, 0x06	; 6
 766:	88 e0       	ldi	r24, 0x08	; 8
 768:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	82 83       	std	Z+2, r24	; 0x02
 76e:	08 95       	ret

00000770 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
 770:	4f 92       	push	r4
 772:	5f 92       	push	r5
 774:	6f 92       	push	r6
 776:	7f 92       	push	r7
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	49 01       	movw	r8, r18
 78e:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
 790:	4e 2d       	mov	r20, r14
 792:	41 70       	andi	r20, 0x01	; 1
 794:	20 e1       	ldi	r18, 0x10	; 16
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	79 01       	movw	r14, r18
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <calc_bsel+0x30>
 79c:	f5 94       	asr	r15
 79e:	e7 94       	ror	r14
 7a0:	4a 95       	dec	r20
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <calc_bsel+0x2c>
  if ( scale < 0 ) {
 7a4:	00 23       	and	r16, r16
 7a6:	0c f0       	brlt	.+2      	; 0x7aa <calc_bsel+0x3a>
 7a8:	39 c0       	rjmp	.+114    	; 0x81c <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
 7aa:	a3 d2       	rcall	.+1350   	; 0xcf2 <__floatunsisf>
 7ac:	2b 01       	movw	r4, r22
 7ae:	3c 01       	movw	r6, r24
 7b0:	b7 01       	movw	r22, r14
 7b2:	77 27       	eor	r23, r23
 7b4:	88 27       	eor	r24, r24
 7b6:	77 fd       	sbrc	r23, 7
 7b8:	80 95       	com	r24
 7ba:	98 2f       	mov	r25, r24
 7bc:	9c d2       	rcall	.+1336   	; 0xcf6 <__floatsisf>
 7be:	6b 01       	movw	r12, r22
 7c0:	7c 01       	movw	r14, r24
 7c2:	c5 01       	movw	r24, r10
 7c4:	b4 01       	movw	r22, r8
 7c6:	95 d2       	rcall	.+1322   	; 0xcf2 <__floatunsisf>
 7c8:	9b 01       	movw	r18, r22
 7ca:	ac 01       	movw	r20, r24
 7cc:	c7 01       	movw	r24, r14
 7ce:	b6 01       	movw	r22, r12
 7d0:	1e d3       	rcall	.+1596   	; 0xe0e <__mulsf3>
 7d2:	9b 01       	movw	r18, r22
 7d4:	ac 01       	movw	r20, r24
 7d6:	c3 01       	movw	r24, r6
 7d8:	b2 01       	movw	r22, r4
 7da:	f7 d1       	rcall	.+1006   	; 0xbca <__divsf3>
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	40 e8       	ldi	r20, 0x80	; 128
 7e2:	5f e3       	ldi	r21, 0x3F	; 63
 7e4:	8d d1       	rcall	.+794    	; 0xb00 <__subsf3>
 7e6:	6b 01       	movw	r12, r22
 7e8:	7c 01       	movw	r14, r24
 7ea:	11 27       	eor	r17, r17
 7ec:	01 95       	neg	r16
 7ee:	0c f4       	brge	.+2      	; 0x7f2 <calc_bsel+0x82>
 7f0:	10 95       	com	r17
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <calc_bsel+0x8c>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	0a 95       	dec	r16
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <calc_bsel+0x88>
 800:	88 27       	eor	r24, r24
 802:	77 fd       	sbrc	r23, 7
 804:	80 95       	com	r24
 806:	98 2f       	mov	r25, r24
 808:	76 d2       	rcall	.+1260   	; 0xcf6 <__floatsisf>
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	c7 01       	movw	r24, r14
 810:	b6 01       	movw	r22, r12
 812:	fd d2       	rcall	.+1530   	; 0xe0e <__mulsf3>
 814:	5f d3       	rcall	.+1726   	; 0xed4 <round>
 816:	41 d2       	rcall	.+1154   	; 0xc9a <__fixunssfsi>
 818:	cb 01       	movw	r24, r22
 81a:	34 c0       	rjmp	.+104    	; 0x884 <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
 81c:	6a d2       	rcall	.+1236   	; 0xcf2 <__floatunsisf>
 81e:	2b 01       	movw	r4, r22
 820:	3c 01       	movw	r6, r24
 822:	b7 01       	movw	r22, r14
 824:	77 27       	eor	r23, r23
 826:	88 27       	eor	r24, r24
 828:	77 fd       	sbrc	r23, 7
 82a:	80 95       	com	r24
 82c:	98 2f       	mov	r25, r24
 82e:	63 d2       	rcall	.+1222   	; 0xcf6 <__floatsisf>
 830:	6b 01       	movw	r12, r22
 832:	7c 01       	movw	r14, r24
 834:	c5 01       	movw	r24, r10
 836:	b4 01       	movw	r22, r8
 838:	5c d2       	rcall	.+1208   	; 0xcf2 <__floatunsisf>
 83a:	9b 01       	movw	r18, r22
 83c:	ac 01       	movw	r20, r24
 83e:	c7 01       	movw	r24, r14
 840:	b6 01       	movw	r22, r12
 842:	e5 d2       	rcall	.+1482   	; 0xe0e <__mulsf3>
 844:	9b 01       	movw	r18, r22
 846:	ac 01       	movw	r20, r24
 848:	c3 01       	movw	r24, r6
 84a:	b2 01       	movw	r22, r4
 84c:	be d1       	rcall	.+892    	; 0xbca <__divsf3>
 84e:	4b 01       	movw	r8, r22
 850:	5c 01       	movw	r10, r24
 852:	61 e0       	ldi	r22, 0x01	; 1
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <calc_bsel+0xec>
 858:	66 0f       	add	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	0a 95       	dec	r16
 85e:	e2 f7       	brpl	.-8      	; 0x858 <calc_bsel+0xe8>
 860:	88 27       	eor	r24, r24
 862:	77 fd       	sbrc	r23, 7
 864:	80 95       	com	r24
 866:	98 2f       	mov	r25, r24
 868:	46 d2       	rcall	.+1164   	; 0xcf6 <__floatsisf>
 86a:	9b 01       	movw	r18, r22
 86c:	ac 01       	movw	r20, r24
 86e:	c5 01       	movw	r24, r10
 870:	b4 01       	movw	r22, r8
 872:	ab d1       	rcall	.+854    	; 0xbca <__divsf3>
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	40 e8       	ldi	r20, 0x80	; 128
 87a:	5f e3       	ldi	r21, 0x3F	; 63
 87c:	41 d1       	rcall	.+642    	; 0xb00 <__subsf3>
 87e:	2a d3       	rcall	.+1620   	; 0xed4 <round>
 880:	0c d2       	rcall	.+1048   	; 0xc9a <__fixunssfsi>
 882:	cb 01       	movw	r24, r22
  }
}
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
 890:	bf 90       	pop	r11
 892:	af 90       	pop	r10
 894:	9f 90       	pop	r9
 896:	8f 90       	pop	r8
 898:	7f 90       	pop	r7
 89a:	6f 90       	pop	r6
 89c:	5f 90       	pop	r5
 89e:	4f 90       	pop	r4
 8a0:	08 95       	ret

000008a2 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 8a2:	4f 92       	push	r4
 8a4:	5f 92       	push	r5
 8a6:	6f 92       	push	r6
 8a8:	7f 92       	push	r7
 8aa:	8f 92       	push	r8
 8ac:	9f 92       	push	r9
 8ae:	af 92       	push	r10
 8b0:	bf 92       	push	r11
 8b2:	ef 92       	push	r14
 8b4:	0f 93       	push	r16
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	2b 01       	movw	r4, r22
 8bc:	3c 01       	movw	r6, r24
 8be:	49 01       	movw	r8, r18
 8c0:	5a 01       	movw	r10, r20
 8c2:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 8c4:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
 8c6:	ed 2e       	mov	r14, r29
 8c8:	0c 2f       	mov	r16, r28
 8ca:	a5 01       	movw	r20, r10
 8cc:	94 01       	movw	r18, r8
 8ce:	c3 01       	movw	r24, r6
 8d0:	b2 01       	movw	r22, r4
 8d2:	4e df       	rcall	.-356    	; 0x770 <calc_bsel>
 8d4:	81 15       	cp	r24, r1
 8d6:	90 41       	sbci	r25, 0x10	; 16
 8d8:	18 f0       	brcs	.+6      	; 0x8e0 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 8da:	cf 5f       	subi	r28, 0xFF	; 255
 8dc:	c8 30       	cpi	r28, 0x08	; 8
 8de:	99 f7       	brne	.-26     	; 0x8c6 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
 8e0:	8c 2f       	mov	r24, r28
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	0f 91       	pop	r16
 8e8:	ef 90       	pop	r14
 8ea:	bf 90       	pop	r11
 8ec:	af 90       	pop	r10
 8ee:	9f 90       	pop	r9
 8f0:	8f 90       	pop	r8
 8f2:	7f 90       	pop	r7
 8f4:	6f 90       	pop	r6
 8f6:	5f 90       	pop	r5
 8f8:	4f 90       	pop	r4
 8fa:	08 95       	ret

000008fc <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 8fc:	2f 92       	push	r2
 8fe:	3f 92       	push	r3
 900:	4f 92       	push	r4
 902:	5f 92       	push	r5
 904:	6f 92       	push	r6
 906:	7f 92       	push	r7
 908:	8f 92       	push	r8
 90a:	9f 92       	push	r9
 90c:	af 92       	push	r10
 90e:	bf 92       	push	r11
 910:	cf 92       	push	r12
 912:	ef 92       	push	r14
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	ec 01       	movw	r28, r24
 920:	3b 01       	movw	r6, r22
 922:	49 01       	movw	r8, r18
 924:	5a 01       	movw	r10, r20
 926:	17 01       	movw	r2, r14
 928:	28 01       	movw	r4, r16
 92a:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
 92c:	0c 2d       	mov	r16, r12
 92e:	a2 01       	movw	r20, r4
 930:	91 01       	movw	r18, r2
 932:	c5 01       	movw	r24, r10
 934:	b4 01       	movw	r22, r8
 936:	b5 df       	rcall	.-150    	; 0x8a2 <calc_bscale>
 938:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
 93a:	08 2f       	mov	r16, r24
 93c:	a2 01       	movw	r20, r4
 93e:	91 01       	movw	r18, r2
 940:	c5 01       	movw	r24, r10
 942:	b4 01       	movw	r22, r8
 944:	15 df       	rcall	.-470    	; 0x770 <calc_bsel>
 946:	b8 2e       	mov	r11, r24
 948:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
 94a:	41 e0       	ldi	r20, 0x01	; 1
 94c:	b3 01       	movw	r22, r6
 94e:	ce 01       	movw	r24, r28
 950:	3c d0       	rcall	.+120    	; 0x9ca <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
 952:	e8 81       	ld	r30, Y
 954:	f9 81       	ldd	r31, Y+1	; 0x01
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
 95a:	e8 81       	ld	r30, Y
 95c:	f9 81       	ldd	r31, Y+1	; 0x01
 95e:	84 81       	ldd	r24, Z+4	; 0x04
 960:	80 61       	ori	r24, 0x10	; 16
 962:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
 964:	e8 81       	ld	r30, Y
 966:	f9 81       	ldd	r31, Y+1	; 0x01
 968:	84 81       	ldd	r24, Z+4	; 0x04
 96a:	88 60       	ori	r24, 0x08	; 8
 96c:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
 96e:	e8 81       	ld	r30, Y
 970:	f9 81       	ldd	r31, Y+1	; 0x01
 972:	83 81       	ldd	r24, Z+3	; 0x03
 974:	8f 7c       	andi	r24, 0xCF	; 207
 976:	80 61       	ori	r24, 0x10	; 16
 978:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
 97a:	e8 81       	ld	r30, Y
 97c:	f9 81       	ldd	r31, Y+1	; 0x01
 97e:	b6 82       	std	Z+6, r11	; 0x06
 980:	e8 81       	ld	r30, Y
 982:	f9 81       	ldd	r31, Y+1	; 0x01
 984:	12 95       	swap	r17
 986:	10 7f       	andi	r17, 0xF0	; 240
 988:	e1 2a       	or	r14, r17
 98a:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
 98c:	88 81       	ld	r24, Y
 98e:	99 81       	ldd	r25, Y+1	; 0x01
 990:	b9 de       	rcall	.-654    	; 0x704 <set_usart_txrx_direction>
}
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	ff 90       	pop	r15
 99c:	ef 90       	pop	r14
 99e:	cf 90       	pop	r12
 9a0:	bf 90       	pop	r11
 9a2:	af 90       	pop	r10
 9a4:	9f 90       	pop	r9
 9a6:	8f 90       	pop	r8
 9a8:	7f 90       	pop	r7
 9aa:	6f 90       	pop	r6
 9ac:	5f 90       	pop	r5
 9ae:	4f 90       	pop	r4
 9b0:	3f 90       	pop	r3
 9b2:	2f 90       	pop	r2
 9b4:	08 95       	ret

000009b6 <DebugPrint>:
 * Print a string of information on the UART C1 (DEBUG) interface.
 * @param   *debugData	String of information
 * @param   value		Temporarily string value to add a cariage return and new line feed
 */
void DebugPrint (char *debugData){
	uart_puts(&uartC1, debugData);
 9b6:	bc 01       	movw	r22, r24
 9b8:	8f e5       	ldi	r24, 0x5F	; 95
 9ba:	92 e2       	ldi	r25, 0x22	; 34
 9bc:	8e ce       	rjmp	.-740    	; 0x6da <uart_puts>
 9be:	08 95       	ret

000009c0 <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
 9c0:	bc 01       	movw	r22, r24
 9c2:	88 e5       	ldi	r24, 0x58	; 88
 9c4:	90 e2       	ldi	r25, 0x20	; 32
 9c6:	89 ce       	rjmp	.-750    	; 0x6da <uart_puts>
 9c8:	08 95       	ret

000009ca <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 9ca:	fc 01       	movw	r30, r24
 9cc:	60 83       	st	Z, r22
 9ce:	71 83       	std	Z+1, r23	; 0x01
 9d0:	42 83       	std	Z+2, r20	; 0x02
 9d2:	ec 5f       	subi	r30, 0xFC	; 252
 9d4:	fd 4f       	sbci	r31, 0xFD	; 253
 9d6:	10 82       	st	Z, r1
 9d8:	31 97       	sbiw	r30, 0x01	; 1
 9da:	10 82       	st	Z, r1
 9dc:	33 96       	adiw	r30, 0x03	; 3
 9de:	10 82       	st	Z, r1
 9e0:	31 97       	sbiw	r30, 0x01	; 1
 9e2:	10 82       	st	Z, r1
 9e4:	08 95       	ret

000009e6 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 9e6:	fc 01       	movw	r30, r24
 9e8:	eb 5f       	subi	r30, 0xFB	; 251
 9ea:	fd 4f       	sbci	r31, 0xFD	; 253
 9ec:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 9ee:	31 96       	adiw	r30, 0x01	; 1
 9f0:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	29 13       	cpse	r18, r25
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <USART_TXBuffer_FreeSpace+0x16>
 9fa:	80 e0       	ldi	r24, 0x00	; 0
}
 9fc:	08 95       	ret

000009fe <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 a04:	dc 01       	movw	r26, r24
 a06:	ab 5f       	subi	r26, 0xFB	; 251
 a08:	bd 4f       	sbci	r27, 0xFD	; 253
 a0a:	2c 91       	ld	r18, X
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 a0c:	11 96       	adiw	r26, 0x01	; 1
 a0e:	9c 91       	ld	r25, X
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 a10:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	29 13       	cpse	r18, r25
 a16:	01 c0       	rjmp	.+2      	; 0xa1a <USART_TXBuffer_PutByte+0x1c>
 a18:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
 a1a:	88 23       	and	r24, r24
 a1c:	b1 f0       	breq	.+44     	; 0xa4a <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 a1e:	df 01       	movw	r26, r30
 a20:	ab 5f       	subi	r26, 0xFB	; 251
 a22:	bd 4f       	sbci	r27, 0xFD	; 253
 a24:	9c 91       	ld	r25, X
	  	TXbufPtr->TX[tempTX_Head]= data;
 a26:	ef 01       	movw	r28, r30
 a28:	c9 0f       	add	r28, r25
 a2a:	d1 1d       	adc	r29, r1
 a2c:	cd 5f       	subi	r28, 0xFD	; 253
 a2e:	de 4f       	sbci	r29, 0xFE	; 254
 a30:	68 83       	st	Y, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 a32:	9f 5f       	subi	r25, 0xFF	; 255
 a34:	9c 93       	st	X, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 a36:	a0 81       	ld	r26, Z
 a38:	b1 81       	ldd	r27, Z+1	; 0x01
 a3a:	13 96       	adiw	r26, 0x03	; 3
 a3c:	9c 91       	ld	r25, X
 a3e:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 a40:	9c 7f       	andi	r25, 0xFC	; 252
 a42:	22 81       	ldd	r18, Z+2	; 0x02
 a44:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 a46:	13 96       	adiw	r26, 0x03	; 3
 a48:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	08 95       	ret

00000a50 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 a50:	fc 01       	movw	r30, r24
 a52:	ed 5f       	subi	r30, 0xFD	; 253
 a54:	fd 4f       	sbci	r31, 0xFD	; 253
 a56:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 a58:	31 96       	adiw	r30, 0x01	; 1
 a5a:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	29 13       	cpse	r18, r25
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <USART_RXBufferData_Available+0x14>
 a62:	80 e0       	ldi	r24, 0x00	; 0
}
 a64:	08 95       	ret

00000a66 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 a66:	fc 01       	movw	r30, r24
 a68:	ec 5f       	subi	r30, 0xFC	; 252
 a6a:	fd 4f       	sbci	r31, 0xFD	; 253
 a6c:	20 81       	ld	r18, Z
 a6e:	dc 01       	movw	r26, r24
 a70:	a2 0f       	add	r26, r18
 a72:	b1 1d       	adc	r27, r1
 a74:	13 96       	adiw	r26, 0x03	; 3
 a76:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 a78:	90 81       	ld	r25, Z
 a7a:	9f 5f       	subi	r25, 0xFF	; 255
 a7c:	90 83       	st	Z, r25

	return ans;
}
 a7e:	08 95       	ret

00000a80 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 a80:	fc 01       	movw	r30, r24
 a82:	ed 5f       	subi	r30, 0xFD	; 253
 a84:	fd 4f       	sbci	r31, 0xFD	; 253
 a86:	20 81       	ld	r18, Z
 a88:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 a8a:	31 96       	adiw	r30, 0x01	; 1
 a8c:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
 a8e:	dc 01       	movw	r26, r24
 a90:	ed 91       	ld	r30, X+
 a92:	fc 91       	ld	r31, X
 a94:	11 97       	sbiw	r26, 0x01	; 1
 a96:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
 a98:	23 17       	cp	r18, r19
 a9a:	59 f0       	breq	.+22     	; 0xab2 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 a9c:	fc 01       	movw	r30, r24
 a9e:	ed 5f       	subi	r30, 0xFD	; 253
 aa0:	fd 4f       	sbci	r31, 0xFD	; 253
 aa2:	30 81       	ld	r19, Z
 aa4:	a3 0f       	add	r26, r19
 aa6:	b1 1d       	adc	r27, r1
 aa8:	13 96       	adiw	r26, 0x03	; 3
 aaa:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
 aac:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 ab2:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 ab4:	08 95       	ret

00000ab6 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 aba:	fc 01       	movw	r30, r24
 abc:	ea 5f       	subi	r30, 0xFA	; 250
 abe:	fd 4f       	sbci	r31, 0xFD	; 253
 ac0:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
 ac2:	31 97       	sbiw	r30, 0x01	; 1
 ac4:	30 81       	ld	r19, Z
 ac6:	32 13       	cpse	r19, r18
 ac8:	07 c0       	rjmp	.+14     	; 0xad8 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 aca:	dc 01       	movw	r26, r24
 acc:	ed 91       	ld	r30, X+
 ace:	fc 91       	ld	r31, X
 ad0:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 ad2:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 ad4:	83 83       	std	Z+3, r24	; 0x03
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 ad8:	fc 01       	movw	r30, r24
 ada:	ea 5f       	subi	r30, 0xFA	; 250
 adc:	fd 4f       	sbci	r31, 0xFD	; 253
 ade:	20 81       	ld	r18, Z
 ae0:	dc 01       	movw	r26, r24
 ae2:	a2 0f       	add	r26, r18
 ae4:	b1 1d       	adc	r27, r1
 ae6:	ad 5f       	subi	r26, 0xFD	; 253
 ae8:	be 4f       	sbci	r27, 0xFE	; 254
 aea:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
 aec:	ec 01       	movw	r28, r24
 aee:	a8 81       	ld	r26, Y
 af0:	b9 81       	ldd	r27, Y+1	; 0x01
 af2:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 af4:	80 81       	ld	r24, Z
 af6:	8f 5f       	subi	r24, 0xFF	; 255
 af8:	80 83       	st	Z, r24
	}
}
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	08 95       	ret

00000b00 <__subsf3>:
 b00:	50 58       	subi	r21, 0x80	; 128

00000b02 <__addsf3>:
 b02:	bb 27       	eor	r27, r27
 b04:	aa 27       	eor	r26, r26
 b06:	0e d0       	rcall	.+28     	; 0xb24 <__addsf3x>
 b08:	48 c1       	rjmp	.+656    	; 0xd9a <__fp_round>
 b0a:	39 d1       	rcall	.+626    	; 0xd7e <__fp_pscA>
 b0c:	30 f0       	brcs	.+12     	; 0xb1a <__addsf3+0x18>
 b0e:	3e d1       	rcall	.+636    	; 0xd8c <__fp_pscB>
 b10:	20 f0       	brcs	.+8      	; 0xb1a <__addsf3+0x18>
 b12:	31 f4       	brne	.+12     	; 0xb20 <__addsf3+0x1e>
 b14:	9f 3f       	cpi	r25, 0xFF	; 255
 b16:	11 f4       	brne	.+4      	; 0xb1c <__addsf3+0x1a>
 b18:	1e f4       	brtc	.+6      	; 0xb20 <__addsf3+0x1e>
 b1a:	2e c1       	rjmp	.+604    	; 0xd78 <__fp_nan>
 b1c:	0e f4       	brtc	.+2      	; 0xb20 <__addsf3+0x1e>
 b1e:	e0 95       	com	r30
 b20:	e7 fb       	bst	r30, 7
 b22:	24 c1       	rjmp	.+584    	; 0xd6c <__fp_inf>

00000b24 <__addsf3x>:
 b24:	e9 2f       	mov	r30, r25
 b26:	4a d1       	rcall	.+660    	; 0xdbc <__fp_split3>
 b28:	80 f3       	brcs	.-32     	; 0xb0a <__addsf3+0x8>
 b2a:	ba 17       	cp	r27, r26
 b2c:	62 07       	cpc	r22, r18
 b2e:	73 07       	cpc	r23, r19
 b30:	84 07       	cpc	r24, r20
 b32:	95 07       	cpc	r25, r21
 b34:	18 f0       	brcs	.+6      	; 0xb3c <__addsf3x+0x18>
 b36:	71 f4       	brne	.+28     	; 0xb54 <__addsf3x+0x30>
 b38:	9e f5       	brtc	.+102    	; 0xba0 <__addsf3x+0x7c>
 b3a:	62 c1       	rjmp	.+708    	; 0xe00 <__fp_zero>
 b3c:	0e f4       	brtc	.+2      	; 0xb40 <__addsf3x+0x1c>
 b3e:	e0 95       	com	r30
 b40:	0b 2e       	mov	r0, r27
 b42:	ba 2f       	mov	r27, r26
 b44:	a0 2d       	mov	r26, r0
 b46:	0b 01       	movw	r0, r22
 b48:	b9 01       	movw	r22, r18
 b4a:	90 01       	movw	r18, r0
 b4c:	0c 01       	movw	r0, r24
 b4e:	ca 01       	movw	r24, r20
 b50:	a0 01       	movw	r20, r0
 b52:	11 24       	eor	r1, r1
 b54:	ff 27       	eor	r31, r31
 b56:	59 1b       	sub	r21, r25
 b58:	99 f0       	breq	.+38     	; 0xb80 <__addsf3x+0x5c>
 b5a:	59 3f       	cpi	r21, 0xF9	; 249
 b5c:	50 f4       	brcc	.+20     	; 0xb72 <__addsf3x+0x4e>
 b5e:	50 3e       	cpi	r21, 0xE0	; 224
 b60:	68 f1       	brcs	.+90     	; 0xbbc <__addsf3x+0x98>
 b62:	1a 16       	cp	r1, r26
 b64:	f0 40       	sbci	r31, 0x00	; 0
 b66:	a2 2f       	mov	r26, r18
 b68:	23 2f       	mov	r18, r19
 b6a:	34 2f       	mov	r19, r20
 b6c:	44 27       	eor	r20, r20
 b6e:	58 5f       	subi	r21, 0xF8	; 248
 b70:	f3 cf       	rjmp	.-26     	; 0xb58 <__addsf3x+0x34>
 b72:	46 95       	lsr	r20
 b74:	37 95       	ror	r19
 b76:	27 95       	ror	r18
 b78:	a7 95       	ror	r26
 b7a:	f0 40       	sbci	r31, 0x00	; 0
 b7c:	53 95       	inc	r21
 b7e:	c9 f7       	brne	.-14     	; 0xb72 <__addsf3x+0x4e>
 b80:	7e f4       	brtc	.+30     	; 0xba0 <__addsf3x+0x7c>
 b82:	1f 16       	cp	r1, r31
 b84:	ba 0b       	sbc	r27, r26
 b86:	62 0b       	sbc	r22, r18
 b88:	73 0b       	sbc	r23, r19
 b8a:	84 0b       	sbc	r24, r20
 b8c:	ba f0       	brmi	.+46     	; 0xbbc <__addsf3x+0x98>
 b8e:	91 50       	subi	r25, 0x01	; 1
 b90:	a1 f0       	breq	.+40     	; 0xbba <__addsf3x+0x96>
 b92:	ff 0f       	add	r31, r31
 b94:	bb 1f       	adc	r27, r27
 b96:	66 1f       	adc	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	c2 f7       	brpl	.-16     	; 0xb8e <__addsf3x+0x6a>
 b9e:	0e c0       	rjmp	.+28     	; 0xbbc <__addsf3x+0x98>
 ba0:	ba 0f       	add	r27, r26
 ba2:	62 1f       	adc	r22, r18
 ba4:	73 1f       	adc	r23, r19
 ba6:	84 1f       	adc	r24, r20
 ba8:	48 f4       	brcc	.+18     	; 0xbbc <__addsf3x+0x98>
 baa:	87 95       	ror	r24
 bac:	77 95       	ror	r23
 bae:	67 95       	ror	r22
 bb0:	b7 95       	ror	r27
 bb2:	f7 95       	ror	r31
 bb4:	9e 3f       	cpi	r25, 0xFE	; 254
 bb6:	08 f0       	brcs	.+2      	; 0xbba <__addsf3x+0x96>
 bb8:	b3 cf       	rjmp	.-154    	; 0xb20 <__addsf3+0x1e>
 bba:	93 95       	inc	r25
 bbc:	88 0f       	add	r24, r24
 bbe:	08 f0       	brcs	.+2      	; 0xbc2 <__addsf3x+0x9e>
 bc0:	99 27       	eor	r25, r25
 bc2:	ee 0f       	add	r30, r30
 bc4:	97 95       	ror	r25
 bc6:	87 95       	ror	r24
 bc8:	08 95       	ret

00000bca <__divsf3>:
 bca:	0c d0       	rcall	.+24     	; 0xbe4 <__divsf3x>
 bcc:	e6 c0       	rjmp	.+460    	; 0xd9a <__fp_round>
 bce:	de d0       	rcall	.+444    	; 0xd8c <__fp_pscB>
 bd0:	40 f0       	brcs	.+16     	; 0xbe2 <__divsf3+0x18>
 bd2:	d5 d0       	rcall	.+426    	; 0xd7e <__fp_pscA>
 bd4:	30 f0       	brcs	.+12     	; 0xbe2 <__divsf3+0x18>
 bd6:	21 f4       	brne	.+8      	; 0xbe0 <__divsf3+0x16>
 bd8:	5f 3f       	cpi	r21, 0xFF	; 255
 bda:	19 f0       	breq	.+6      	; 0xbe2 <__divsf3+0x18>
 bdc:	c7 c0       	rjmp	.+398    	; 0xd6c <__fp_inf>
 bde:	51 11       	cpse	r21, r1
 be0:	10 c1       	rjmp	.+544    	; 0xe02 <__fp_szero>
 be2:	ca c0       	rjmp	.+404    	; 0xd78 <__fp_nan>

00000be4 <__divsf3x>:
 be4:	eb d0       	rcall	.+470    	; 0xdbc <__fp_split3>
 be6:	98 f3       	brcs	.-26     	; 0xbce <__divsf3+0x4>

00000be8 <__divsf3_pse>:
 be8:	99 23       	and	r25, r25
 bea:	c9 f3       	breq	.-14     	; 0xbde <__divsf3+0x14>
 bec:	55 23       	and	r21, r21
 bee:	b1 f3       	breq	.-20     	; 0xbdc <__divsf3+0x12>
 bf0:	95 1b       	sub	r25, r21
 bf2:	55 0b       	sbc	r21, r21
 bf4:	bb 27       	eor	r27, r27
 bf6:	aa 27       	eor	r26, r26
 bf8:	62 17       	cp	r22, r18
 bfa:	73 07       	cpc	r23, r19
 bfc:	84 07       	cpc	r24, r20
 bfe:	38 f0       	brcs	.+14     	; 0xc0e <__divsf3_pse+0x26>
 c00:	9f 5f       	subi	r25, 0xFF	; 255
 c02:	5f 4f       	sbci	r21, 0xFF	; 255
 c04:	22 0f       	add	r18, r18
 c06:	33 1f       	adc	r19, r19
 c08:	44 1f       	adc	r20, r20
 c0a:	aa 1f       	adc	r26, r26
 c0c:	a9 f3       	breq	.-22     	; 0xbf8 <__divsf3_pse+0x10>
 c0e:	33 d0       	rcall	.+102    	; 0xc76 <__divsf3_pse+0x8e>
 c10:	0e 2e       	mov	r0, r30
 c12:	3a f0       	brmi	.+14     	; 0xc22 <__divsf3_pse+0x3a>
 c14:	e0 e8       	ldi	r30, 0x80	; 128
 c16:	30 d0       	rcall	.+96     	; 0xc78 <__divsf3_pse+0x90>
 c18:	91 50       	subi	r25, 0x01	; 1
 c1a:	50 40       	sbci	r21, 0x00	; 0
 c1c:	e6 95       	lsr	r30
 c1e:	00 1c       	adc	r0, r0
 c20:	ca f7       	brpl	.-14     	; 0xc14 <__divsf3_pse+0x2c>
 c22:	29 d0       	rcall	.+82     	; 0xc76 <__divsf3_pse+0x8e>
 c24:	fe 2f       	mov	r31, r30
 c26:	27 d0       	rcall	.+78     	; 0xc76 <__divsf3_pse+0x8e>
 c28:	66 0f       	add	r22, r22
 c2a:	77 1f       	adc	r23, r23
 c2c:	88 1f       	adc	r24, r24
 c2e:	bb 1f       	adc	r27, r27
 c30:	26 17       	cp	r18, r22
 c32:	37 07       	cpc	r19, r23
 c34:	48 07       	cpc	r20, r24
 c36:	ab 07       	cpc	r26, r27
 c38:	b0 e8       	ldi	r27, 0x80	; 128
 c3a:	09 f0       	breq	.+2      	; 0xc3e <__divsf3_pse+0x56>
 c3c:	bb 0b       	sbc	r27, r27
 c3e:	80 2d       	mov	r24, r0
 c40:	bf 01       	movw	r22, r30
 c42:	ff 27       	eor	r31, r31
 c44:	93 58       	subi	r25, 0x83	; 131
 c46:	5f 4f       	sbci	r21, 0xFF	; 255
 c48:	2a f0       	brmi	.+10     	; 0xc54 <__divsf3_pse+0x6c>
 c4a:	9e 3f       	cpi	r25, 0xFE	; 254
 c4c:	51 05       	cpc	r21, r1
 c4e:	68 f0       	brcs	.+26     	; 0xc6a <__divsf3_pse+0x82>
 c50:	8d c0       	rjmp	.+282    	; 0xd6c <__fp_inf>
 c52:	d7 c0       	rjmp	.+430    	; 0xe02 <__fp_szero>
 c54:	5f 3f       	cpi	r21, 0xFF	; 255
 c56:	ec f3       	brlt	.-6      	; 0xc52 <__divsf3_pse+0x6a>
 c58:	98 3e       	cpi	r25, 0xE8	; 232
 c5a:	dc f3       	brlt	.-10     	; 0xc52 <__divsf3_pse+0x6a>
 c5c:	86 95       	lsr	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	b7 95       	ror	r27
 c64:	f7 95       	ror	r31
 c66:	9f 5f       	subi	r25, 0xFF	; 255
 c68:	c9 f7       	brne	.-14     	; 0xc5c <__divsf3_pse+0x74>
 c6a:	88 0f       	add	r24, r24
 c6c:	91 1d       	adc	r25, r1
 c6e:	96 95       	lsr	r25
 c70:	87 95       	ror	r24
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret
 c76:	e1 e0       	ldi	r30, 0x01	; 1
 c78:	66 0f       	add	r22, r22
 c7a:	77 1f       	adc	r23, r23
 c7c:	88 1f       	adc	r24, r24
 c7e:	bb 1f       	adc	r27, r27
 c80:	62 17       	cp	r22, r18
 c82:	73 07       	cpc	r23, r19
 c84:	84 07       	cpc	r24, r20
 c86:	ba 07       	cpc	r27, r26
 c88:	20 f0       	brcs	.+8      	; 0xc92 <__divsf3_pse+0xaa>
 c8a:	62 1b       	sub	r22, r18
 c8c:	73 0b       	sbc	r23, r19
 c8e:	84 0b       	sbc	r24, r20
 c90:	ba 0b       	sbc	r27, r26
 c92:	ee 1f       	adc	r30, r30
 c94:	88 f7       	brcc	.-30     	; 0xc78 <__divsf3_pse+0x90>
 c96:	e0 95       	com	r30
 c98:	08 95       	ret

00000c9a <__fixunssfsi>:
 c9a:	98 d0       	rcall	.+304    	; 0xdcc <__fp_splitA>
 c9c:	88 f0       	brcs	.+34     	; 0xcc0 <__fixunssfsi+0x26>
 c9e:	9f 57       	subi	r25, 0x7F	; 127
 ca0:	90 f0       	brcs	.+36     	; 0xcc6 <__fixunssfsi+0x2c>
 ca2:	b9 2f       	mov	r27, r25
 ca4:	99 27       	eor	r25, r25
 ca6:	b7 51       	subi	r27, 0x17	; 23
 ca8:	a0 f0       	brcs	.+40     	; 0xcd2 <__fixunssfsi+0x38>
 caa:	d1 f0       	breq	.+52     	; 0xce0 <__fixunssfsi+0x46>
 cac:	66 0f       	add	r22, r22
 cae:	77 1f       	adc	r23, r23
 cb0:	88 1f       	adc	r24, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	1a f0       	brmi	.+6      	; 0xcbc <__fixunssfsi+0x22>
 cb6:	ba 95       	dec	r27
 cb8:	c9 f7       	brne	.-14     	; 0xcac <__fixunssfsi+0x12>
 cba:	12 c0       	rjmp	.+36     	; 0xce0 <__fixunssfsi+0x46>
 cbc:	b1 30       	cpi	r27, 0x01	; 1
 cbe:	81 f0       	breq	.+32     	; 0xce0 <__fixunssfsi+0x46>
 cc0:	9f d0       	rcall	.+318    	; 0xe00 <__fp_zero>
 cc2:	b1 e0       	ldi	r27, 0x01	; 1
 cc4:	08 95       	ret
 cc6:	9c c0       	rjmp	.+312    	; 0xe00 <__fp_zero>
 cc8:	67 2f       	mov	r22, r23
 cca:	78 2f       	mov	r23, r24
 ccc:	88 27       	eor	r24, r24
 cce:	b8 5f       	subi	r27, 0xF8	; 248
 cd0:	39 f0       	breq	.+14     	; 0xce0 <__fixunssfsi+0x46>
 cd2:	b9 3f       	cpi	r27, 0xF9	; 249
 cd4:	cc f3       	brlt	.-14     	; 0xcc8 <__fixunssfsi+0x2e>
 cd6:	86 95       	lsr	r24
 cd8:	77 95       	ror	r23
 cda:	67 95       	ror	r22
 cdc:	b3 95       	inc	r27
 cde:	d9 f7       	brne	.-10     	; 0xcd6 <__fixunssfsi+0x3c>
 ce0:	3e f4       	brtc	.+14     	; 0xcf0 <__fixunssfsi+0x56>
 ce2:	90 95       	com	r25
 ce4:	80 95       	com	r24
 ce6:	70 95       	com	r23
 ce8:	61 95       	neg	r22
 cea:	7f 4f       	sbci	r23, 0xFF	; 255
 cec:	8f 4f       	sbci	r24, 0xFF	; 255
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	08 95       	ret

00000cf2 <__floatunsisf>:
 cf2:	e8 94       	clt
 cf4:	09 c0       	rjmp	.+18     	; 0xd08 <__floatsisf+0x12>

00000cf6 <__floatsisf>:
 cf6:	97 fb       	bst	r25, 7
 cf8:	3e f4       	brtc	.+14     	; 0xd08 <__floatsisf+0x12>
 cfa:	90 95       	com	r25
 cfc:	80 95       	com	r24
 cfe:	70 95       	com	r23
 d00:	61 95       	neg	r22
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	8f 4f       	sbci	r24, 0xFF	; 255
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	99 23       	and	r25, r25
 d0a:	a9 f0       	breq	.+42     	; 0xd36 <__floatsisf+0x40>
 d0c:	f9 2f       	mov	r31, r25
 d0e:	96 e9       	ldi	r25, 0x96	; 150
 d10:	bb 27       	eor	r27, r27
 d12:	93 95       	inc	r25
 d14:	f6 95       	lsr	r31
 d16:	87 95       	ror	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	b7 95       	ror	r27
 d1e:	f1 11       	cpse	r31, r1
 d20:	f8 cf       	rjmp	.-16     	; 0xd12 <__floatsisf+0x1c>
 d22:	fa f4       	brpl	.+62     	; 0xd62 <__floatsisf+0x6c>
 d24:	bb 0f       	add	r27, r27
 d26:	11 f4       	brne	.+4      	; 0xd2c <__floatsisf+0x36>
 d28:	60 ff       	sbrs	r22, 0
 d2a:	1b c0       	rjmp	.+54     	; 0xd62 <__floatsisf+0x6c>
 d2c:	6f 5f       	subi	r22, 0xFF	; 255
 d2e:	7f 4f       	sbci	r23, 0xFF	; 255
 d30:	8f 4f       	sbci	r24, 0xFF	; 255
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	16 c0       	rjmp	.+44     	; 0xd62 <__floatsisf+0x6c>
 d36:	88 23       	and	r24, r24
 d38:	11 f0       	breq	.+4      	; 0xd3e <__floatsisf+0x48>
 d3a:	96 e9       	ldi	r25, 0x96	; 150
 d3c:	11 c0       	rjmp	.+34     	; 0xd60 <__floatsisf+0x6a>
 d3e:	77 23       	and	r23, r23
 d40:	21 f0       	breq	.+8      	; 0xd4a <__floatsisf+0x54>
 d42:	9e e8       	ldi	r25, 0x8E	; 142
 d44:	87 2f       	mov	r24, r23
 d46:	76 2f       	mov	r23, r22
 d48:	05 c0       	rjmp	.+10     	; 0xd54 <__floatsisf+0x5e>
 d4a:	66 23       	and	r22, r22
 d4c:	71 f0       	breq	.+28     	; 0xd6a <__floatsisf+0x74>
 d4e:	96 e8       	ldi	r25, 0x86	; 134
 d50:	86 2f       	mov	r24, r22
 d52:	70 e0       	ldi	r23, 0x00	; 0
 d54:	60 e0       	ldi	r22, 0x00	; 0
 d56:	2a f0       	brmi	.+10     	; 0xd62 <__floatsisf+0x6c>
 d58:	9a 95       	dec	r25
 d5a:	66 0f       	add	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	da f7       	brpl	.-10     	; 0xd58 <__floatsisf+0x62>
 d62:	88 0f       	add	r24, r24
 d64:	96 95       	lsr	r25
 d66:	87 95       	ror	r24
 d68:	97 f9       	bld	r25, 7
 d6a:	08 95       	ret

00000d6c <__fp_inf>:
 d6c:	97 f9       	bld	r25, 7
 d6e:	9f 67       	ori	r25, 0x7F	; 127
 d70:	80 e8       	ldi	r24, 0x80	; 128
 d72:	70 e0       	ldi	r23, 0x00	; 0
 d74:	60 e0       	ldi	r22, 0x00	; 0
 d76:	08 95       	ret

00000d78 <__fp_nan>:
 d78:	9f ef       	ldi	r25, 0xFF	; 255
 d7a:	80 ec       	ldi	r24, 0xC0	; 192
 d7c:	08 95       	ret

00000d7e <__fp_pscA>:
 d7e:	00 24       	eor	r0, r0
 d80:	0a 94       	dec	r0
 d82:	16 16       	cp	r1, r22
 d84:	17 06       	cpc	r1, r23
 d86:	18 06       	cpc	r1, r24
 d88:	09 06       	cpc	r0, r25
 d8a:	08 95       	ret

00000d8c <__fp_pscB>:
 d8c:	00 24       	eor	r0, r0
 d8e:	0a 94       	dec	r0
 d90:	12 16       	cp	r1, r18
 d92:	13 06       	cpc	r1, r19
 d94:	14 06       	cpc	r1, r20
 d96:	05 06       	cpc	r0, r21
 d98:	08 95       	ret

00000d9a <__fp_round>:
 d9a:	09 2e       	mov	r0, r25
 d9c:	03 94       	inc	r0
 d9e:	00 0c       	add	r0, r0
 da0:	11 f4       	brne	.+4      	; 0xda6 <__fp_round+0xc>
 da2:	88 23       	and	r24, r24
 da4:	52 f0       	brmi	.+20     	; 0xdba <__fp_round+0x20>
 da6:	bb 0f       	add	r27, r27
 da8:	40 f4       	brcc	.+16     	; 0xdba <__fp_round+0x20>
 daa:	bf 2b       	or	r27, r31
 dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0x18>
 dae:	60 ff       	sbrs	r22, 0
 db0:	04 c0       	rjmp	.+8      	; 0xdba <__fp_round+0x20>
 db2:	6f 5f       	subi	r22, 0xFF	; 255
 db4:	7f 4f       	sbci	r23, 0xFF	; 255
 db6:	8f 4f       	sbci	r24, 0xFF	; 255
 db8:	9f 4f       	sbci	r25, 0xFF	; 255
 dba:	08 95       	ret

00000dbc <__fp_split3>:
 dbc:	57 fd       	sbrc	r21, 7
 dbe:	90 58       	subi	r25, 0x80	; 128
 dc0:	44 0f       	add	r20, r20
 dc2:	55 1f       	adc	r21, r21
 dc4:	59 f0       	breq	.+22     	; 0xddc <__fp_splitA+0x10>
 dc6:	5f 3f       	cpi	r21, 0xFF	; 255
 dc8:	71 f0       	breq	.+28     	; 0xde6 <__fp_splitA+0x1a>
 dca:	47 95       	ror	r20

00000dcc <__fp_splitA>:
 dcc:	88 0f       	add	r24, r24
 dce:	97 fb       	bst	r25, 7
 dd0:	99 1f       	adc	r25, r25
 dd2:	61 f0       	breq	.+24     	; 0xdec <__fp_splitA+0x20>
 dd4:	9f 3f       	cpi	r25, 0xFF	; 255
 dd6:	79 f0       	breq	.+30     	; 0xdf6 <__fp_splitA+0x2a>
 dd8:	87 95       	ror	r24
 dda:	08 95       	ret
 ddc:	12 16       	cp	r1, r18
 dde:	13 06       	cpc	r1, r19
 de0:	14 06       	cpc	r1, r20
 de2:	55 1f       	adc	r21, r21
 de4:	f2 cf       	rjmp	.-28     	; 0xdca <__fp_split3+0xe>
 de6:	46 95       	lsr	r20
 de8:	f1 df       	rcall	.-30     	; 0xdcc <__fp_splitA>
 dea:	08 c0       	rjmp	.+16     	; 0xdfc <__fp_splitA+0x30>
 dec:	16 16       	cp	r1, r22
 dee:	17 06       	cpc	r1, r23
 df0:	18 06       	cpc	r1, r24
 df2:	99 1f       	adc	r25, r25
 df4:	f1 cf       	rjmp	.-30     	; 0xdd8 <__fp_splitA+0xc>
 df6:	86 95       	lsr	r24
 df8:	71 05       	cpc	r23, r1
 dfa:	61 05       	cpc	r22, r1
 dfc:	08 94       	sec
 dfe:	08 95       	ret

00000e00 <__fp_zero>:
 e00:	e8 94       	clt

00000e02 <__fp_szero>:
 e02:	bb 27       	eor	r27, r27
 e04:	66 27       	eor	r22, r22
 e06:	77 27       	eor	r23, r23
 e08:	cb 01       	movw	r24, r22
 e0a:	97 f9       	bld	r25, 7
 e0c:	08 95       	ret

00000e0e <__mulsf3>:
 e0e:	0b d0       	rcall	.+22     	; 0xe26 <__mulsf3x>
 e10:	c4 cf       	rjmp	.-120    	; 0xd9a <__fp_round>
 e12:	b5 df       	rcall	.-150    	; 0xd7e <__fp_pscA>
 e14:	28 f0       	brcs	.+10     	; 0xe20 <__mulsf3+0x12>
 e16:	ba df       	rcall	.-140    	; 0xd8c <__fp_pscB>
 e18:	18 f0       	brcs	.+6      	; 0xe20 <__mulsf3+0x12>
 e1a:	95 23       	and	r25, r21
 e1c:	09 f0       	breq	.+2      	; 0xe20 <__mulsf3+0x12>
 e1e:	a6 cf       	rjmp	.-180    	; 0xd6c <__fp_inf>
 e20:	ab cf       	rjmp	.-170    	; 0xd78 <__fp_nan>
 e22:	11 24       	eor	r1, r1
 e24:	ee cf       	rjmp	.-36     	; 0xe02 <__fp_szero>

00000e26 <__mulsf3x>:
 e26:	ca df       	rcall	.-108    	; 0xdbc <__fp_split3>
 e28:	a0 f3       	brcs	.-24     	; 0xe12 <__mulsf3+0x4>

00000e2a <__mulsf3_pse>:
 e2a:	95 9f       	mul	r25, r21
 e2c:	d1 f3       	breq	.-12     	; 0xe22 <__mulsf3+0x14>
 e2e:	95 0f       	add	r25, r21
 e30:	50 e0       	ldi	r21, 0x00	; 0
 e32:	55 1f       	adc	r21, r21
 e34:	62 9f       	mul	r22, r18
 e36:	f0 01       	movw	r30, r0
 e38:	72 9f       	mul	r23, r18
 e3a:	bb 27       	eor	r27, r27
 e3c:	f0 0d       	add	r31, r0
 e3e:	b1 1d       	adc	r27, r1
 e40:	63 9f       	mul	r22, r19
 e42:	aa 27       	eor	r26, r26
 e44:	f0 0d       	add	r31, r0
 e46:	b1 1d       	adc	r27, r1
 e48:	aa 1f       	adc	r26, r26
 e4a:	64 9f       	mul	r22, r20
 e4c:	66 27       	eor	r22, r22
 e4e:	b0 0d       	add	r27, r0
 e50:	a1 1d       	adc	r26, r1
 e52:	66 1f       	adc	r22, r22
 e54:	82 9f       	mul	r24, r18
 e56:	22 27       	eor	r18, r18
 e58:	b0 0d       	add	r27, r0
 e5a:	a1 1d       	adc	r26, r1
 e5c:	62 1f       	adc	r22, r18
 e5e:	73 9f       	mul	r23, r19
 e60:	b0 0d       	add	r27, r0
 e62:	a1 1d       	adc	r26, r1
 e64:	62 1f       	adc	r22, r18
 e66:	83 9f       	mul	r24, r19
 e68:	a0 0d       	add	r26, r0
 e6a:	61 1d       	adc	r22, r1
 e6c:	22 1f       	adc	r18, r18
 e6e:	74 9f       	mul	r23, r20
 e70:	33 27       	eor	r19, r19
 e72:	a0 0d       	add	r26, r0
 e74:	61 1d       	adc	r22, r1
 e76:	23 1f       	adc	r18, r19
 e78:	84 9f       	mul	r24, r20
 e7a:	60 0d       	add	r22, r0
 e7c:	21 1d       	adc	r18, r1
 e7e:	82 2f       	mov	r24, r18
 e80:	76 2f       	mov	r23, r22
 e82:	6a 2f       	mov	r22, r26
 e84:	11 24       	eor	r1, r1
 e86:	9f 57       	subi	r25, 0x7F	; 127
 e88:	50 40       	sbci	r21, 0x00	; 0
 e8a:	8a f0       	brmi	.+34     	; 0xeae <__mulsf3_pse+0x84>
 e8c:	e1 f0       	breq	.+56     	; 0xec6 <__mulsf3_pse+0x9c>
 e8e:	88 23       	and	r24, r24
 e90:	4a f0       	brmi	.+18     	; 0xea4 <__mulsf3_pse+0x7a>
 e92:	ee 0f       	add	r30, r30
 e94:	ff 1f       	adc	r31, r31
 e96:	bb 1f       	adc	r27, r27
 e98:	66 1f       	adc	r22, r22
 e9a:	77 1f       	adc	r23, r23
 e9c:	88 1f       	adc	r24, r24
 e9e:	91 50       	subi	r25, 0x01	; 1
 ea0:	50 40       	sbci	r21, 0x00	; 0
 ea2:	a9 f7       	brne	.-22     	; 0xe8e <__mulsf3_pse+0x64>
 ea4:	9e 3f       	cpi	r25, 0xFE	; 254
 ea6:	51 05       	cpc	r21, r1
 ea8:	70 f0       	brcs	.+28     	; 0xec6 <__mulsf3_pse+0x9c>
 eaa:	60 cf       	rjmp	.-320    	; 0xd6c <__fp_inf>
 eac:	aa cf       	rjmp	.-172    	; 0xe02 <__fp_szero>
 eae:	5f 3f       	cpi	r21, 0xFF	; 255
 eb0:	ec f3       	brlt	.-6      	; 0xeac <__mulsf3_pse+0x82>
 eb2:	98 3e       	cpi	r25, 0xE8	; 232
 eb4:	dc f3       	brlt	.-10     	; 0xeac <__mulsf3_pse+0x82>
 eb6:	86 95       	lsr	r24
 eb8:	77 95       	ror	r23
 eba:	67 95       	ror	r22
 ebc:	b7 95       	ror	r27
 ebe:	f7 95       	ror	r31
 ec0:	e7 95       	ror	r30
 ec2:	9f 5f       	subi	r25, 0xFF	; 255
 ec4:	c1 f7       	brne	.-16     	; 0xeb6 <__mulsf3_pse+0x8c>
 ec6:	fe 2b       	or	r31, r30
 ec8:	88 0f       	add	r24, r24
 eca:	91 1d       	adc	r25, r1
 ecc:	96 95       	lsr	r25
 ece:	87 95       	ror	r24
 ed0:	97 f9       	bld	r25, 7
 ed2:	08 95       	ret

00000ed4 <round>:
 ed4:	7b df       	rcall	.-266    	; 0xdcc <__fp_splitA>
 ed6:	e0 f0       	brcs	.+56     	; 0xf10 <round+0x3c>
 ed8:	9e 37       	cpi	r25, 0x7E	; 126
 eda:	d8 f0       	brcs	.+54     	; 0xf12 <round+0x3e>
 edc:	96 39       	cpi	r25, 0x96	; 150
 ede:	b8 f4       	brcc	.+46     	; 0xf0e <round+0x3a>
 ee0:	9e 38       	cpi	r25, 0x8E	; 142
 ee2:	48 f4       	brcc	.+18     	; 0xef6 <round+0x22>
 ee4:	67 2f       	mov	r22, r23
 ee6:	78 2f       	mov	r23, r24
 ee8:	88 27       	eor	r24, r24
 eea:	98 5f       	subi	r25, 0xF8	; 248
 eec:	f9 cf       	rjmp	.-14     	; 0xee0 <round+0xc>
 eee:	86 95       	lsr	r24
 ef0:	77 95       	ror	r23
 ef2:	67 95       	ror	r22
 ef4:	93 95       	inc	r25
 ef6:	95 39       	cpi	r25, 0x95	; 149
 ef8:	d0 f3       	brcs	.-12     	; 0xeee <round+0x1a>
 efa:	b6 2f       	mov	r27, r22
 efc:	b1 70       	andi	r27, 0x01	; 1
 efe:	6b 0f       	add	r22, r27
 f00:	71 1d       	adc	r23, r1
 f02:	81 1d       	adc	r24, r1
 f04:	20 f4       	brcc	.+8      	; 0xf0e <round+0x3a>
 f06:	87 95       	ror	r24
 f08:	77 95       	ror	r23
 f0a:	67 95       	ror	r22
 f0c:	93 95       	inc	r25
 f0e:	02 c0       	rjmp	.+4      	; 0xf14 <__fp_mintl>
 f10:	1c c0       	rjmp	.+56     	; 0xf4a <__fp_mpack>
 f12:	77 cf       	rjmp	.-274    	; 0xe02 <__fp_szero>

00000f14 <__fp_mintl>:
 f14:	88 23       	and	r24, r24
 f16:	71 f4       	brne	.+28     	; 0xf34 <__fp_mintl+0x20>
 f18:	77 23       	and	r23, r23
 f1a:	21 f0       	breq	.+8      	; 0xf24 <__fp_mintl+0x10>
 f1c:	98 50       	subi	r25, 0x08	; 8
 f1e:	87 2b       	or	r24, r23
 f20:	76 2f       	mov	r23, r22
 f22:	07 c0       	rjmp	.+14     	; 0xf32 <__fp_mintl+0x1e>
 f24:	66 23       	and	r22, r22
 f26:	11 f4       	brne	.+4      	; 0xf2c <__fp_mintl+0x18>
 f28:	99 27       	eor	r25, r25
 f2a:	0d c0       	rjmp	.+26     	; 0xf46 <__fp_mintl+0x32>
 f2c:	90 51       	subi	r25, 0x10	; 16
 f2e:	86 2b       	or	r24, r22
 f30:	70 e0       	ldi	r23, 0x00	; 0
 f32:	60 e0       	ldi	r22, 0x00	; 0
 f34:	2a f0       	brmi	.+10     	; 0xf40 <__fp_mintl+0x2c>
 f36:	9a 95       	dec	r25
 f38:	66 0f       	add	r22, r22
 f3a:	77 1f       	adc	r23, r23
 f3c:	88 1f       	adc	r24, r24
 f3e:	da f7       	brpl	.-10     	; 0xf36 <__fp_mintl+0x22>
 f40:	88 0f       	add	r24, r24
 f42:	96 95       	lsr	r25
 f44:	87 95       	ror	r24
 f46:	97 f9       	bld	r25, 7
 f48:	08 95       	ret

00000f4a <__fp_mpack>:
 f4a:	9f 3f       	cpi	r25, 0xFF	; 255
 f4c:	31 f0       	breq	.+12     	; 0xf5a <__fp_mpack_finite+0xc>

00000f4e <__fp_mpack_finite>:
 f4e:	91 50       	subi	r25, 0x01	; 1
 f50:	20 f4       	brcc	.+8      	; 0xf5a <__fp_mpack_finite+0xc>
 f52:	87 95       	ror	r24
 f54:	77 95       	ror	r23
 f56:	67 95       	ror	r22
 f58:	b7 95       	ror	r27
 f5a:	88 0f       	add	r24, r24
 f5c:	91 1d       	adc	r25, r1
 f5e:	96 95       	lsr	r25
 f60:	87 95       	ror	r24
 f62:	97 f9       	bld	r25, 7
 f64:	08 95       	ret

00000f66 <memset>:
 f66:	dc 01       	movw	r26, r24
 f68:	01 c0       	rjmp	.+2      	; 0xf6c <memset+0x6>
 f6a:	6d 93       	st	X+, r22
 f6c:	41 50       	subi	r20, 0x01	; 1
 f6e:	50 40       	sbci	r21, 0x00	; 0
 f70:	e0 f7       	brcc	.-8      	; 0xf6a <memset+0x4>
 f72:	08 95       	ret

00000f74 <strcat>:
 f74:	fb 01       	movw	r30, r22
 f76:	dc 01       	movw	r26, r24
 f78:	0d 90       	ld	r0, X+
 f7a:	00 20       	and	r0, r0
 f7c:	e9 f7       	brne	.-6      	; 0xf78 <strcat+0x4>
 f7e:	11 97       	sbiw	r26, 0x01	; 1
 f80:	01 90       	ld	r0, Z+
 f82:	0d 92       	st	X+, r0
 f84:	00 20       	and	r0, r0
 f86:	e1 f7       	brne	.-8      	; 0xf80 <strcat+0xc>
 f88:	08 95       	ret

00000f8a <strcmp>:
 f8a:	fb 01       	movw	r30, r22
 f8c:	dc 01       	movw	r26, r24
 f8e:	8d 91       	ld	r24, X+
 f90:	01 90       	ld	r0, Z+
 f92:	80 19       	sub	r24, r0
 f94:	01 10       	cpse	r0, r1
 f96:	d9 f3       	breq	.-10     	; 0xf8e <strcmp+0x4>
 f98:	99 0b       	sbc	r25, r25
 f9a:	08 95       	ret

00000f9c <strcpy>:
 f9c:	fb 01       	movw	r30, r22
 f9e:	dc 01       	movw	r26, r24
 fa0:	01 90       	ld	r0, Z+
 fa2:	0d 92       	st	X+, r0
 fa4:	00 20       	and	r0, r0
 fa6:	e1 f7       	brne	.-8      	; 0xfa0 <strcpy+0x4>
 fa8:	08 95       	ret

00000faa <_exit>:
 faa:	f8 94       	cli

00000fac <__stop_program>:
 fac:	ff cf       	rjmp	.-2      	; 0xfac <__stop_program>
