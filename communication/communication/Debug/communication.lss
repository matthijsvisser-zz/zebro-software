
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000141a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00802000  0000141a  000014ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000494  0080208a  0080208a  00001538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002abb  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6d  00000000  00000000  0000422b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118a  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  00006124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b13  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b3e  00000000  00000000  0000727b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008db9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	9a c1       	rjmp	.+820    	; 0x39a <__vector_25>
      66:	00 00       	nop
      68:	cc c1       	rjmp	.+920    	; 0x402 <__vector_26>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fc c1       	rjmp	.+1016   	; 0x46a <__vector_28>
      72:	00 00       	nop
      74:	2e c2       	rjmp	.+1116   	; 0x4d2 <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e1       	ldi	r30, 0x1A	; 26
     21c:	f4 e1       	ldi	r31, 0x14	; 20
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	aa 38       	cpi	r26, 0x8A	; 138
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	25 e2       	ldi	r18, 0x25	; 37
     232:	aa e8       	ldi	r26, 0x8A	; 138
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ae 31       	cpi	r26, 0x1E	; 30
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	7c d1       	rcall	.+760    	; 0x53a <main>
     242:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
     248:	88 ed       	ldi	r24, 0xD8	; 216
     24a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
     24c:	e0 e5       	ldi	r30, 0x50	; 80
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	82 60       	ori	r24, 0x02	; 2
     254:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	81 ff       	sbrs	r24, 1
     25a:	fd cf       	rjmp	.-6      	; 0x256 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
     25c:	88 ed       	ldi	r24, 0xD8	; 216
     25e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 40 00 	sts	0x0040, r24
     266:	08 95       	ret

00000268 <printHeaderList>:
	current -> next = (struct node *) malloc(sizeof(node_t));
	for (int item = 0; item < DATASIZE; ++item){
		current -> next -> data[item] = data[item];
	}
	current -> next -> next = NULL;
}
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	90 e2       	ldi	r25, 0x20	; 32
     270:	77 d4       	rcall	.+2286   	; 0xb60 <DebugPrint>
     272:	89 e1       	ldi	r24, 0x19	; 25
     274:	90 e2       	ldi	r25, 0x20	; 32
     276:	74 d4       	rcall	.+2280   	; 0xb60 <DebugPrint>
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	d0 e0       	ldi	r29, 0x00	; 0
     27c:	8e e1       	ldi	r24, 0x1E	; 30
     27e:	90 e2       	ldi	r25, 0x20	; 32
     280:	6f d4       	rcall	.+2270   	; 0xb60 <DebugPrint>
     282:	4a e0       	ldi	r20, 0x0A	; 10
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	ce 01       	movw	r24, r28
     28a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__itoa_ncheck>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	66 d4       	rcall	.+2252   	; 0xb60 <DebugPrint>
     294:	84 e2       	ldi	r24, 0x24	; 36
     296:	90 e2       	ldi	r25, 0x20	; 32
     298:	63 d4       	rcall	.+2246   	; 0xb60 <DebugPrint>
     29a:	21 96       	adiw	r28, 0x01	; 1
     29c:	c5 30       	cpi	r28, 0x05	; 5
     29e:	d1 05       	cpc	r29, r1
     2a0:	69 f7       	brne	.-38     	; 0x27c <printHeaderList+0x14>
     2a2:	83 e4       	ldi	r24, 0x43	; 67
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	5c d4       	rcall	.+2232   	; 0xb60 <DebugPrint>
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <print_list>:
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	7c 01       	movw	r14, r24
     2c0:	d3 df       	rcall	.-90     	; 0x268 <printHeaderList>
     2c2:	e1 14       	cp	r14, r1
     2c4:	f1 04       	cpc	r15, r1
     2c6:	81 f1       	breq	.+96     	; 0x328 <print_list+0x7a>
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	c6 01       	movw	r24, r12
     2d4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__itoa_ncheck>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	41 d4       	rcall	.+2178   	; 0xb60 <DebugPrint>
     2de:	86 e2       	ldi	r24, 0x26	; 38
     2e0:	90 e2       	ldi	r25, 0x20	; 32
     2e2:	3e d4       	rcall	.+2172   	; 0xb60 <DebugPrint>
     2e4:	e7 01       	movw	r28, r14
     2e6:	87 01       	movw	r16, r14
     2e8:	06 5f       	subi	r16, 0xF6	; 246
     2ea:	1f 4f       	sbci	r17, 0xFF	; 255
     2ec:	89 91       	ld	r24, Y+
     2ee:	99 91       	ld	r25, Y+
     2f0:	37 d4       	rcall	.+2158   	; 0xb60 <DebugPrint>
     2f2:	86 e2       	ldi	r24, 0x26	; 38
     2f4:	90 e2       	ldi	r25, 0x20	; 32
     2f6:	34 d4       	rcall	.+2152   	; 0xb60 <DebugPrint>
     2f8:	c0 17       	cp	r28, r16
     2fa:	d1 07       	cpc	r29, r17
     2fc:	b9 f7       	brne	.-18     	; 0x2ec <print_list+0x3e>
     2fe:	83 e4       	ldi	r24, 0x43	; 67
     300:	90 e2       	ldi	r25, 0x20	; 32
     302:	2e d4       	rcall	.+2140   	; 0xb60 <DebugPrint>
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	83 ec       	ldi	r24, 0xC3	; 195
     308:	99 e0       	ldi	r25, 0x09	; 9
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	80 40       	sbci	r24, 0x00	; 0
     30e:	90 40       	sbci	r25, 0x00	; 0
     310:	e1 f7       	brne	.-8      	; 0x30a <print_list+0x5c>
     312:	00 c0       	rjmp	.+0      	; 0x314 <print_list+0x66>
     314:	00 00       	nop
     316:	f7 01       	movw	r30, r14
     318:	e2 84       	ldd	r14, Z+10	; 0x0a
     31a:	f3 84       	ldd	r15, Z+11	; 0x0b
     31c:	ff ef       	ldi	r31, 0xFF	; 255
     31e:	cf 1a       	sub	r12, r31
     320:	df 0a       	sbc	r13, r31
     322:	e1 14       	cp	r14, r1
     324:	f1 04       	cpc	r15, r1
     326:	91 f6       	brne	.-92     	; 0x2cc <print_list+0x1e>
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	08 95       	ret

0000033a <insert>:
 * @param  data     Data to write to memory
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 * @param  item 	Used for iteration
 */
void insert (node_t ** listHead, char* dataInternal [DATASIZE]){
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	ec 01       	movw	r28, r24
     348:	7b 01       	movw	r14, r22
	node_t * new_node;
	size_t size = sizeof(node_t);
	
	new_node = (struct node *) malloc(sizeof(node_t));
     34a:	8c e0       	ldi	r24, 0x0C	; 12
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	e1 d6       	rcall	.+3522   	; 0x1112 <malloc>
     350:	8c 01       	movw	r16, r24
	if (new_node == NULL){
     352:	89 2b       	or	r24, r25
     354:	19 f4       	brne	.+6      	; 0x35c <insert+0x22>
		DebugPrint("No memory");
     356:	88 e2       	ldi	r24, 0x28	; 40
     358:	90 e2       	ldi	r25, 0x20	; 32
     35a:	02 d4       	rcall	.+2052   	; 0xb60 <DebugPrint>
	}

	memset(new_node, 0, sizeof(node_t));
     35c:	8c e0       	ldi	r24, 0x0C	; 12
     35e:	f8 01       	movw	r30, r16
     360:	11 92       	st	Z+, r1
     362:	8a 95       	dec	r24
     364:	e9 f7       	brne	.-6      	; 0x360 <insert+0x26>
     366:	f7 01       	movw	r30, r14
     368:	d8 01       	movw	r26, r16
     36a:	b7 01       	movw	r22, r14
     36c:	66 5f       	subi	r22, 0xF6	; 246
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (int item = 0; item < DATASIZE; ++item){
		new_node -> data[item] = dataInternal[item];
     370:	21 91       	ld	r18, Z+
     372:	31 91       	ld	r19, Z+
     374:	2d 93       	st	X+, r18
     376:	3d 93       	st	X+, r19
		DebugPrint("No memory");
	}

	memset(new_node, 0, sizeof(node_t));
	
	for (int item = 0; item < DATASIZE; ++item){
     378:	e6 17       	cp	r30, r22
     37a:	f7 07       	cpc	r31, r23
     37c:	c9 f7       	brne	.-14     	; 0x370 <insert+0x36>
		new_node -> data[item] = dataInternal[item];
	}
	
	new_node -> next = *listHead;
     37e:	88 81       	ld	r24, Y
     380:	99 81       	ldd	r25, Y+1	; 0x01
     382:	f8 01       	movw	r30, r16
     384:	82 87       	std	Z+10, r24	; 0x0a
     386:	93 87       	std	Z+11, r25	; 0x0b
	*listHead = new_node;
     388:	08 83       	st	Y, r16
     38a:	19 83       	std	Y+1, r17	; 0x01
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	08 95       	ret

0000039a <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	08 b6       	in	r0, 0x38	; 56
     3a6:	0f 92       	push	r0
     3a8:	18 be       	out	0x38, r1	; 56
     3aa:	09 b6       	in	r0, 0x39	; 57
     3ac:	0f 92       	push	r0
     3ae:	19 be       	out	0x39, r1	; 57
     3b0:	0b b6       	in	r0, 0x3b	; 59
     3b2:	0f 92       	push	r0
     3b4:	1b be       	out	0x3b, r1	; 59
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
     3ca:	ef 93       	push	r30
     3cc:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
     3ce:	8c e8       	ldi	r24, 0x8C	; 140
     3d0:	90 e2       	ldi	r25, 0x20	; 32
     3d2:	2c d4       	rcall	.+2136   	; 0xc2c <USART_RXComplete>
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	09 be       	out	0x39, r0	; 57
     3f4:	0f 90       	pop	r0
     3f6:	08 be       	out	0x38, r0	; 56
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	08 b6       	in	r0, 0x38	; 56
     40e:	0f 92       	push	r0
     410:	18 be       	out	0x38, r1	; 56
     412:	09 b6       	in	r0, 0x39	; 57
     414:	0f 92       	push	r0
     416:	19 be       	out	0x39, r1	; 57
     418:	0b b6       	in	r0, 0x3b	; 59
     41a:	0f 92       	push	r0
     41c:	1b be       	out	0x3b, r1	; 59
     41e:	2f 93       	push	r18
     420:	3f 93       	push	r19
     422:	4f 93       	push	r20
     424:	5f 93       	push	r21
     426:	6f 93       	push	r22
     428:	7f 93       	push	r23
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
     436:	8c e8       	ldi	r24, 0x8C	; 140
     438:	90 e2       	ldi	r25, 0x20	; 32
     43a:	13 d4       	rcall	.+2086   	; 0xc62 <USART_DataRegEmpty>
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0b be       	out	0x3b, r0	; 59
     458:	0f 90       	pop	r0
     45a:	09 be       	out	0x39, r0	; 57
     45c:	0f 90       	pop	r0
     45e:	08 be       	out	0x38, r0	; 56
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	08 b6       	in	r0, 0x38	; 56
     476:	0f 92       	push	r0
     478:	18 be       	out	0x38, r1	; 56
     47a:	09 b6       	in	r0, 0x39	; 57
     47c:	0f 92       	push	r0
     47e:	19 be       	out	0x39, r1	; 57
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	0f 92       	push	r0
     484:	1b be       	out	0x3b, r1	; 59
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     49e:	83 e9       	ldi	r24, 0x93	; 147
     4a0:	92 e2       	ldi	r25, 0x22	; 34
     4a2:	c4 d3       	rcall	.+1928   	; 0xc2c <USART_RXComplete>
}
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	0f 90       	pop	r0
     4be:	0b be       	out	0x3b, r0	; 59
     4c0:	0f 90       	pop	r0
     4c2:	09 be       	out	0x39, r0	; 57
     4c4:	0f 90       	pop	r0
     4c6:	08 be       	out	0x38, r0	; 56
     4c8:	0f 90       	pop	r0
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	0f 90       	pop	r0
     4ce:	1f 90       	pop	r1
     4d0:	18 95       	reti

000004d2 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	08 b6       	in	r0, 0x38	; 56
     4de:	0f 92       	push	r0
     4e0:	18 be       	out	0x38, r1	; 56
     4e2:	09 b6       	in	r0, 0x39	; 57
     4e4:	0f 92       	push	r0
     4e6:	19 be       	out	0x39, r1	; 57
     4e8:	0b b6       	in	r0, 0x3b	; 59
     4ea:	0f 92       	push	r0
     4ec:	1b be       	out	0x3b, r1	; 59
     4ee:	2f 93       	push	r18
     4f0:	3f 93       	push	r19
     4f2:	4f 93       	push	r20
     4f4:	5f 93       	push	r21
     4f6:	6f 93       	push	r22
     4f8:	7f 93       	push	r23
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
     4fe:	af 93       	push	r26
     500:	bf 93       	push	r27
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     506:	83 e9       	ldi	r24, 0x93	; 147
     508:	92 e2       	ldi	r25, 0x22	; 34
     50a:	ab d3       	rcall	.+1878   	; 0xc62 <USART_DataRegEmpty>
}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0b be       	out	0x3b, r0	; 59
     528:	0f 90       	pop	r0
     52a:	09 be       	out	0x39, r0	; 57
     52c:	0f 90       	pop	r0
     52e:	08 be       	out	0x38, r0	; 56
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <main>:
extern node_t *listHead; // head


#define UPDATEINTERVAL 100			// in ms

int main(void){
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	c0 58       	subi	r28, 0x80	; 128
     544:	d1 09       	sbc	r29, r1
     546:	cd bf       	out	0x3d, r28	; 61
     548:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
     54a:	7e de       	rcall	.-772    	; 0x248 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
     54c:	c1 2c       	mov	r12, r1
     54e:	e1 2c       	mov	r14, r1
     550:	12 ec       	ldi	r17, 0xC2	; 194
     552:	f1 2e       	mov	r15, r17
     554:	01 e0       	ldi	r16, 0x01	; 1
     556:	10 e0       	ldi	r17, 0x00	; 0
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	38 e4       	ldi	r19, 0x48	; 72
     55c:	48 ee       	ldi	r20, 0xE8	; 232
     55e:	51 e0       	ldi	r21, 0x01	; 1
     560:	60 ea       	ldi	r22, 0xA0	; 160
     562:	78 e0       	ldi	r23, 0x08	; 8
     564:	8c e8       	ldi	r24, 0x8C	; 140
     566:	90 e2       	ldi	r25, 0x20	; 32
     568:	9e d2       	rcall	.+1340   	; 0xaa6 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	38 e4       	ldi	r19, 0x48	; 72
     56e:	48 ee       	ldi	r20, 0xE8	; 232
     570:	51 e0       	ldi	r21, 0x01	; 1
     572:	60 eb       	ldi	r22, 0xB0	; 176
     574:	78 e0       	ldi	r23, 0x08	; 8
     576:	83 e9       	ldi	r24, 0x93	; 147
     578:	92 e2       	ldi	r25, 0x22	; 34
     57a:	95 d2       	rcall	.+1322   	; 0xaa6 <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 a2 00 	sts	0x00A2, r24
	sei();
     582:	78 94       	sei
	
	DebugPrint(CLEARTERM);
     584:	82 e3       	ldi	r24, 0x32	; 50
     586:	90 e2       	ldi	r25, 0x20	; 32
     588:	eb d2       	rcall	.+1494   	; 0xb60 <DebugPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	83 ec       	ldi	r24, 0xC3	; 195
     58e:	99 e0       	ldi	r25, 0x09	; 9
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <main+0x56>
     598:	00 c0       	rjmp	.+0      	; 0x59a <main+0x60>
     59a:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
     59c:	8d e3       	ldi	r24, 0x3D	; 61
     59e:	90 e2       	ldi	r25, 0x20	; 32
     5a0:	e4 d2       	rcall	.+1480   	; 0xb6a <Command>
	Command(SBIV500);
     5a2:	86 e4       	ldi	r24, 0x46	; 70
     5a4:	90 e2       	ldi	r25, 0x20	; 32
     5a6:	e1 d2       	rcall	.+1474   	; 0xb6a <Command>
*/	
	
	while(1) {
		char message[128];
		
		memset(message, EOS, strlen(message));
     5a8:	8e 01       	movw	r16, r28
     5aa:	0f 5f       	subi	r16, 0xFF	; 255
     5ac:	1f 4f       	sbci	r17, 0xFF	; 255
     5ae:	f8 01       	movw	r30, r16
     5b0:	01 90       	ld	r0, Z+
     5b2:	00 20       	and	r0, r0
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <main+0x76>
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	af 01       	movw	r20, r30
     5ba:	40 1b       	sub	r20, r16
     5bc:	51 0b       	sbc	r21, r17
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	c8 01       	movw	r24, r16
     5c4:	d3 d6       	rcall	.+3494   	; 0x136c <memset>
     5c6:	2f ef       	ldi	r18, 0xFF	; 255
     5c8:	83 ec       	ldi	r24, 0xC3	; 195
     5ca:	99 e0       	ldi	r25, 0x09	; 9
     5cc:	21 50       	subi	r18, 0x01	; 1
     5ce:	80 40       	sbci	r24, 0x00	; 0
     5d0:	90 40       	sbci	r25, 0x00	; 0
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x92>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0x9c>
     5d6:	00 00       	nop
		//DebugPrint(CLEARTERM);
		_delay_ms(UPDATEINTERVAL);
		
		//DebugPrint(TranslateMessage());
		strcpy(message,TranslateMessage());
     5d8:	e5 d0       	rcall	.+458    	; 0x7a4 <TranslateMessage>
     5da:	bc 01       	movw	r22, r24
     5dc:	c8 01       	movw	r24, r16
     5de:	e1 d6       	rcall	.+3522   	; 0x13a2 <strcpy>
		
		DebugPrint("\r\n");
     5e0:	83 e4       	ldi	r24, 0x43	; 67
     5e2:	90 e2       	ldi	r25, 0x20	; 32
     5e4:	bd d2       	rcall	.+1402   	; 0xb60 <DebugPrint>
		if (ValidateMessage(message,TYPE_RRN) == true){
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	c8 01       	movw	r24, r16
     5ea:	09 d0       	rcall	.+18     	; 0x5fe <ValidateMessage>
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	19 f4       	brne	.+6      	; 0x5f6 <main+0xbc>
			DetermineCommandtype(message);
     5f0:	c8 01       	movw	r24, r16
     5f2:	5d d0       	rcall	.+186    	; 0x6ae <DetermineCommandtype>
     5f4:	dc cf       	rjmp	.-72     	; 0x5ae <main+0x74>
		}else{
			DebugPrint("Not valid");
     5f6:	81 e5       	ldi	r24, 0x51	; 81
     5f8:	90 e2       	ldi	r25, 0x20	; 32
     5fa:	b2 d2       	rcall	.+1380   	; 0xb60 <DebugPrint>
		}

	}
     5fc:	d8 cf       	rjmp	.-80     	; 0x5ae <main+0x74>

000005fe <ValidateMessage>:
 * @param	
 */
void RRN_function (char *message){
	uart_puts(&uartC1, "\r\nfunctie\r\n");
	DebugPrint(message);
}
     5fe:	fc 01       	movw	r30, r24
     600:	01 90       	ld	r0, Z+
     602:	00 20       	and	r0, r0
     604:	e9 f7       	brne	.-6      	; 0x600 <ValidateMessage+0x2>
     606:	31 97       	sbiw	r30, 0x01	; 1
     608:	e8 1b       	sub	r30, r24
     60a:	f9 0b       	sbc	r31, r25
     60c:	61 30       	cpi	r22, 0x01	; 1
     60e:	29 f4       	brne	.+10     	; 0x61a <ValidateMessage+0x1c>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	e9 32       	cpi	r30, 0x29	; 41
     614:	19 f0       	breq	.+6      	; 0x61c <ValidateMessage+0x1e>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	08 95       	ret
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	08 95       	ret

0000061e <fillpopulationlist>:
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2a 97       	sbiw	r28, 0x0a	; 10
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	de bf       	out	0x3e, r29	; 62
     630:	8c 01       	movw	r16, r24
     632:	8a e1       	ldi	r24, 0x1A	; 26
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	6d d5       	rcall	.+2778   	; 0x1112 <malloc>
     638:	ac 01       	movw	r20, r24
     63a:	f8 01       	movw	r30, r16
     63c:	91 81       	ldd	r25, Z+1	; 0x01
     63e:	9c 32       	cpi	r25, 0x2C	; 44
     640:	59 f0       	breq	.+22     	; 0x658 <fillpopulationlist+0x3a>
     642:	32 96       	adiw	r30, 0x02	; 2
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	da 01       	movw	r26, r20
     648:	a2 0f       	add	r26, r18
     64a:	b1 1d       	adc	r27, r1
     64c:	9c 93       	st	X, r25
     64e:	2f 5f       	subi	r18, 0xFF	; 255
     650:	91 91       	ld	r25, Z+
     652:	9c 32       	cpi	r25, 0x2C	; 44
     654:	c1 f7       	brne	.-16     	; 0x646 <fillpopulationlist+0x28>
     656:	01 c0       	rjmp	.+2      	; 0x65a <fillpopulationlist+0x3c>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	fa 01       	movw	r30, r20
     65c:	e2 0f       	add	r30, r18
     65e:	f1 1d       	adc	r31, r1
     660:	10 82       	st	Z, r1
     662:	49 83       	std	Y+1, r20	; 0x01
     664:	5a 83       	std	Y+2, r21	; 0x02
     666:	ca 01       	movw	r24, r20
     668:	0d 96       	adiw	r24, 0x0d	; 13
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	9c 83       	std	Y+4, r25	; 0x04
     66e:	05 96       	adiw	r24, 0x05	; 5
     670:	8d 83       	std	Y+5, r24	; 0x05
     672:	9e 83       	std	Y+6, r25	; 0x06
     674:	03 96       	adiw	r24, 0x03	; 3
     676:	8f 83       	std	Y+7, r24	; 0x07
     678:	98 87       	std	Y+8, r25	; 0x08
     67a:	48 5e       	subi	r20, 0xE8	; 232
     67c:	5f 4f       	sbci	r21, 0xFF	; 255
     67e:	49 87       	std	Y+9, r20	; 0x09
     680:	5a 87       	std	Y+10, r21	; 0x0a
     682:	be 01       	movw	r22, r28
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	8a e8       	ldi	r24, 0x8A	; 138
     68a:	90 e2       	ldi	r25, 0x20	; 32
     68c:	56 de       	rcall	.-852    	; 0x33a <insert>
     68e:	82 e3       	ldi	r24, 0x32	; 50
     690:	90 e2       	ldi	r25, 0x20	; 32
     692:	66 d2       	rcall	.+1228   	; 0xb60 <DebugPrint>
     694:	80 91 8a 20 	lds	r24, 0x208A
     698:	90 91 8b 20 	lds	r25, 0x208B
     69c:	08 de       	rcall	.-1008   	; 0x2ae <print_list>
     69e:	2a 96       	adiw	r28, 0x0a	; 10
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <DetermineCommandtype>:
/**
 * Determines the meaning of the message
 * @param  	value	received value
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <DetermineCommandtype+0xe>
     6bc:	1f 92       	push	r1
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	7c 01       	movw	r14, r24
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
	
	memset(command, EOS, strlen(command));	
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	01 90       	ld	r0, Z+
     6cc:	00 20       	and	r0, r0
     6ce:	e9 f7       	brne	.-6      	; 0x6ca <DetermineCommandtype+0x1c>
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	af 01       	movw	r20, r30
     6d4:	48 1b       	sub	r20, r24
     6d6:	59 0b       	sbc	r21, r25
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	47 d6       	rcall	.+3214   	; 0x136c <memset>
	
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     6de:	d7 01       	movw	r26, r14
     6e0:	11 96       	adiw	r26, 0x01	; 1
     6e2:	8c 91       	ld	r24, X
     6e4:	8a 33       	cpi	r24, 0x3A	; 58
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <DetermineCommandtype+0x44>
	memset(command, EOS, strlen(command));	
	messagePointer = message;
	
	//DebugPrint(message);

	*messagePointer++;
     6e8:	87 01       	movw	r16, r14
     6ea:	0f 5f       	subi	r16, 0xFF	; 255
     6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	1e c0       	rjmp	.+60     	; 0x72e <DetermineCommandtype+0x80>
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     6f2:	87 01       	movw	r16, r14
     6f4:	0e 5f       	subi	r16, 0xFE	; 254
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
		if(*messagePointer == ( COMMAND_END)){ break;}		
     6f8:	f7 01       	movw	r30, r14
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	8a 33       	cpi	r24, 0x3A	; 58
     6fe:	b1 f0       	breq	.+44     	; 0x72c <DetermineCommandtype+0x7e>
     700:	f8 01       	movw	r30, r16
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	04 c0       	rjmp	.+8      	; 0x70e <DetermineCommandtype+0x60>
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     706:	8f 01       	movw	r16, r30
		if(*messagePointer == ( COMMAND_END)){ break;}		
     708:	80 81       	ld	r24, Z
     70a:	8a 33       	cpi	r24, 0x3A	; 58
     70c:	81 f0       	breq	.+32     	; 0x72e <DetermineCommandtype+0x80>
     70e:	8f 01       	movw	r16, r30
		command[count] = *messagePointer;		
     710:	a1 e0       	ldi	r26, 0x01	; 1
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	ac 0f       	add	r26, r28
     716:	bd 1f       	adc	r27, r29
     718:	a9 0f       	add	r26, r25
     71a:	b1 1d       	adc	r27, r1
     71c:	8c 93       	st	X, r24
		count++;
     71e:	9f 5f       	subi	r25, 0xFF	; 255
     720:	31 96       	adiw	r30, 0x01	; 1
	
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     722:	d8 01       	movw	r26, r16
     724:	8c 91       	ld	r24, X
     726:	8a 33       	cpi	r24, 0x3A	; 58
     728:	71 f7       	brne	.-36     	; 0x706 <DetermineCommandtype+0x58>
     72a:	01 c0       	rjmp	.+2      	; 0x72e <DetermineCommandtype+0x80>
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     72c:	90 e0       	ldi	r25, 0x00	; 0
		*messagePointer++;
		if(*messagePointer == ( COMMAND_END)){ break;}		
		command[count] = *messagePointer;		
		count++;
	}
	command[count] = EOS;
     72e:	e1 e0       	ldi	r30, 0x01	; 1
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ec 0f       	add	r30, r28
     734:	fd 1f       	adc	r31, r29
     736:	e9 0f       	add	r30, r25
     738:	f1 1d       	adc	r31, r1
     73a:	10 82       	st	Z, r1
	
	*messagePointer++;

	if		(strcmp(command, "*RRN") == 0){	// Data Notification Message
     73c:	67 e6       	ldi	r22, 0x67	; 103
     73e:	70 e2       	ldi	r23, 0x20	; 32
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	25 d6       	rcall	.+3146   	; 0x1390 <strcmp>
     746:	89 2b       	or	r24, r25
     748:	21 f4       	brne	.+8      	; 0x752 <DetermineCommandtype+0xa4>
		//RRN_function(messagePointer);
		fillpopulationlist(messagePointer);
     74a:	c8 01       	movw	r24, r16
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	67 df       	rcall	.-306    	; 0x61e <fillpopulationlist>
     750:	1f c0       	rjmp	.+62     	; 0x790 <DetermineCommandtype+0xe2>
	}else if(strcmp(command, "DNO")  == 0){	// Node ID Notification Message
     752:	6c e6       	ldi	r22, 0x6C	; 108
     754:	70 e2       	ldi	r23, 0x20	; 32
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	1a d6       	rcall	.+3124   	; 0x1390 <strcmp>
     75c:	89 2b       	or	r24, r25
     75e:	c1 f0       	breq	.+48     	; 0x790 <DetermineCommandtype+0xe2>
		
	}else if(strcmp(command, "NIN")  == 0){	// Ranging Result Notification Message
     760:	60 e7       	ldi	r22, 0x70	; 112
     762:	70 e2       	ldi	r23, 0x20	; 32
     764:	ce 01       	movw	r24, r28
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	13 d6       	rcall	.+3110   	; 0x1390 <strcmp>
     76a:	89 2b       	or	r24, r25
     76c:	89 f0       	breq	.+34     	; 0x790 <DetermineCommandtype+0xe2>
		//printf("NIN\n");
	}else if(strcmp(command, "SDAT") == 0){	// SDAT Notification Messages
     76e:	64 e7       	ldi	r22, 0x74	; 116
     770:	70 e2       	ldi	r23, 0x20	; 32
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0c d6       	rcall	.+3096   	; 0x1390 <strcmp>
     778:	89 2b       	or	r24, r25
     77a:	51 f0       	breq	.+20     	; 0x790 <DetermineCommandtype+0xe2>
		//printf("SDAT\n");
	}else if(strcmp(command, "AIR")  == 0){	// AIR Notification Message
     77c:	69 e7       	ldi	r22, 0x79	; 121
     77e:	70 e2       	ldi	r23, 0x20	; 32
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	05 d6       	rcall	.+3082   	; 0x1390 <strcmp>
     786:	89 2b       	or	r24, r25
     788:	19 f0       	breq	.+6      	; 0x790 <DetermineCommandtype+0xe2>
		//printf("AIR\n");
	}else{
		DebugPrint("No command\r\n");
     78a:	8d e7       	ldi	r24, 0x7D	; 125
     78c:	90 e2       	ldi	r25, 0x20	; 32
     78e:	e8 d1       	rcall	.+976    	; 0xb60 <DebugPrint>
	}
}
     790:	24 96       	adiw	r28, 0x04	; 4
     792:	cd bf       	out	0x3d, r28	; 61
     794:	de bf       	out	0x3e, r29	; 62
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	08 95       	ret

000007a4 <TranslateMessage>:
 * Translates the received message converts characters
 * to a single string
 * @param  	value	received value
 * @return	message pointer to the translated message
 */
char * TranslateMessage (void){
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	c0 58       	subi	r28, 0x80	; 128
     7b2:	d1 09       	sbc	r29, r1
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	de bf       	out	0x3e, r29	; 62
	char value[128];

	memset(globalMessage, EOS, strlen(globalMessage));
     7b8:	ea e9       	ldi	r30, 0x9A	; 154
     7ba:	f4 e2       	ldi	r31, 0x24	; 36
     7bc:	01 90       	ld	r0, Z+
     7be:	00 20       	and	r0, r0
     7c0:	e9 f7       	brne	.-6      	; 0x7bc <TranslateMessage+0x18>
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	af 01       	movw	r20, r30
     7c6:	4a 59       	subi	r20, 0x9A	; 154
     7c8:	54 42       	sbci	r21, 0x24	; 36
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	8a e9       	ldi	r24, 0x9A	; 154
     7d0:	94 e2       	ldi	r25, 0x24	; 36
     7d2:	cc d5       	rcall	.+2968   	; 0x136c <memset>
	memset(value, EOS, strlen(value));
     7d4:	8e 01       	movw	r16, r28
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	f8 01       	movw	r30, r16
     7dc:	01 90       	ld	r0, Z+
     7de:	00 20       	and	r0, r0
     7e0:	e9 f7       	brne	.-6      	; 0x7dc <TranslateMessage+0x38>
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	af 01       	movw	r20, r30
     7e6:	40 1b       	sub	r20, r16
     7e8:	51 0b       	sbc	r21, r17
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	c8 01       	movw	r24, r16
     7f0:	bd d5       	rcall	.+2938   	; 0x136c <memset>

	value[0] = uart_getc(&uartC0);
     7f2:	8c e8       	ldi	r24, 0x8C	; 140
     7f4:	90 e2       	ldi	r25, 0x20	; 32
     7f6:	21 d0       	rcall	.+66     	; 0x83a <uart_getc>
     7f8:	89 83       	std	Y+1, r24	; 0x01
	strcpy(globalMessage, value);
     7fa:	b8 01       	movw	r22, r16
     7fc:	8a e9       	ldi	r24, 0x9A	; 154
     7fe:	94 e2       	ldi	r25, 0x24	; 36
     800:	d0 d5       	rcall	.+2976   	; 0x13a2 <strcpy>
	while (value[0] != CR){
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	8d 30       	cpi	r24, 0x0D	; 13
     806:	71 f0       	breq	.+28     	; 0x824 <TranslateMessage+0x80>
		if (value[0] != CR){	
     808:	8d 30       	cpi	r24, 0x0D	; 13
     80a:	31 f0       	breq	.+12     	; 0x818 <TranslateMessage+0x74>
			
			strcat(globalMessage, value);	
     80c:	be 01       	movw	r22, r28
     80e:	6f 5f       	subi	r22, 0xFF	; 255
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	8a e9       	ldi	r24, 0x9A	; 154
     814:	94 e2       	ldi	r25, 0x24	; 36
     816:	b1 d5       	rcall	.+2914   	; 0x137a <strcat>
		}
		value[0] = uart_getc(&uartC0);
     818:	8c e8       	ldi	r24, 0x8C	; 140
     81a:	90 e2       	ldi	r25, 0x20	; 32
     81c:	0e d0       	rcall	.+28     	; 0x83a <uart_getc>
     81e:	89 83       	std	Y+1, r24	; 0x01
	memset(globalMessage, EOS, strlen(globalMessage));
	memset(value, EOS, strlen(value));

	value[0] = uart_getc(&uartC0);
	strcpy(globalMessage, value);
	while (value[0] != CR){
     820:	8d 30       	cpi	r24, 0x0D	; 13
     822:	91 f7       	brne	.-28     	; 0x808 <TranslateMessage+0x64>
			strcat(globalMessage, value);	
		}
		value[0] = uart_getc(&uartC0);
	}
	return globalMessage;
     824:	8a e9       	ldi	r24, 0x9A	; 154
     826:	94 e2       	ldi	r25, 0x24	; 36
     828:	c0 58       	subi	r28, 0x80	; 128
     82a:	df 4f       	sbci	r29, 0xFF	; 255
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	de bf       	out	0x3e, r29	; 62
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	08 95       	ret

0000083a <uart_getc>:
 *
 *  \return received byte from circulair buffer (low byte) or
 *          UART_NO_DATA if buffer is empty
 */
uint16_t uart_getc(USART_data_t *uart)
{
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ec 01       	movw	r28, r24
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
     840:	dd d1       	rcall	.+954    	; 0xbfc <USART_RXBufferData_Available>
     842:	88 23       	and	r24, r24
     844:	49 f0       	breq	.+18     	; 0x858 <uart_getc+0x1e>
    return UART_NO_DATA;
}
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
     846:	e0 eb       	ldi	r30, 0xB0	; 176
     848:	f8 e0       	ldi	r31, 0x08	; 8
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	96 ff       	sbrs	r25, 6
     84e:	fd cf       	rjmp	.-6      	; 0x84a <uart_getc+0x10>
  data = USART_RXBuffer_GetByte(uart);
     850:	ce 01       	movw	r24, r28
     852:	df d1       	rcall	.+958    	; 0xc12 <USART_RXBuffer_GetByte>

  return (data & 0x00FF);
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	02 c0       	rjmp	.+4      	; 0x85c <uart_getc+0x22>
{
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
    return UART_NO_DATA;
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	91 e0       	ldi	r25, 0x01	; 1
/*
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );

return USARTC1.DATA;
*/
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
     86a:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     86c:	91 d1       	rcall	.+802    	; 0xb90 <USART_TXBuffer_FreeSpace>
     86e:	88 23       	and	r24, r24
     870:	19 f0       	breq	.+6      	; 0x878 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     872:	61 2f       	mov	r22, r17
     874:	ce 01       	movw	r24, r28
     876:	99 d1       	rcall	.+818    	; 0xbaa <USART_TXBuffer_PutByte>
  }
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
  char c;

  while ( (c = *s++) ) {
     888:	eb 01       	movw	r28, r22
     88a:	21 96       	adiw	r28, 0x01	; 1
     88c:	fb 01       	movw	r30, r22
     88e:	60 81       	ld	r22, Z
     890:	66 23       	and	r22, r22
     892:	31 f0       	breq	.+12     	; 0x8a0 <uart_puts+0x20>
     894:	8c 01       	movw	r16, r24
    uart_putc(uart, c);
     896:	c8 01       	movw	r24, r16
     898:	e4 df       	rcall	.-56     	; 0x862 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     89a:	69 91       	ld	r22, Y+
     89c:	61 11       	cpse	r22, r1
     89e:	fb cf       	rjmp	.-10     	; 0x896 <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     8aa:	80 3a       	cpi	r24, 0xA0	; 160
     8ac:	28 e0       	ldi	r18, 0x08	; 8
     8ae:	92 07       	cpc	r25, r18
     8b0:	39 f4       	brne	.+14     	; 0x8c0 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     8b2:	e0 e4       	ldi	r30, 0x40	; 64
     8b4:	f6 e0       	ldi	r31, 0x06	; 6
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     8ba:	84 e0       	ldi	r24, 0x04	; 4
     8bc:	82 83       	std	Z+2, r24	; 0x02
     return;
     8be:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     8c0:	80 3b       	cpi	r24, 0xB0	; 176
     8c2:	28 e0       	ldi	r18, 0x08	; 8
     8c4:	92 07       	cpc	r25, r18
     8c6:	39 f4       	brne	.+14     	; 0x8d6 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     8c8:	e0 e4       	ldi	r30, 0x40	; 64
     8ca:	f6 e0       	ldi	r31, 0x06	; 6
     8cc:	80 e8       	ldi	r24, 0x80	; 128
     8ce:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     8d0:	80 e4       	ldi	r24, 0x40	; 64
     8d2:	82 83       	std	Z+2, r24	; 0x02
     return;
     8d4:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     8d6:	80 3a       	cpi	r24, 0xA0	; 160
     8d8:	29 e0       	ldi	r18, 0x09	; 9
     8da:	92 07       	cpc	r25, r18
     8dc:	39 f4       	brne	.+14     	; 0x8ec <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     8de:	e0 e6       	ldi	r30, 0x60	; 96
     8e0:	f6 e0       	ldi	r31, 0x06	; 6
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	82 83       	std	Z+2, r24	; 0x02
     return;
     8ea:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     8ec:	80 3b       	cpi	r24, 0xB0	; 176
     8ee:	29 e0       	ldi	r18, 0x09	; 9
     8f0:	92 07       	cpc	r25, r18
     8f2:	39 f4       	brne	.+14     	; 0x902 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     8f4:	e0 e6       	ldi	r30, 0x60	; 96
     8f6:	f6 e0       	ldi	r31, 0x06	; 6
     8f8:	80 e8       	ldi	r24, 0x80	; 128
     8fa:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     8fc:	80 e4       	ldi	r24, 0x40	; 64
     8fe:	82 83       	std	Z+2, r24	; 0x02
     return;
     900:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     902:	80 3a       	cpi	r24, 0xA0	; 160
     904:	9a 40       	sbci	r25, 0x0A	; 10
     906:	31 f4       	brne	.+12     	; 0x914 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     908:	e0 e8       	ldi	r30, 0x80	; 128
     90a:	f6 e0       	ldi	r31, 0x06	; 6
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	82 83       	std	Z+2, r24	; 0x02
     914:	08 95       	ret

00000916 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     916:	4f 92       	push	r4
     918:	5f 92       	push	r5
     91a:	6f 92       	push	r6
     91c:	7f 92       	push	r7
     91e:	8f 92       	push	r8
     920:	9f 92       	push	r9
     922:	af 92       	push	r10
     924:	bf 92       	push	r11
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	49 01       	movw	r8, r18
     938:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     93a:	2e 2d       	mov	r18, r14
     93c:	21 70       	andi	r18, 0x01	; 1
     93e:	c0 e1       	ldi	r28, 0x10	; 16
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	02 c0       	rjmp	.+4      	; 0x948 <calc_bsel+0x32>
     944:	d5 95       	asr	r29
     946:	c7 95       	ror	r28
     948:	2a 95       	dec	r18
     94a:	e2 f7       	brpl	.-8      	; 0x944 <calc_bsel+0x2e>
  if ( scale < 0 ) {
     94c:	00 23       	and	r16, r16
     94e:	0c f0       	brlt	.+2      	; 0x952 <calc_bsel+0x3c>
     950:	38 c0       	rjmp	.+112    	; 0x9c2 <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     952:	a5 d2       	rcall	.+1354   	; 0xe9e <__floatunsisf>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	dd 27       	eor	r29, r29
     95a:	be 01       	movw	r22, r28
     95c:	dd 0f       	add	r29, r29
     95e:	88 0b       	sbc	r24, r24
     960:	99 0b       	sbc	r25, r25
     962:	9f d2       	rcall	.+1342   	; 0xea2 <__floatsisf>
     964:	2b 01       	movw	r4, r22
     966:	3c 01       	movw	r6, r24
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	98 d2       	rcall	.+1328   	; 0xe9e <__floatunsisf>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c3 01       	movw	r24, r6
     974:	b2 01       	movw	r22, r4
     976:	21 d3       	rcall	.+1602   	; 0xfba <__mulsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	fa d1       	rcall	.+1012   	; 0xd76 <__divsf3>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	5f e3       	ldi	r21, 0x3F	; 63
     98a:	90 d1       	rcall	.+800    	; 0xcac <__subsf3>
     98c:	6b 01       	movw	r12, r22
     98e:	7c 01       	movw	r14, r24
     990:	11 27       	eor	r17, r17
     992:	01 95       	neg	r16
     994:	0c f4       	brge	.+2      	; 0x998 <calc_bsel+0x82>
     996:	10 95       	com	r17
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <calc_bsel+0x8c>
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	0a 95       	dec	r16
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <calc_bsel+0x88>
     9a6:	bc 01       	movw	r22, r24
     9a8:	99 0f       	add	r25, r25
     9aa:	88 0b       	sbc	r24, r24
     9ac:	99 0b       	sbc	r25, r25
     9ae:	79 d2       	rcall	.+1266   	; 0xea2 <__floatsisf>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	00 d3       	rcall	.+1536   	; 0xfba <__mulsf3>
     9ba:	62 d3       	rcall	.+1732   	; 0x1080 <round>
     9bc:	44 d2       	rcall	.+1160   	; 0xe46 <__fixunssfsi>
     9be:	cb 01       	movw	r24, r22
     9c0:	34 c0       	rjmp	.+104    	; 0xa2a <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     9c2:	6d d2       	rcall	.+1242   	; 0xe9e <__floatunsisf>
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
     9c8:	ce 01       	movw	r24, r28
     9ca:	99 27       	eor	r25, r25
     9cc:	bc 01       	movw	r22, r24
     9ce:	99 0f       	add	r25, r25
     9d0:	88 0b       	sbc	r24, r24
     9d2:	99 0b       	sbc	r25, r25
     9d4:	66 d2       	rcall	.+1228   	; 0xea2 <__floatsisf>
     9d6:	2b 01       	movw	r4, r22
     9d8:	3c 01       	movw	r6, r24
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	5f d2       	rcall	.+1214   	; 0xe9e <__floatunsisf>
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	c3 01       	movw	r24, r6
     9e6:	b2 01       	movw	r22, r4
     9e8:	e8 d2       	rcall	.+1488   	; 0xfba <__mulsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	c1 d1       	rcall	.+898    	; 0xd76 <__divsf3>
     9f4:	6b 01       	movw	r12, r22
     9f6:	7c 01       	movw	r14, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <calc_bsel+0xec>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	0a 95       	dec	r16
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <calc_bsel+0xe8>
     a06:	bc 01       	movw	r22, r24
     a08:	99 0f       	add	r25, r25
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	49 d2       	rcall	.+1170   	; 0xea2 <__floatsisf>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	ae d1       	rcall	.+860    	; 0xd76 <__divsf3>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e8       	ldi	r20, 0x80	; 128
     a20:	5f e3       	ldi	r21, 0x3F	; 63
     a22:	44 d1       	rcall	.+648    	; 0xcac <__subsf3>
     a24:	2d d3       	rcall	.+1626   	; 0x1080 <round>
     a26:	0f d2       	rcall	.+1054   	; 0xe46 <__fixunssfsi>
     a28:	cb 01       	movw	r24, r22
  }
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	af 90       	pop	r10
     a3e:	9f 90       	pop	r9
     a40:	8f 90       	pop	r8
     a42:	7f 90       	pop	r7
     a44:	6f 90       	pop	r6
     a46:	5f 90       	pop	r5
     a48:	4f 90       	pop	r4
     a4a:	08 95       	ret

00000a4c <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     a4c:	4f 92       	push	r4
     a4e:	5f 92       	push	r5
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	ef 92       	push	r14
     a5e:	0f 93       	push	r16
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	2b 01       	movw	r4, r22
     a66:	3c 01       	movw	r6, r24
     a68:	49 01       	movw	r8, r18
     a6a:	5a 01       	movw	r10, r20
     a6c:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     a6e:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     a70:	ed 2e       	mov	r14, r29
     a72:	0c 2f       	mov	r16, r28
     a74:	a5 01       	movw	r20, r10
     a76:	94 01       	movw	r18, r8
     a78:	c3 01       	movw	r24, r6
     a7a:	b2 01       	movw	r22, r4
     a7c:	4c df       	rcall	.-360    	; 0x916 <calc_bsel>
     a7e:	81 15       	cp	r24, r1
     a80:	90 41       	sbci	r25, 0x10	; 16
     a82:	18 f0       	brcs	.+6      	; 0xa8a <calc_bscale+0x3e>
     a84:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     a86:	c8 30       	cpi	r28, 0x08	; 8
     a88:	99 f7       	brne	.-26     	; 0xa70 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     a8a:	8c 2f       	mov	r24, r28
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	0f 91       	pop	r16
     a92:	ef 90       	pop	r14
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	8f 90       	pop	r8
     a9c:	7f 90       	pop	r7
     a9e:	6f 90       	pop	r6
     aa0:	5f 90       	pop	r5
     aa2:	4f 90       	pop	r4
     aa4:	08 95       	ret

00000aa6 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     aa6:	2f 92       	push	r2
     aa8:	3f 92       	push	r3
     aaa:	4f 92       	push	r4
     aac:	5f 92       	push	r5
     aae:	6f 92       	push	r6
     ab0:	7f 92       	push	r7
     ab2:	8f 92       	push	r8
     ab4:	9f 92       	push	r9
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	cf 92       	push	r12
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	ec 01       	movw	r28, r24
     aca:	1b 01       	movw	r2, r22
     acc:	29 01       	movw	r4, r18
     ace:	3a 01       	movw	r6, r20
     ad0:	47 01       	movw	r8, r14
     ad2:	58 01       	movw	r10, r16
     ad4:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     ad6:	0c 2d       	mov	r16, r12
     ad8:	a5 01       	movw	r20, r10
     ada:	94 01       	movw	r18, r8
     adc:	c3 01       	movw	r24, r6
     ade:	b2 01       	movw	r22, r4
     ae0:	b5 df       	rcall	.-150    	; 0xa4c <calc_bscale>
     ae2:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     ae4:	08 2f       	mov	r16, r24
     ae6:	a5 01       	movw	r20, r10
     ae8:	94 01       	movw	r18, r8
     aea:	c3 01       	movw	r24, r6
     aec:	b2 01       	movw	r22, r4
     aee:	13 df       	rcall	.-474    	; 0x916 <calc_bsel>
     af0:	f8 2e       	mov	r15, r24
     af2:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	b1 01       	movw	r22, r2
     af8:	ce 01       	movw	r24, r28
     afa:	3c d0       	rcall	.+120    	; 0xb74 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     afc:	e8 81       	ld	r30, Y
     afe:	f9 81       	ldd	r31, Y+1	; 0x01
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     b04:	e8 81       	ld	r30, Y
     b06:	f9 81       	ldd	r31, Y+1	; 0x01
     b08:	94 81       	ldd	r25, Z+4	; 0x04
     b0a:	90 61       	ori	r25, 0x10	; 16
     b0c:	94 83       	std	Z+4, r25	; 0x04
  USART_Tx_Enable(uart->usart);
     b0e:	e8 81       	ld	r30, Y
     b10:	f9 81       	ldd	r31, Y+1	; 0x01
     b12:	94 81       	ldd	r25, Z+4	; 0x04
     b14:	98 60       	ori	r25, 0x08	; 8
     b16:	94 83       	std	Z+4, r25	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     b18:	e8 81       	ld	r30, Y
     b1a:	f9 81       	ldd	r31, Y+1	; 0x01
     b1c:	23 81       	ldd	r18, Z+3	; 0x03
     b1e:	2f 7c       	andi	r18, 0xCF	; 207
     b20:	20 61       	ori	r18, 0x10	; 16
     b22:	23 83       	std	Z+3, r18	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     b24:	e8 81       	ld	r30, Y
     b26:	f9 81       	ldd	r31, Y+1	; 0x01
     b28:	f6 82       	std	Z+6, r15	; 0x06
     b2a:	e8 81       	ld	r30, Y
     b2c:	f9 81       	ldd	r31, Y+1	; 0x01
     b2e:	12 95       	swap	r17
     b30:	10 7f       	andi	r17, 0xF0	; 240
     b32:	10 2b       	or	r17, r16
     b34:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
     b36:	88 81       	ld	r24, Y
     b38:	99 81       	ldd	r25, Y+1	; 0x01
     b3a:	b7 de       	rcall	.-658    	; 0x8aa <set_usart_txrx_direction>
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	7f 90       	pop	r7
     b54:	6f 90       	pop	r6
     b56:	5f 90       	pop	r5
     b58:	4f 90       	pop	r4
     b5a:	3f 90       	pop	r3
     b5c:	2f 90       	pop	r2
     b5e:	08 95       	ret

00000b60 <DebugPrint>:
 * Print a string of information on the UART C1 (DEBUG) interface.
 * @param   *debugData	String of information
 * @param   value		Temporarily string value to add a cariage return and new line feed
 */
void DebugPrint (char *debugData){
	uart_puts(&uartC1, debugData);
     b60:	bc 01       	movw	r22, r24
     b62:	83 e9       	ldi	r24, 0x93	; 147
     b64:	92 e2       	ldi	r25, 0x22	; 34
     b66:	8c ce       	rjmp	.-744    	; 0x880 <uart_puts>
     b68:	08 95       	ret

00000b6a <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
     b6a:	bc 01       	movw	r22, r24
     b6c:	8c e8       	ldi	r24, 0x8C	; 140
     b6e:	90 e2       	ldi	r25, 0x20	; 32
     b70:	87 ce       	rjmp	.-754    	; 0x880 <uart_puts>
     b72:	08 95       	ret

00000b74 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     b74:	fc 01       	movw	r30, r24
     b76:	60 83       	st	Z, r22
     b78:	71 83       	std	Z+1, r23	; 0x01
     b7a:	42 83       	std	Z+2, r20	; 0x02
     b7c:	ec 5f       	subi	r30, 0xFC	; 252
     b7e:	fd 4f       	sbci	r31, 0xFD	; 253
     b80:	10 82       	st	Z, r1
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	10 82       	st	Z, r1
     b86:	33 96       	adiw	r30, 0x03	; 3
     b88:	10 82       	st	Z, r1
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	10 82       	st	Z, r1
     b8e:	08 95       	ret

00000b90 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     b90:	fc 01       	movw	r30, r24
     b92:	eb 5f       	subi	r30, 0xFB	; 251
     b94:	fd 4f       	sbci	r31, 0xFD	; 253
     b96:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     b98:	31 96       	adiw	r30, 0x01	; 1
     b9a:	30 81       	ld	r19, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	92 0f       	add	r25, r18
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	93 13       	cpse	r25, r19
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <USART_TXBuffer_FreeSpace+0x18>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
}
     ba8:	08 95       	ret

00000baa <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     bb0:	dc 01       	movw	r26, r24
     bb2:	ab 5f       	subi	r26, 0xFB	; 251
     bb4:	bd 4f       	sbci	r27, 0xFD	; 253
     bb6:	9c 91       	ld	r25, X
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     bb8:	11 96       	adiw	r26, 0x01	; 1
     bba:	2c 91       	ld	r18, X
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     bbc:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	92 13       	cpse	r25, r18
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <USART_TXBuffer_PutByte+0x1c>
     bc4:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     bc6:	88 23       	and	r24, r24
     bc8:	b1 f0       	breq	.+44     	; 0xbf6 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     bca:	ef 01       	movw	r28, r30
     bcc:	cb 5f       	subi	r28, 0xFB	; 251
     bce:	dd 4f       	sbci	r29, 0xFD	; 253
     bd0:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
     bd2:	df 01       	movw	r26, r30
     bd4:	a9 0f       	add	r26, r25
     bd6:	b1 1d       	adc	r27, r1
     bd8:	ad 5f       	subi	r26, 0xFD	; 253
     bda:	be 4f       	sbci	r27, 0xFE	; 254
     bdc:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     bde:	9f 5f       	subi	r25, 0xFF	; 255
     be0:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     be2:	a0 81       	ld	r26, Z
     be4:	b1 81       	ldd	r27, Z+1	; 0x01
     be6:	13 96       	adiw	r26, 0x03	; 3
     be8:	9c 91       	ld	r25, X
     bea:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     bec:	9c 7f       	andi	r25, 0xFC	; 252
     bee:	22 81       	ldd	r18, Z+2	; 0x02
     bf0:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     bf2:	13 96       	adiw	r26, 0x03	; 3
     bf4:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     bfc:	fc 01       	movw	r30, r24
     bfe:	ed 5f       	subi	r30, 0xFD	; 253
     c00:	fd 4f       	sbci	r31, 0xFD	; 253
     c02:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     c04:	31 96       	adiw	r30, 0x01	; 1
     c06:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	29 13       	cpse	r18, r25
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <USART_RXBufferData_Available+0x14>
     c0e:	80 e0       	ldi	r24, 0x00	; 0
}
     c10:	08 95       	ret

00000c12 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     c12:	fc 01       	movw	r30, r24
     c14:	ec 5f       	subi	r30, 0xFC	; 252
     c16:	fd 4f       	sbci	r31, 0xFD	; 253
     c18:	20 81       	ld	r18, Z
     c1a:	dc 01       	movw	r26, r24
     c1c:	a2 0f       	add	r26, r18
     c1e:	b1 1d       	adc	r27, r1
     c20:	13 96       	adiw	r26, 0x03	; 3
     c22:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     c24:	90 81       	ld	r25, Z
     c26:	9f 5f       	subi	r25, 0xFF	; 255
     c28:	90 83       	st	Z, r25

	return ans;
}
     c2a:	08 95       	ret

00000c2c <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     c2c:	fc 01       	movw	r30, r24
     c2e:	ed 5f       	subi	r30, 0xFD	; 253
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	20 81       	ld	r18, Z
     c34:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     c36:	31 96       	adiw	r30, 0x01	; 1
     c38:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     c3a:	dc 01       	movw	r26, r24
     c3c:	ed 91       	ld	r30, X+
     c3e:	fc 91       	ld	r31, X
     c40:	11 97       	sbiw	r26, 0x01	; 1
     c42:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     c44:	23 17       	cp	r18, r19
     c46:	59 f0       	breq	.+22     	; 0xc5e <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     c48:	fc 01       	movw	r30, r24
     c4a:	ed 5f       	subi	r30, 0xFD	; 253
     c4c:	fd 4f       	sbci	r31, 0xFD	; 253
     c4e:	30 81       	ld	r19, Z
     c50:	a3 0f       	add	r26, r19
     c52:	b1 1d       	adc	r27, r1
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     c58:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     c5e:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     c60:	08 95       	ret

00000c62 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     c66:	fc 01       	movw	r30, r24
     c68:	ea 5f       	subi	r30, 0xFA	; 250
     c6a:	fd 4f       	sbci	r31, 0xFD	; 253
     c6c:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	30 81       	ld	r19, Z
     c72:	32 13       	cpse	r19, r18
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     c76:	dc 01       	movw	r26, r24
     c78:	ed 91       	ld	r30, X+
     c7a:	fc 91       	ld	r31, X
     c7c:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     c7e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     c80:	83 83       	std	Z+3, r24	; 0x03
     c82:	11 c0       	rjmp	.+34     	; 0xca6 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     c84:	fc 01       	movw	r30, r24
     c86:	ea 5f       	subi	r30, 0xFA	; 250
     c88:	fd 4f       	sbci	r31, 0xFD	; 253
     c8a:	20 81       	ld	r18, Z
     c8c:	dc 01       	movw	r26, r24
     c8e:	a2 0f       	add	r26, r18
     c90:	b1 1d       	adc	r27, r1
     c92:	ad 5f       	subi	r26, 0xFD	; 253
     c94:	be 4f       	sbci	r27, 0xFE	; 254
     c96:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     c98:	ec 01       	movw	r28, r24
     c9a:	a8 81       	ld	r26, Y
     c9c:	b9 81       	ldd	r27, Y+1	; 0x01
     c9e:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     ca0:	80 81       	ld	r24, Z
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 83       	st	Z, r24
	}
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <__subsf3>:
     cac:	50 58       	subi	r21, 0x80	; 128

00000cae <__addsf3>:
     cae:	bb 27       	eor	r27, r27
     cb0:	aa 27       	eor	r26, r26
     cb2:	0e d0       	rcall	.+28     	; 0xcd0 <__addsf3x>
     cb4:	48 c1       	rjmp	.+656    	; 0xf46 <__fp_round>
     cb6:	39 d1       	rcall	.+626    	; 0xf2a <__fp_pscA>
     cb8:	30 f0       	brcs	.+12     	; 0xcc6 <__addsf3+0x18>
     cba:	3e d1       	rcall	.+636    	; 0xf38 <__fp_pscB>
     cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__addsf3+0x18>
     cbe:	31 f4       	brne	.+12     	; 0xccc <__addsf3+0x1e>
     cc0:	9f 3f       	cpi	r25, 0xFF	; 255
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__addsf3+0x1a>
     cc4:	1e f4       	brtc	.+6      	; 0xccc <__addsf3+0x1e>
     cc6:	2e c1       	rjmp	.+604    	; 0xf24 <__fp_nan>
     cc8:	0e f4       	brtc	.+2      	; 0xccc <__addsf3+0x1e>
     cca:	e0 95       	com	r30
     ccc:	e7 fb       	bst	r30, 7
     cce:	24 c1       	rjmp	.+584    	; 0xf18 <__fp_inf>

00000cd0 <__addsf3x>:
     cd0:	e9 2f       	mov	r30, r25
     cd2:	4a d1       	rcall	.+660    	; 0xf68 <__fp_split3>
     cd4:	80 f3       	brcs	.-32     	; 0xcb6 <__addsf3+0x8>
     cd6:	ba 17       	cp	r27, r26
     cd8:	62 07       	cpc	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	95 07       	cpc	r25, r21
     ce0:	18 f0       	brcs	.+6      	; 0xce8 <__addsf3x+0x18>
     ce2:	71 f4       	brne	.+28     	; 0xd00 <__addsf3x+0x30>
     ce4:	9e f5       	brtc	.+102    	; 0xd4c <__addsf3x+0x7c>
     ce6:	62 c1       	rjmp	.+708    	; 0xfac <__fp_zero>
     ce8:	0e f4       	brtc	.+2      	; 0xcec <__addsf3x+0x1c>
     cea:	e0 95       	com	r30
     cec:	0b 2e       	mov	r0, r27
     cee:	ba 2f       	mov	r27, r26
     cf0:	a0 2d       	mov	r26, r0
     cf2:	0b 01       	movw	r0, r22
     cf4:	b9 01       	movw	r22, r18
     cf6:	90 01       	movw	r18, r0
     cf8:	0c 01       	movw	r0, r24
     cfa:	ca 01       	movw	r24, r20
     cfc:	a0 01       	movw	r20, r0
     cfe:	11 24       	eor	r1, r1
     d00:	ff 27       	eor	r31, r31
     d02:	59 1b       	sub	r21, r25
     d04:	99 f0       	breq	.+38     	; 0xd2c <__addsf3x+0x5c>
     d06:	59 3f       	cpi	r21, 0xF9	; 249
     d08:	50 f4       	brcc	.+20     	; 0xd1e <__addsf3x+0x4e>
     d0a:	50 3e       	cpi	r21, 0xE0	; 224
     d0c:	68 f1       	brcs	.+90     	; 0xd68 <__addsf3x+0x98>
     d0e:	1a 16       	cp	r1, r26
     d10:	f0 40       	sbci	r31, 0x00	; 0
     d12:	a2 2f       	mov	r26, r18
     d14:	23 2f       	mov	r18, r19
     d16:	34 2f       	mov	r19, r20
     d18:	44 27       	eor	r20, r20
     d1a:	58 5f       	subi	r21, 0xF8	; 248
     d1c:	f3 cf       	rjmp	.-26     	; 0xd04 <__addsf3x+0x34>
     d1e:	46 95       	lsr	r20
     d20:	37 95       	ror	r19
     d22:	27 95       	ror	r18
     d24:	a7 95       	ror	r26
     d26:	f0 40       	sbci	r31, 0x00	; 0
     d28:	53 95       	inc	r21
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <__addsf3x+0x4e>
     d2c:	7e f4       	brtc	.+30     	; 0xd4c <__addsf3x+0x7c>
     d2e:	1f 16       	cp	r1, r31
     d30:	ba 0b       	sbc	r27, r26
     d32:	62 0b       	sbc	r22, r18
     d34:	73 0b       	sbc	r23, r19
     d36:	84 0b       	sbc	r24, r20
     d38:	ba f0       	brmi	.+46     	; 0xd68 <__addsf3x+0x98>
     d3a:	91 50       	subi	r25, 0x01	; 1
     d3c:	a1 f0       	breq	.+40     	; 0xd66 <__addsf3x+0x96>
     d3e:	ff 0f       	add	r31, r31
     d40:	bb 1f       	adc	r27, r27
     d42:	66 1f       	adc	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	c2 f7       	brpl	.-16     	; 0xd3a <__addsf3x+0x6a>
     d4a:	0e c0       	rjmp	.+28     	; 0xd68 <__addsf3x+0x98>
     d4c:	ba 0f       	add	r27, r26
     d4e:	62 1f       	adc	r22, r18
     d50:	73 1f       	adc	r23, r19
     d52:	84 1f       	adc	r24, r20
     d54:	48 f4       	brcc	.+18     	; 0xd68 <__addsf3x+0x98>
     d56:	87 95       	ror	r24
     d58:	77 95       	ror	r23
     d5a:	67 95       	ror	r22
     d5c:	b7 95       	ror	r27
     d5e:	f7 95       	ror	r31
     d60:	9e 3f       	cpi	r25, 0xFE	; 254
     d62:	08 f0       	brcs	.+2      	; 0xd66 <__addsf3x+0x96>
     d64:	b3 cf       	rjmp	.-154    	; 0xccc <__addsf3+0x1e>
     d66:	93 95       	inc	r25
     d68:	88 0f       	add	r24, r24
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__addsf3x+0x9e>
     d6c:	99 27       	eor	r25, r25
     d6e:	ee 0f       	add	r30, r30
     d70:	97 95       	ror	r25
     d72:	87 95       	ror	r24
     d74:	08 95       	ret

00000d76 <__divsf3>:
     d76:	0c d0       	rcall	.+24     	; 0xd90 <__divsf3x>
     d78:	e6 c0       	rjmp	.+460    	; 0xf46 <__fp_round>
     d7a:	de d0       	rcall	.+444    	; 0xf38 <__fp_pscB>
     d7c:	40 f0       	brcs	.+16     	; 0xd8e <__divsf3+0x18>
     d7e:	d5 d0       	rcall	.+426    	; 0xf2a <__fp_pscA>
     d80:	30 f0       	brcs	.+12     	; 0xd8e <__divsf3+0x18>
     d82:	21 f4       	brne	.+8      	; 0xd8c <__divsf3+0x16>
     d84:	5f 3f       	cpi	r21, 0xFF	; 255
     d86:	19 f0       	breq	.+6      	; 0xd8e <__divsf3+0x18>
     d88:	c7 c0       	rjmp	.+398    	; 0xf18 <__fp_inf>
     d8a:	51 11       	cpse	r21, r1
     d8c:	10 c1       	rjmp	.+544    	; 0xfae <__fp_szero>
     d8e:	ca c0       	rjmp	.+404    	; 0xf24 <__fp_nan>

00000d90 <__divsf3x>:
     d90:	eb d0       	rcall	.+470    	; 0xf68 <__fp_split3>
     d92:	98 f3       	brcs	.-26     	; 0xd7a <__divsf3+0x4>

00000d94 <__divsf3_pse>:
     d94:	99 23       	and	r25, r25
     d96:	c9 f3       	breq	.-14     	; 0xd8a <__divsf3+0x14>
     d98:	55 23       	and	r21, r21
     d9a:	b1 f3       	breq	.-20     	; 0xd88 <__divsf3+0x12>
     d9c:	95 1b       	sub	r25, r21
     d9e:	55 0b       	sbc	r21, r21
     da0:	bb 27       	eor	r27, r27
     da2:	aa 27       	eor	r26, r26
     da4:	62 17       	cp	r22, r18
     da6:	73 07       	cpc	r23, r19
     da8:	84 07       	cpc	r24, r20
     daa:	38 f0       	brcs	.+14     	; 0xdba <__divsf3_pse+0x26>
     dac:	9f 5f       	subi	r25, 0xFF	; 255
     dae:	5f 4f       	sbci	r21, 0xFF	; 255
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	44 1f       	adc	r20, r20
     db6:	aa 1f       	adc	r26, r26
     db8:	a9 f3       	breq	.-22     	; 0xda4 <__divsf3_pse+0x10>
     dba:	33 d0       	rcall	.+102    	; 0xe22 <__divsf3_pse+0x8e>
     dbc:	0e 2e       	mov	r0, r30
     dbe:	3a f0       	brmi	.+14     	; 0xdce <__divsf3_pse+0x3a>
     dc0:	e0 e8       	ldi	r30, 0x80	; 128
     dc2:	30 d0       	rcall	.+96     	; 0xe24 <__divsf3_pse+0x90>
     dc4:	91 50       	subi	r25, 0x01	; 1
     dc6:	50 40       	sbci	r21, 0x00	; 0
     dc8:	e6 95       	lsr	r30
     dca:	00 1c       	adc	r0, r0
     dcc:	ca f7       	brpl	.-14     	; 0xdc0 <__divsf3_pse+0x2c>
     dce:	29 d0       	rcall	.+82     	; 0xe22 <__divsf3_pse+0x8e>
     dd0:	fe 2f       	mov	r31, r30
     dd2:	27 d0       	rcall	.+78     	; 0xe22 <__divsf3_pse+0x8e>
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	bb 1f       	adc	r27, r27
     ddc:	26 17       	cp	r18, r22
     dde:	37 07       	cpc	r19, r23
     de0:	48 07       	cpc	r20, r24
     de2:	ab 07       	cpc	r26, r27
     de4:	b0 e8       	ldi	r27, 0x80	; 128
     de6:	09 f0       	breq	.+2      	; 0xdea <__divsf3_pse+0x56>
     de8:	bb 0b       	sbc	r27, r27
     dea:	80 2d       	mov	r24, r0
     dec:	bf 01       	movw	r22, r30
     dee:	ff 27       	eor	r31, r31
     df0:	93 58       	subi	r25, 0x83	; 131
     df2:	5f 4f       	sbci	r21, 0xFF	; 255
     df4:	2a f0       	brmi	.+10     	; 0xe00 <__divsf3_pse+0x6c>
     df6:	9e 3f       	cpi	r25, 0xFE	; 254
     df8:	51 05       	cpc	r21, r1
     dfa:	68 f0       	brcs	.+26     	; 0xe16 <__divsf3_pse+0x82>
     dfc:	8d c0       	rjmp	.+282    	; 0xf18 <__fp_inf>
     dfe:	d7 c0       	rjmp	.+430    	; 0xfae <__fp_szero>
     e00:	5f 3f       	cpi	r21, 0xFF	; 255
     e02:	ec f3       	brlt	.-6      	; 0xdfe <__divsf3_pse+0x6a>
     e04:	98 3e       	cpi	r25, 0xE8	; 232
     e06:	dc f3       	brlt	.-10     	; 0xdfe <__divsf3_pse+0x6a>
     e08:	86 95       	lsr	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	b7 95       	ror	r27
     e10:	f7 95       	ror	r31
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	c9 f7       	brne	.-14     	; 0xe08 <__divsf3_pse+0x74>
     e16:	88 0f       	add	r24, r24
     e18:	91 1d       	adc	r25, r1
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	97 f9       	bld	r25, 7
     e20:	08 95       	ret
     e22:	e1 e0       	ldi	r30, 0x01	; 1
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	bb 1f       	adc	r27, r27
     e2c:	62 17       	cp	r22, r18
     e2e:	73 07       	cpc	r23, r19
     e30:	84 07       	cpc	r24, r20
     e32:	ba 07       	cpc	r27, r26
     e34:	20 f0       	brcs	.+8      	; 0xe3e <__divsf3_pse+0xaa>
     e36:	62 1b       	sub	r22, r18
     e38:	73 0b       	sbc	r23, r19
     e3a:	84 0b       	sbc	r24, r20
     e3c:	ba 0b       	sbc	r27, r26
     e3e:	ee 1f       	adc	r30, r30
     e40:	88 f7       	brcc	.-30     	; 0xe24 <__divsf3_pse+0x90>
     e42:	e0 95       	com	r30
     e44:	08 95       	ret

00000e46 <__fixunssfsi>:
     e46:	98 d0       	rcall	.+304    	; 0xf78 <__fp_splitA>
     e48:	88 f0       	brcs	.+34     	; 0xe6c <__fixunssfsi+0x26>
     e4a:	9f 57       	subi	r25, 0x7F	; 127
     e4c:	90 f0       	brcs	.+36     	; 0xe72 <__fixunssfsi+0x2c>
     e4e:	b9 2f       	mov	r27, r25
     e50:	99 27       	eor	r25, r25
     e52:	b7 51       	subi	r27, 0x17	; 23
     e54:	a0 f0       	brcs	.+40     	; 0xe7e <__fixunssfsi+0x38>
     e56:	d1 f0       	breq	.+52     	; 0xe8c <__fixunssfsi+0x46>
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	1a f0       	brmi	.+6      	; 0xe68 <__fixunssfsi+0x22>
     e62:	ba 95       	dec	r27
     e64:	c9 f7       	brne	.-14     	; 0xe58 <__fixunssfsi+0x12>
     e66:	12 c0       	rjmp	.+36     	; 0xe8c <__fixunssfsi+0x46>
     e68:	b1 30       	cpi	r27, 0x01	; 1
     e6a:	81 f0       	breq	.+32     	; 0xe8c <__fixunssfsi+0x46>
     e6c:	9f d0       	rcall	.+318    	; 0xfac <__fp_zero>
     e6e:	b1 e0       	ldi	r27, 0x01	; 1
     e70:	08 95       	ret
     e72:	9c c0       	rjmp	.+312    	; 0xfac <__fp_zero>
     e74:	67 2f       	mov	r22, r23
     e76:	78 2f       	mov	r23, r24
     e78:	88 27       	eor	r24, r24
     e7a:	b8 5f       	subi	r27, 0xF8	; 248
     e7c:	39 f0       	breq	.+14     	; 0xe8c <__fixunssfsi+0x46>
     e7e:	b9 3f       	cpi	r27, 0xF9	; 249
     e80:	cc f3       	brlt	.-14     	; 0xe74 <__fixunssfsi+0x2e>
     e82:	86 95       	lsr	r24
     e84:	77 95       	ror	r23
     e86:	67 95       	ror	r22
     e88:	b3 95       	inc	r27
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <__fixunssfsi+0x3c>
     e8c:	3e f4       	brtc	.+14     	; 0xe9c <__fixunssfsi+0x56>
     e8e:	90 95       	com	r25
     e90:	80 95       	com	r24
     e92:	70 95       	com	r23
     e94:	61 95       	neg	r22
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	08 95       	ret

00000e9e <__floatunsisf>:
     e9e:	e8 94       	clt
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <__floatsisf+0x12>

00000ea2 <__floatsisf>:
     ea2:	97 fb       	bst	r25, 7
     ea4:	3e f4       	brtc	.+14     	; 0xeb4 <__floatsisf+0x12>
     ea6:	90 95       	com	r25
     ea8:	80 95       	com	r24
     eaa:	70 95       	com	r23
     eac:	61 95       	neg	r22
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	8f 4f       	sbci	r24, 0xFF	; 255
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	99 23       	and	r25, r25
     eb6:	a9 f0       	breq	.+42     	; 0xee2 <__floatsisf+0x40>
     eb8:	f9 2f       	mov	r31, r25
     eba:	96 e9       	ldi	r25, 0x96	; 150
     ebc:	bb 27       	eor	r27, r27
     ebe:	93 95       	inc	r25
     ec0:	f6 95       	lsr	r31
     ec2:	87 95       	ror	r24
     ec4:	77 95       	ror	r23
     ec6:	67 95       	ror	r22
     ec8:	b7 95       	ror	r27
     eca:	f1 11       	cpse	r31, r1
     ecc:	f8 cf       	rjmp	.-16     	; 0xebe <__floatsisf+0x1c>
     ece:	fa f4       	brpl	.+62     	; 0xf0e <__floatsisf+0x6c>
     ed0:	bb 0f       	add	r27, r27
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__floatsisf+0x36>
     ed4:	60 ff       	sbrs	r22, 0
     ed6:	1b c0       	rjmp	.+54     	; 0xf0e <__floatsisf+0x6c>
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	16 c0       	rjmp	.+44     	; 0xf0e <__floatsisf+0x6c>
     ee2:	88 23       	and	r24, r24
     ee4:	11 f0       	breq	.+4      	; 0xeea <__floatsisf+0x48>
     ee6:	96 e9       	ldi	r25, 0x96	; 150
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <__floatsisf+0x6a>
     eea:	77 23       	and	r23, r23
     eec:	21 f0       	breq	.+8      	; 0xef6 <__floatsisf+0x54>
     eee:	9e e8       	ldi	r25, 0x8E	; 142
     ef0:	87 2f       	mov	r24, r23
     ef2:	76 2f       	mov	r23, r22
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <__floatsisf+0x5e>
     ef6:	66 23       	and	r22, r22
     ef8:	71 f0       	breq	.+28     	; 0xf16 <__floatsisf+0x74>
     efa:	96 e8       	ldi	r25, 0x86	; 134
     efc:	86 2f       	mov	r24, r22
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	2a f0       	brmi	.+10     	; 0xf0e <__floatsisf+0x6c>
     f04:	9a 95       	dec	r25
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	da f7       	brpl	.-10     	; 0xf04 <__floatsisf+0x62>
     f0e:	88 0f       	add	r24, r24
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	97 f9       	bld	r25, 7
     f16:	08 95       	ret

00000f18 <__fp_inf>:
     f18:	97 f9       	bld	r25, 7
     f1a:	9f 67       	ori	r25, 0x7F	; 127
     f1c:	80 e8       	ldi	r24, 0x80	; 128
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	08 95       	ret

00000f24 <__fp_nan>:
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	80 ec       	ldi	r24, 0xC0	; 192
     f28:	08 95       	ret

00000f2a <__fp_pscA>:
     f2a:	00 24       	eor	r0, r0
     f2c:	0a 94       	dec	r0
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	09 06       	cpc	r0, r25
     f36:	08 95       	ret

00000f38 <__fp_pscB>:
     f38:	00 24       	eor	r0, r0
     f3a:	0a 94       	dec	r0
     f3c:	12 16       	cp	r1, r18
     f3e:	13 06       	cpc	r1, r19
     f40:	14 06       	cpc	r1, r20
     f42:	05 06       	cpc	r0, r21
     f44:	08 95       	ret

00000f46 <__fp_round>:
     f46:	09 2e       	mov	r0, r25
     f48:	03 94       	inc	r0
     f4a:	00 0c       	add	r0, r0
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_round+0xc>
     f4e:	88 23       	and	r24, r24
     f50:	52 f0       	brmi	.+20     	; 0xf66 <__fp_round+0x20>
     f52:	bb 0f       	add	r27, r27
     f54:	40 f4       	brcc	.+16     	; 0xf66 <__fp_round+0x20>
     f56:	bf 2b       	or	r27, r31
     f58:	11 f4       	brne	.+4      	; 0xf5e <__fp_round+0x18>
     f5a:	60 ff       	sbrs	r22, 0
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <__fp_round+0x20>
     f5e:	6f 5f       	subi	r22, 0xFF	; 255
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	08 95       	ret

00000f68 <__fp_split3>:
     f68:	57 fd       	sbrc	r21, 7
     f6a:	90 58       	subi	r25, 0x80	; 128
     f6c:	44 0f       	add	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	59 f0       	breq	.+22     	; 0xf88 <__fp_splitA+0x10>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	71 f0       	breq	.+28     	; 0xf92 <__fp_splitA+0x1a>
     f76:	47 95       	ror	r20

00000f78 <__fp_splitA>:
     f78:	88 0f       	add	r24, r24
     f7a:	97 fb       	bst	r25, 7
     f7c:	99 1f       	adc	r25, r25
     f7e:	61 f0       	breq	.+24     	; 0xf98 <__fp_splitA+0x20>
     f80:	9f 3f       	cpi	r25, 0xFF	; 255
     f82:	79 f0       	breq	.+30     	; 0xfa2 <__fp_splitA+0x2a>
     f84:	87 95       	ror	r24
     f86:	08 95       	ret
     f88:	12 16       	cp	r1, r18
     f8a:	13 06       	cpc	r1, r19
     f8c:	14 06       	cpc	r1, r20
     f8e:	55 1f       	adc	r21, r21
     f90:	f2 cf       	rjmp	.-28     	; 0xf76 <__fp_split3+0xe>
     f92:	46 95       	lsr	r20
     f94:	f1 df       	rcall	.-30     	; 0xf78 <__fp_splitA>
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <__fp_splitA+0x30>
     f98:	16 16       	cp	r1, r22
     f9a:	17 06       	cpc	r1, r23
     f9c:	18 06       	cpc	r1, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	f1 cf       	rjmp	.-30     	; 0xf84 <__fp_splitA+0xc>
     fa2:	86 95       	lsr	r24
     fa4:	71 05       	cpc	r23, r1
     fa6:	61 05       	cpc	r22, r1
     fa8:	08 94       	sec
     faa:	08 95       	ret

00000fac <__fp_zero>:
     fac:	e8 94       	clt

00000fae <__fp_szero>:
     fae:	bb 27       	eor	r27, r27
     fb0:	66 27       	eor	r22, r22
     fb2:	77 27       	eor	r23, r23
     fb4:	cb 01       	movw	r24, r22
     fb6:	97 f9       	bld	r25, 7
     fb8:	08 95       	ret

00000fba <__mulsf3>:
     fba:	0b d0       	rcall	.+22     	; 0xfd2 <__mulsf3x>
     fbc:	c4 cf       	rjmp	.-120    	; 0xf46 <__fp_round>
     fbe:	b5 df       	rcall	.-150    	; 0xf2a <__fp_pscA>
     fc0:	28 f0       	brcs	.+10     	; 0xfcc <__mulsf3+0x12>
     fc2:	ba df       	rcall	.-140    	; 0xf38 <__fp_pscB>
     fc4:	18 f0       	brcs	.+6      	; 0xfcc <__mulsf3+0x12>
     fc6:	95 23       	and	r25, r21
     fc8:	09 f0       	breq	.+2      	; 0xfcc <__mulsf3+0x12>
     fca:	a6 cf       	rjmp	.-180    	; 0xf18 <__fp_inf>
     fcc:	ab cf       	rjmp	.-170    	; 0xf24 <__fp_nan>
     fce:	11 24       	eor	r1, r1
     fd0:	ee cf       	rjmp	.-36     	; 0xfae <__fp_szero>

00000fd2 <__mulsf3x>:
     fd2:	ca df       	rcall	.-108    	; 0xf68 <__fp_split3>
     fd4:	a0 f3       	brcs	.-24     	; 0xfbe <__mulsf3+0x4>

00000fd6 <__mulsf3_pse>:
     fd6:	95 9f       	mul	r25, r21
     fd8:	d1 f3       	breq	.-12     	; 0xfce <__mulsf3+0x14>
     fda:	95 0f       	add	r25, r21
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	55 1f       	adc	r21, r21
     fe0:	62 9f       	mul	r22, r18
     fe2:	f0 01       	movw	r30, r0
     fe4:	72 9f       	mul	r23, r18
     fe6:	bb 27       	eor	r27, r27
     fe8:	f0 0d       	add	r31, r0
     fea:	b1 1d       	adc	r27, r1
     fec:	63 9f       	mul	r22, r19
     fee:	aa 27       	eor	r26, r26
     ff0:	f0 0d       	add	r31, r0
     ff2:	b1 1d       	adc	r27, r1
     ff4:	aa 1f       	adc	r26, r26
     ff6:	64 9f       	mul	r22, r20
     ff8:	66 27       	eor	r22, r22
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	66 1f       	adc	r22, r22
    1000:	82 9f       	mul	r24, r18
    1002:	22 27       	eor	r18, r18
    1004:	b0 0d       	add	r27, r0
    1006:	a1 1d       	adc	r26, r1
    1008:	62 1f       	adc	r22, r18
    100a:	73 9f       	mul	r23, r19
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	62 1f       	adc	r22, r18
    1012:	83 9f       	mul	r24, r19
    1014:	a0 0d       	add	r26, r0
    1016:	61 1d       	adc	r22, r1
    1018:	22 1f       	adc	r18, r18
    101a:	74 9f       	mul	r23, r20
    101c:	33 27       	eor	r19, r19
    101e:	a0 0d       	add	r26, r0
    1020:	61 1d       	adc	r22, r1
    1022:	23 1f       	adc	r18, r19
    1024:	84 9f       	mul	r24, r20
    1026:	60 0d       	add	r22, r0
    1028:	21 1d       	adc	r18, r1
    102a:	82 2f       	mov	r24, r18
    102c:	76 2f       	mov	r23, r22
    102e:	6a 2f       	mov	r22, r26
    1030:	11 24       	eor	r1, r1
    1032:	9f 57       	subi	r25, 0x7F	; 127
    1034:	50 40       	sbci	r21, 0x00	; 0
    1036:	8a f0       	brmi	.+34     	; 0x105a <__mulsf3_pse+0x84>
    1038:	e1 f0       	breq	.+56     	; 0x1072 <__mulsf3_pse+0x9c>
    103a:	88 23       	and	r24, r24
    103c:	4a f0       	brmi	.+18     	; 0x1050 <__mulsf3_pse+0x7a>
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	bb 1f       	adc	r27, r27
    1044:	66 1f       	adc	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	88 1f       	adc	r24, r24
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	a9 f7       	brne	.-22     	; 0x103a <__mulsf3_pse+0x64>
    1050:	9e 3f       	cpi	r25, 0xFE	; 254
    1052:	51 05       	cpc	r21, r1
    1054:	70 f0       	brcs	.+28     	; 0x1072 <__mulsf3_pse+0x9c>
    1056:	60 cf       	rjmp	.-320    	; 0xf18 <__fp_inf>
    1058:	aa cf       	rjmp	.-172    	; 0xfae <__fp_szero>
    105a:	5f 3f       	cpi	r21, 0xFF	; 255
    105c:	ec f3       	brlt	.-6      	; 0x1058 <__mulsf3_pse+0x82>
    105e:	98 3e       	cpi	r25, 0xE8	; 232
    1060:	dc f3       	brlt	.-10     	; 0x1058 <__mulsf3_pse+0x82>
    1062:	86 95       	lsr	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	b7 95       	ror	r27
    106a:	f7 95       	ror	r31
    106c:	e7 95       	ror	r30
    106e:	9f 5f       	subi	r25, 0xFF	; 255
    1070:	c1 f7       	brne	.-16     	; 0x1062 <__mulsf3_pse+0x8c>
    1072:	fe 2b       	or	r31, r30
    1074:	88 0f       	add	r24, r24
    1076:	91 1d       	adc	r25, r1
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	97 f9       	bld	r25, 7
    107e:	08 95       	ret

00001080 <round>:
    1080:	7b df       	rcall	.-266    	; 0xf78 <__fp_splitA>
    1082:	e0 f0       	brcs	.+56     	; 0x10bc <round+0x3c>
    1084:	9e 37       	cpi	r25, 0x7E	; 126
    1086:	d8 f0       	brcs	.+54     	; 0x10be <round+0x3e>
    1088:	96 39       	cpi	r25, 0x96	; 150
    108a:	b8 f4       	brcc	.+46     	; 0x10ba <round+0x3a>
    108c:	9e 38       	cpi	r25, 0x8E	; 142
    108e:	48 f4       	brcc	.+18     	; 0x10a2 <round+0x22>
    1090:	67 2f       	mov	r22, r23
    1092:	78 2f       	mov	r23, r24
    1094:	88 27       	eor	r24, r24
    1096:	98 5f       	subi	r25, 0xF8	; 248
    1098:	f9 cf       	rjmp	.-14     	; 0x108c <round+0xc>
    109a:	86 95       	lsr	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	93 95       	inc	r25
    10a2:	95 39       	cpi	r25, 0x95	; 149
    10a4:	d0 f3       	brcs	.-12     	; 0x109a <round+0x1a>
    10a6:	b6 2f       	mov	r27, r22
    10a8:	b1 70       	andi	r27, 0x01	; 1
    10aa:	6b 0f       	add	r22, r27
    10ac:	71 1d       	adc	r23, r1
    10ae:	81 1d       	adc	r24, r1
    10b0:	20 f4       	brcc	.+8      	; 0x10ba <round+0x3a>
    10b2:	87 95       	ror	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	93 95       	inc	r25
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <__fp_mintl>
    10bc:	1c c0       	rjmp	.+56     	; 0x10f6 <__fp_mpack>
    10be:	77 cf       	rjmp	.-274    	; 0xfae <__fp_szero>

000010c0 <__fp_mintl>:
    10c0:	88 23       	and	r24, r24
    10c2:	71 f4       	brne	.+28     	; 0x10e0 <__fp_mintl+0x20>
    10c4:	77 23       	and	r23, r23
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <__fp_mintl+0x10>
    10c8:	98 50       	subi	r25, 0x08	; 8
    10ca:	87 2b       	or	r24, r23
    10cc:	76 2f       	mov	r23, r22
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <__fp_mintl+0x1e>
    10d0:	66 23       	and	r22, r22
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <__fp_mintl+0x18>
    10d4:	99 27       	eor	r25, r25
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <__fp_mintl+0x32>
    10d8:	90 51       	subi	r25, 0x10	; 16
    10da:	86 2b       	or	r24, r22
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	2a f0       	brmi	.+10     	; 0x10ec <__fp_mintl+0x2c>
    10e2:	9a 95       	dec	r25
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	da f7       	brpl	.-10     	; 0x10e2 <__fp_mintl+0x22>
    10ec:	88 0f       	add	r24, r24
    10ee:	96 95       	lsr	r25
    10f0:	87 95       	ror	r24
    10f2:	97 f9       	bld	r25, 7
    10f4:	08 95       	ret

000010f6 <__fp_mpack>:
    10f6:	9f 3f       	cpi	r25, 0xFF	; 255
    10f8:	31 f0       	breq	.+12     	; 0x1106 <__fp_mpack_finite+0xc>

000010fa <__fp_mpack_finite>:
    10fa:	91 50       	subi	r25, 0x01	; 1
    10fc:	20 f4       	brcc	.+8      	; 0x1106 <__fp_mpack_finite+0xc>
    10fe:	87 95       	ror	r24
    1100:	77 95       	ror	r23
    1102:	67 95       	ror	r22
    1104:	b7 95       	ror	r27
    1106:	88 0f       	add	r24, r24
    1108:	91 1d       	adc	r25, r1
    110a:	96 95       	lsr	r25
    110c:	87 95       	ror	r24
    110e:	97 f9       	bld	r25, 7
    1110:	08 95       	ret

00001112 <malloc>:
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	10 f4       	brcc	.+4      	; 0x1120 <malloc+0xe>
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	e0 91 1c 25 	lds	r30, 0x251C
    1124:	f0 91 1d 25 	lds	r31, 0x251D
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	c0 e0       	ldi	r28, 0x00	; 0
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	11 f1       	breq	.+68     	; 0x1178 <malloc+0x66>
    1134:	40 81       	ld	r20, Z
    1136:	51 81       	ldd	r21, Z+1	; 0x01
    1138:	48 17       	cp	r20, r24
    113a:	59 07       	cpc	r21, r25
    113c:	c0 f0       	brcs	.+48     	; 0x116e <malloc+0x5c>
    113e:	48 17       	cp	r20, r24
    1140:	59 07       	cpc	r21, r25
    1142:	61 f4       	brne	.+24     	; 0x115c <malloc+0x4a>
    1144:	82 81       	ldd	r24, Z+2	; 0x02
    1146:	93 81       	ldd	r25, Z+3	; 0x03
    1148:	20 97       	sbiw	r28, 0x00	; 0
    114a:	19 f0       	breq	.+6      	; 0x1152 <malloc+0x40>
    114c:	8a 83       	std	Y+2, r24	; 0x02
    114e:	9b 83       	std	Y+3, r25	; 0x03
    1150:	2b c0       	rjmp	.+86     	; 0x11a8 <malloc+0x96>
    1152:	80 93 1c 25 	sts	0x251C, r24
    1156:	90 93 1d 25 	sts	0x251D, r25
    115a:	26 c0       	rjmp	.+76     	; 0x11a8 <malloc+0x96>
    115c:	21 15       	cp	r18, r1
    115e:	31 05       	cpc	r19, r1
    1160:	19 f0       	breq	.+6      	; 0x1168 <malloc+0x56>
    1162:	42 17       	cp	r20, r18
    1164:	53 07       	cpc	r21, r19
    1166:	18 f4       	brcc	.+6      	; 0x116e <malloc+0x5c>
    1168:	9a 01       	movw	r18, r20
    116a:	be 01       	movw	r22, r28
    116c:	df 01       	movw	r26, r30
    116e:	ef 01       	movw	r28, r30
    1170:	02 80       	ldd	r0, Z+2	; 0x02
    1172:	f3 81       	ldd	r31, Z+3	; 0x03
    1174:	e0 2d       	mov	r30, r0
    1176:	dc cf       	rjmp	.-72     	; 0x1130 <malloc+0x1e>
    1178:	21 15       	cp	r18, r1
    117a:	31 05       	cpc	r19, r1
    117c:	09 f1       	breq	.+66     	; 0x11c0 <malloc+0xae>
    117e:	28 1b       	sub	r18, r24
    1180:	39 0b       	sbc	r19, r25
    1182:	24 30       	cpi	r18, 0x04	; 4
    1184:	31 05       	cpc	r19, r1
    1186:	90 f4       	brcc	.+36     	; 0x11ac <malloc+0x9a>
    1188:	12 96       	adiw	r26, 0x02	; 2
    118a:	8d 91       	ld	r24, X+
    118c:	9c 91       	ld	r25, X
    118e:	13 97       	sbiw	r26, 0x03	; 3
    1190:	61 15       	cp	r22, r1
    1192:	71 05       	cpc	r23, r1
    1194:	21 f0       	breq	.+8      	; 0x119e <malloc+0x8c>
    1196:	fb 01       	movw	r30, r22
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	93 83       	std	Z+3, r25	; 0x03
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <malloc+0x94>
    119e:	80 93 1c 25 	sts	0x251C, r24
    11a2:	90 93 1d 25 	sts	0x251D, r25
    11a6:	fd 01       	movw	r30, r26
    11a8:	32 96       	adiw	r30, 0x02	; 2
    11aa:	44 c0       	rjmp	.+136    	; 0x1234 <malloc+0x122>
    11ac:	fd 01       	movw	r30, r26
    11ae:	e2 0f       	add	r30, r18
    11b0:	f3 1f       	adc	r31, r19
    11b2:	81 93       	st	Z+, r24
    11b4:	91 93       	st	Z+, r25
    11b6:	22 50       	subi	r18, 0x02	; 2
    11b8:	31 09       	sbc	r19, r1
    11ba:	2d 93       	st	X+, r18
    11bc:	3c 93       	st	X, r19
    11be:	3a c0       	rjmp	.+116    	; 0x1234 <malloc+0x122>
    11c0:	20 91 1a 25 	lds	r18, 0x251A
    11c4:	30 91 1b 25 	lds	r19, 0x251B
    11c8:	23 2b       	or	r18, r19
    11ca:	41 f4       	brne	.+16     	; 0x11dc <malloc+0xca>
    11cc:	20 91 02 20 	lds	r18, 0x2002
    11d0:	30 91 03 20 	lds	r19, 0x2003
    11d4:	20 93 1a 25 	sts	0x251A, r18
    11d8:	30 93 1b 25 	sts	0x251B, r19
    11dc:	20 91 00 20 	lds	r18, 0x2000
    11e0:	30 91 01 20 	lds	r19, 0x2001
    11e4:	21 15       	cp	r18, r1
    11e6:	31 05       	cpc	r19, r1
    11e8:	41 f4       	brne	.+16     	; 0x11fa <malloc+0xe8>
    11ea:	2d b7       	in	r18, 0x3d	; 61
    11ec:	3e b7       	in	r19, 0x3e	; 62
    11ee:	40 91 04 20 	lds	r20, 0x2004
    11f2:	50 91 05 20 	lds	r21, 0x2005
    11f6:	24 1b       	sub	r18, r20
    11f8:	35 0b       	sbc	r19, r21
    11fa:	e0 91 1a 25 	lds	r30, 0x251A
    11fe:	f0 91 1b 25 	lds	r31, 0x251B
    1202:	e2 17       	cp	r30, r18
    1204:	f3 07       	cpc	r31, r19
    1206:	a0 f4       	brcc	.+40     	; 0x1230 <malloc+0x11e>
    1208:	2e 1b       	sub	r18, r30
    120a:	3f 0b       	sbc	r19, r31
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	78 f0       	brcs	.+30     	; 0x1230 <malloc+0x11e>
    1212:	ac 01       	movw	r20, r24
    1214:	4e 5f       	subi	r20, 0xFE	; 254
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	24 17       	cp	r18, r20
    121a:	35 07       	cpc	r19, r21
    121c:	48 f0       	brcs	.+18     	; 0x1230 <malloc+0x11e>
    121e:	4e 0f       	add	r20, r30
    1220:	5f 1f       	adc	r21, r31
    1222:	40 93 1a 25 	sts	0x251A, r20
    1226:	50 93 1b 25 	sts	0x251B, r21
    122a:	81 93       	st	Z+, r24
    122c:	91 93       	st	Z+, r25
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <malloc+0x122>
    1230:	e0 e0       	ldi	r30, 0x00	; 0
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	cf 01       	movw	r24, r30
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <free>:
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	09 f4       	brne	.+2      	; 0x124a <free+0xe>
    1248:	8c c0       	rjmp	.+280    	; 0x1362 <free+0x126>
    124a:	fc 01       	movw	r30, r24
    124c:	32 97       	sbiw	r30, 0x02	; 2
    124e:	12 82       	std	Z+2, r1	; 0x02
    1250:	13 82       	std	Z+3, r1	; 0x03
    1252:	00 91 1c 25 	lds	r16, 0x251C
    1256:	10 91 1d 25 	lds	r17, 0x251D
    125a:	01 15       	cp	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	81 f4       	brne	.+32     	; 0x1280 <free+0x44>
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	20 91 1a 25 	lds	r18, 0x251A
    126c:	30 91 1b 25 	lds	r19, 0x251B
    1270:	28 17       	cp	r18, r24
    1272:	39 07       	cpc	r19, r25
    1274:	79 f5       	brne	.+94     	; 0x12d4 <free+0x98>
    1276:	e0 93 1a 25 	sts	0x251A, r30
    127a:	f0 93 1b 25 	sts	0x251B, r31
    127e:	71 c0       	rjmp	.+226    	; 0x1362 <free+0x126>
    1280:	d8 01       	movw	r26, r16
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	ae 17       	cp	r26, r30
    1288:	bf 07       	cpc	r27, r31
    128a:	50 f4       	brcc	.+20     	; 0x12a0 <free+0x64>
    128c:	12 96       	adiw	r26, 0x02	; 2
    128e:	2d 91       	ld	r18, X+
    1290:	3c 91       	ld	r19, X
    1292:	13 97       	sbiw	r26, 0x03	; 3
    1294:	ad 01       	movw	r20, r26
    1296:	21 15       	cp	r18, r1
    1298:	31 05       	cpc	r19, r1
    129a:	09 f1       	breq	.+66     	; 0x12de <free+0xa2>
    129c:	d9 01       	movw	r26, r18
    129e:	f3 cf       	rjmp	.-26     	; 0x1286 <free+0x4a>
    12a0:	9d 01       	movw	r18, r26
    12a2:	da 01       	movw	r26, r20
    12a4:	22 83       	std	Z+2, r18	; 0x02
    12a6:	33 83       	std	Z+3, r19	; 0x03
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	86 0f       	add	r24, r22
    12ae:	97 1f       	adc	r25, r23
    12b0:	82 17       	cp	r24, r18
    12b2:	93 07       	cpc	r25, r19
    12b4:	69 f4       	brne	.+26     	; 0x12d0 <free+0x94>
    12b6:	ec 01       	movw	r28, r24
    12b8:	28 81       	ld	r18, Y
    12ba:	39 81       	ldd	r19, Y+1	; 0x01
    12bc:	26 0f       	add	r18, r22
    12be:	37 1f       	adc	r19, r23
    12c0:	2e 5f       	subi	r18, 0xFE	; 254
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	20 83       	st	Z, r18
    12c6:	31 83       	std	Z+1, r19	; 0x01
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	82 83       	std	Z+2, r24	; 0x02
    12ce:	93 83       	std	Z+3, r25	; 0x03
    12d0:	45 2b       	or	r20, r21
    12d2:	29 f4       	brne	.+10     	; 0x12de <free+0xa2>
    12d4:	e0 93 1c 25 	sts	0x251C, r30
    12d8:	f0 93 1d 25 	sts	0x251D, r31
    12dc:	42 c0       	rjmp	.+132    	; 0x1362 <free+0x126>
    12de:	12 96       	adiw	r26, 0x02	; 2
    12e0:	ed 93       	st	X+, r30
    12e2:	fc 93       	st	X, r31
    12e4:	13 97       	sbiw	r26, 0x03	; 3
    12e6:	ed 01       	movw	r28, r26
    12e8:	49 91       	ld	r20, Y+
    12ea:	59 91       	ld	r21, Y+
    12ec:	9e 01       	movw	r18, r28
    12ee:	24 0f       	add	r18, r20
    12f0:	35 1f       	adc	r19, r21
    12f2:	e2 17       	cp	r30, r18
    12f4:	f3 07       	cpc	r31, r19
    12f6:	71 f4       	brne	.+28     	; 0x1314 <free+0xd8>
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	84 0f       	add	r24, r20
    12fe:	95 1f       	adc	r25, r21
    1300:	02 96       	adiw	r24, 0x02	; 2
    1302:	8d 93       	st	X+, r24
    1304:	9c 93       	st	X, r25
    1306:	11 97       	sbiw	r26, 0x01	; 1
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	12 96       	adiw	r26, 0x02	; 2
    130e:	8d 93       	st	X+, r24
    1310:	9c 93       	st	X, r25
    1312:	13 97       	sbiw	r26, 0x03	; 3
    1314:	e0 e0       	ldi	r30, 0x00	; 0
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	d8 01       	movw	r26, r16
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	8d 91       	ld	r24, X+
    131e:	9c 91       	ld	r25, X
    1320:	13 97       	sbiw	r26, 0x03	; 3
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	19 f0       	breq	.+6      	; 0x132c <free+0xf0>
    1326:	f8 01       	movw	r30, r16
    1328:	8c 01       	movw	r16, r24
    132a:	f6 cf       	rjmp	.-20     	; 0x1318 <free+0xdc>
    132c:	8d 91       	ld	r24, X+
    132e:	9c 91       	ld	r25, X
    1330:	98 01       	movw	r18, r16
    1332:	2e 5f       	subi	r18, 0xFE	; 254
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	20 91 1a 25 	lds	r18, 0x251A
    133e:	30 91 1b 25 	lds	r19, 0x251B
    1342:	28 17       	cp	r18, r24
    1344:	39 07       	cpc	r19, r25
    1346:	69 f4       	brne	.+26     	; 0x1362 <free+0x126>
    1348:	30 97       	sbiw	r30, 0x00	; 0
    134a:	29 f4       	brne	.+10     	; 0x1356 <free+0x11a>
    134c:	10 92 1c 25 	sts	0x251C, r1
    1350:	10 92 1d 25 	sts	0x251D, r1
    1354:	02 c0       	rjmp	.+4      	; 0x135a <free+0x11e>
    1356:	12 82       	std	Z+2, r1	; 0x02
    1358:	13 82       	std	Z+3, r1	; 0x03
    135a:	00 93 1a 25 	sts	0x251A, r16
    135e:	10 93 1b 25 	sts	0x251B, r17
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <memset>:
    136c:	dc 01       	movw	r26, r24
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <memset+0x6>
    1370:	6d 93       	st	X+, r22
    1372:	41 50       	subi	r20, 0x01	; 1
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	e0 f7       	brcc	.-8      	; 0x1370 <memset+0x4>
    1378:	08 95       	ret

0000137a <strcat>:
    137a:	fb 01       	movw	r30, r22
    137c:	dc 01       	movw	r26, r24
    137e:	0d 90       	ld	r0, X+
    1380:	00 20       	and	r0, r0
    1382:	e9 f7       	brne	.-6      	; 0x137e <strcat+0x4>
    1384:	11 97       	sbiw	r26, 0x01	; 1
    1386:	01 90       	ld	r0, Z+
    1388:	0d 92       	st	X+, r0
    138a:	00 20       	and	r0, r0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <strcat+0xc>
    138e:	08 95       	ret

00001390 <strcmp>:
    1390:	fb 01       	movw	r30, r22
    1392:	dc 01       	movw	r26, r24
    1394:	8d 91       	ld	r24, X+
    1396:	01 90       	ld	r0, Z+
    1398:	80 19       	sub	r24, r0
    139a:	01 10       	cpse	r0, r1
    139c:	d9 f3       	breq	.-10     	; 0x1394 <strcmp+0x4>
    139e:	99 0b       	sbc	r25, r25
    13a0:	08 95       	ret

000013a2 <strcpy>:
    13a2:	fb 01       	movw	r30, r22
    13a4:	dc 01       	movw	r26, r24
    13a6:	01 90       	ld	r0, Z+
    13a8:	0d 92       	st	X+, r0
    13aa:	00 20       	and	r0, r0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <strcpy+0x4>
    13ae:	08 95       	ret

000013b0 <__itoa_ncheck>:
    13b0:	bb 27       	eor	r27, r27
    13b2:	4a 30       	cpi	r20, 0x0A	; 10
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <__itoa_ncheck+0x12>
    13b6:	99 23       	and	r25, r25
    13b8:	22 f4       	brpl	.+8      	; 0x13c2 <__itoa_ncheck+0x12>
    13ba:	bd e2       	ldi	r27, 0x2D	; 45
    13bc:	90 95       	com	r25
    13be:	81 95       	neg	r24
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	01 c0       	rjmp	.+2      	; 0x13c6 <__utoa_common>

000013c4 <__utoa_ncheck>:
    13c4:	bb 27       	eor	r27, r27

000013c6 <__utoa_common>:
    13c6:	fb 01       	movw	r30, r22
    13c8:	55 27       	eor	r21, r21
    13ca:	aa 27       	eor	r26, r26
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	aa 1f       	adc	r26, r26
    13d2:	a4 17       	cp	r26, r20
    13d4:	10 f0       	brcs	.+4      	; 0x13da <__utoa_common+0x14>
    13d6:	a4 1b       	sub	r26, r20
    13d8:	83 95       	inc	r24
    13da:	50 51       	subi	r21, 0x10	; 16
    13dc:	b9 f7       	brne	.-18     	; 0x13cc <__utoa_common+0x6>
    13de:	a0 5d       	subi	r26, 0xD0	; 208
    13e0:	aa 33       	cpi	r26, 0x3A	; 58
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <__utoa_common+0x20>
    13e4:	a9 5d       	subi	r26, 0xD9	; 217
    13e6:	a1 93       	st	Z+, r26
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	79 f7       	brne	.-34     	; 0x13ca <__utoa_common+0x4>
    13ec:	b1 11       	cpse	r27, r1
    13ee:	b1 93       	st	Z+, r27
    13f0:	11 92       	st	Z+, r1
    13f2:	cb 01       	movw	r24, r22
    13f4:	00 c0       	rjmp	.+0      	; 0x13f6 <strrev>

000013f6 <strrev>:
    13f6:	dc 01       	movw	r26, r24
    13f8:	fc 01       	movw	r30, r24
    13fa:	67 2f       	mov	r22, r23
    13fc:	71 91       	ld	r23, Z+
    13fe:	77 23       	and	r23, r23
    1400:	e1 f7       	brne	.-8      	; 0x13fa <strrev+0x4>
    1402:	32 97       	sbiw	r30, 0x02	; 2
    1404:	04 c0       	rjmp	.+8      	; 0x140e <strrev+0x18>
    1406:	7c 91       	ld	r23, X
    1408:	6d 93       	st	X+, r22
    140a:	70 83       	st	Z, r23
    140c:	62 91       	ld	r22, -Z
    140e:	ae 17       	cp	r26, r30
    1410:	bf 07       	cpc	r27, r31
    1412:	c8 f3       	brcs	.-14     	; 0x1406 <strrev+0x10>
    1414:	08 95       	ret

00001416 <_exit>:
    1416:	f8 94       	cli

00001418 <__stop_program>:
    1418:	ff cf       	rjmp	.-2      	; 0x1418 <__stop_program>
