
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00802000  00000f6e  00001002  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000048e  0080207a  0080207a  0000107c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022d4  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b39  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e35  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000053c  00000000  00000000  00004e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009cf  00000000  00000000  000053ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014eb  00000000  00000000  00005d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00007266  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	00 c1       	rjmp	.+512    	; 0x266 <__vector_25>
  66:	00 00       	nop
  68:	32 c1       	rjmp	.+612    	; 0x2ce <__vector_26>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c1       	rjmp	.+708    	; 0x336 <__vector_28>
  72:	00 00       	nop
  74:	94 c1       	rjmp	.+808    	; 0x39e <__vector_29>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e6       	ldi	r30, 0x6E	; 110
 21c:	ff e0       	ldi	r31, 0x0F	; 15
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	aa 37       	cpi	r26, 0x7A	; 122
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	25 e2       	ldi	r18, 0x25	; 37
 232:	aa e7       	ldi	r26, 0x7A	; 122
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a8 30       	cpi	r26, 0x08	; 8
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	e2 d0       	rcall	.+452    	; 0x406 <main>
 242:	93 c6       	rjmp	.+3366   	; 0xf6a <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
 246:	88 ed       	ldi	r24, 0xD8	; 216
 248:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
 24a:	e0 e5       	ldi	r30, 0x50	; 80
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	82 60       	ori	r24, 0x02	; 2
 252:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 254:	81 81       	ldd	r24, Z+1	; 0x01
 256:	81 ff       	sbrs	r24, 1
 258:	fd cf       	rjmp	.-6      	; 0x254 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
 25a:	88 ed       	ldi	r24, 0xD8	; 216
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 40 00 	sts	0x0040, r24
 264:	08 95       	ret

00000266 <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	08 b6       	in	r0, 0x38	; 56
 272:	0f 92       	push	r0
 274:	18 be       	out	0x38, r1	; 56
 276:	09 b6       	in	r0, 0x39	; 57
 278:	0f 92       	push	r0
 27a:	19 be       	out	0x39, r1	; 57
 27c:	0b b6       	in	r0, 0x3b	; 59
 27e:	0f 92       	push	r0
 280:	1b be       	out	0x3b, r1	; 59
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
 29a:	8a e7       	ldi	r24, 0x7A	; 122
 29c:	90 e2       	ldi	r25, 0x20	; 32
 29e:	d0 d3       	rcall	.+1952   	; 0xa40 <USART_RXComplete>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	09 be       	out	0x39, r0	; 57
 2c0:	0f 90       	pop	r0
 2c2:	08 be       	out	0x38, r0	; 56
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	08 b6       	in	r0, 0x38	; 56
 2da:	0f 92       	push	r0
 2dc:	18 be       	out	0x38, r1	; 56
 2de:	09 b6       	in	r0, 0x39	; 57
 2e0:	0f 92       	push	r0
 2e2:	19 be       	out	0x39, r1	; 57
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	1b be       	out	0x3b, r1	; 59
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
 302:	8a e7       	ldi	r24, 0x7A	; 122
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	b7 d3       	rcall	.+1902   	; 0xa76 <USART_DataRegEmpty>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	09 be       	out	0x39, r0	; 57
 328:	0f 90       	pop	r0
 32a:	08 be       	out	0x38, r0	; 56
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	08 b6       	in	r0, 0x38	; 56
 342:	0f 92       	push	r0
 344:	18 be       	out	0x38, r1	; 56
 346:	09 b6       	in	r0, 0x39	; 57
 348:	0f 92       	push	r0
 34a:	19 be       	out	0x39, r1	; 57
 34c:	0b b6       	in	r0, 0x3b	; 59
 34e:	0f 92       	push	r0
 350:	1b be       	out	0x3b, r1	; 59
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
 36a:	81 e8       	ldi	r24, 0x81	; 129
 36c:	92 e2       	ldi	r25, 0x22	; 34
 36e:	68 d3       	rcall	.+1744   	; 0xa40 <USART_RXComplete>
}
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	09 be       	out	0x39, r0	; 57
 390:	0f 90       	pop	r0
 392:	08 be       	out	0x38, r0	; 56
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	08 b6       	in	r0, 0x38	; 56
 3aa:	0f 92       	push	r0
 3ac:	18 be       	out	0x38, r1	; 56
 3ae:	09 b6       	in	r0, 0x39	; 57
 3b0:	0f 92       	push	r0
 3b2:	19 be       	out	0x39, r1	; 57
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	1b be       	out	0x3b, r1	; 59
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
 3d2:	81 e8       	ldi	r24, 0x81	; 129
 3d4:	92 e2       	ldi	r25, 0x22	; 34
 3d6:	4f d3       	rcall	.+1694   	; 0xa76 <USART_DataRegEmpty>
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0b be       	out	0x3b, r0	; 59
 3f4:	0f 90       	pop	r0
 3f6:	09 be       	out	0x39, r0	; 57
 3f8:	0f 90       	pop	r0
 3fa:	08 be       	out	0x38, r0	; 56
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <main>:

void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x);

#define UPDATEINTERVAL 1000			// in ms

int main(void){
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	c0 58       	subi	r28, 0x80	; 128
 410:	d1 09       	sbc	r29, r1
 412:	cd bf       	out	0x3d, r28	; 61
 414:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
 416:	17 df       	rcall	.-466    	; 0x246 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
 418:	c1 2c       	mov	r12, r1
 41a:	e1 2c       	mov	r14, r1
 41c:	12 ec       	ldi	r17, 0xC2	; 194
 41e:	f1 2e       	mov	r15, r17
 420:	01 e0       	ldi	r16, 0x01	; 1
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	38 e4       	ldi	r19, 0x48	; 72
 428:	48 ee       	ldi	r20, 0xE8	; 232
 42a:	51 e0       	ldi	r21, 0x01	; 1
 42c:	60 ea       	ldi	r22, 0xA0	; 160
 42e:	78 e0       	ldi	r23, 0x08	; 8
 430:	8a e7       	ldi	r24, 0x7A	; 122
 432:	90 e2       	ldi	r25, 0x20	; 32
 434:	43 d2       	rcall	.+1158   	; 0x8bc <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	38 e4       	ldi	r19, 0x48	; 72
 43a:	48 ee       	ldi	r20, 0xE8	; 232
 43c:	51 e0       	ldi	r21, 0x01	; 1
 43e:	60 eb       	ldi	r22, 0xB0	; 176
 440:	78 e0       	ldi	r23, 0x08	; 8
 442:	81 e8       	ldi	r24, 0x81	; 129
 444:	92 e2       	ldi	r25, 0x22	; 34
 446:	3a d2       	rcall	.+1140   	; 0x8bc <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	e0 ea       	ldi	r30, 0xA0	; 160
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	82 83       	std	Z+2, r24	; 0x02
	sei();
 450:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 452:	2f ef       	ldi	r18, 0xFF	; 255
 454:	87 ea       	ldi	r24, 0xA7	; 167
 456:	91 e6       	ldi	r25, 0x61	; 97
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <main+0x52>
 460:	00 c0       	rjmp	.+0      	; 0x462 <main+0x5c>
 462:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e2       	ldi	r25, 0x20	; 32
 468:	8b d2       	rcall	.+1302   	; 0x980 <Command>
	Command(SBIV500);
 46a:	89 e0       	ldi	r24, 0x09	; 9
 46c:	90 e2       	ldi	r25, 0x20	; 32
 46e:	88 d2       	rcall	.+1296   	; 0x980 <Command>
	
	
	while(1) {
		char message[128];
		
		memset(message, EOS, strlen(message));
 470:	8e 01       	movw	r16, r28
 472:	0f 5f       	subi	r16, 0xFF	; 255
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	f8 01       	movw	r30, r16
 478:	01 90       	ld	r0, Z+
 47a:	00 20       	and	r0, r0
 47c:	e9 f7       	brne	.-6      	; 0x478 <main+0x72>
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	af 01       	movw	r20, r30
 482:	40 1b       	sub	r20, r16
 484:	51 0b       	sbc	r21, r17
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	c8 01       	movw	r24, r16
 48c:	4c d5       	rcall	.+2712   	; 0xf26 <memset>
 48e:	2f ef       	ldi	r18, 0xFF	; 255
 490:	87 ea       	ldi	r24, 0xA7	; 167
 492:	91 e6       	ldi	r25, 0x61	; 97
 494:	21 50       	subi	r18, 0x01	; 1
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <main+0x8e>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <main+0x98>
 49e:	00 00       	nop
		_delay_ms(UPDATEINTERVAL);
		DebugPrint(CLEARTERM);
 4a0:	84 e1       	ldi	r24, 0x14	; 20
 4a2:	90 e2       	ldi	r25, 0x20	; 32
 4a4:	68 d2       	rcall	.+1232   	; 0x976 <DebugPrint>
		DebugPrint("message:\r\n");
 4a6:	8f e1       	ldi	r24, 0x1F	; 31
 4a8:	90 e2       	ldi	r25, 0x20	; 32
 4aa:	65 d2       	rcall	.+1226   	; 0x976 <DebugPrint>
		//DebugPrint(TranslateMessage());
		strcpy(message,TranslateMessage());
 4ac:	88 d0       	rcall	.+272    	; 0x5be <TranslateMessage>
 4ae:	bc 01       	movw	r22, r24
 4b0:	c8 01       	movw	r24, r16
 4b2:	54 d5       	rcall	.+2728   	; 0xf5c <strcpy>
		
//		DebugPrint(message);
		if (ValidateMessage(message,TYPE_RRN) == true){
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	c8 01       	movw	r24, r16
 4b8:	05 d0       	rcall	.+10     	; 0x4c4 <ValidateMessage>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	e1 f6       	brne	.-72     	; 0x476 <main+0x70>
			DetermineCommandtype(message);
 4be:	c8 01       	movw	r24, r16
 4c0:	17 d0       	rcall	.+46     	; 0x4f0 <DetermineCommandtype>
		}

	}
 4c2:	d9 cf       	rjmp	.-78     	; 0x476 <main+0x70>

000004c4 <ValidateMessage>:
 * @param   command    Type of command
 * @return  true/false 
 */
uint8_t ValidateMessage (char *message, uint8_t command){
    uint8_t messageLength;
    messageLength = strlen(message) - 2;
 4c4:	fc 01       	movw	r30, r24
 4c6:	01 90       	ld	r0, Z+
 4c8:	00 20       	and	r0, r0
 4ca:	e9 f7       	brne	.-6      	; 0x4c6 <ValidateMessage+0x2>
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	e8 1b       	sub	r30, r24
 4d0:	f9 0b       	sbc	r31, r25

    switch (command) {
 4d2:	61 30       	cpi	r22, 0x01	; 1
 4d4:	29 f4       	brne	.+10     	; 0x4e0 <ValidateMessage+0x1c>
        case 1: // command RRN
            if (messageLength == RRN_LENGTH){
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	e9 32       	cpi	r30, 0x29	; 41
 4da:	19 f0       	breq	.+6      	; 0x4e2 <ValidateMessage+0x1e>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
        case 3: // command XX
            if (messageLength == RRN_LENGTH){
                return false;
            }
        default:
            return false;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 4e2:	08 95       	ret

000004e4 <RRN_function>:
 * Ranging result notification flag
 * @param  	
 * @param	
 */
void RRN_function (char *message){
	uart_puts(&uartC1, "functieeee\r\n");
 4e4:	6a e2       	ldi	r22, 0x2A	; 42
 4e6:	70 e2       	ldi	r23, 0x20	; 32
 4e8:	81 e8       	ldi	r24, 0x81	; 129
 4ea:	92 e2       	ldi	r25, 0x22	; 34
 4ec:	d6 c0       	rjmp	.+428    	; 0x69a <uart_puts>
 4ee:	08 95       	ret

000004f0 <DetermineCommandtype>:
/**
 * Determines the meaning of the message
 * @param  	value	received value
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	25 97       	sbiw	r28, 0x05	; 5
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	de bf       	out	0x3e, r29	; 62
 502:	8c 01       	movw	r16, r24
	char *messagePointer;
	char command[5];
	uint8_t count = 0;
	
	memset(command, EOS, strlen(command));	
 504:	ce 01       	movw	r24, r28
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	fc 01       	movw	r30, r24
 50a:	01 90       	ld	r0, Z+
 50c:	00 20       	and	r0, r0
 50e:	e9 f7       	brne	.-6      	; 0x50a <DetermineCommandtype+0x1a>
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	af 01       	movw	r20, r30
 514:	48 1b       	sub	r20, r24
 516:	59 0b       	sbc	r21, r25
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	04 d5       	rcall	.+2568   	; 0xf26 <memset>
	messagePointer = message;
	
	DebugPrint("Determing message\r\n");
 51e:	87 e3       	ldi	r24, 0x37	; 55
 520:	90 e2       	ldi	r25, 0x20	; 32
 522:	29 d2       	rcall	.+1106   	; 0x976 <DebugPrint>
	DebugPrint(message);
 524:	c8 01       	movw	r24, r16
 526:	27 d2       	rcall	.+1102   	; 0x976 <DebugPrint>
	DebugPrint("\r\n");
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	90 e2       	ldi	r25, 0x20	; 32
 52c:	24 d2       	rcall	.+1096   	; 0x976 <DebugPrint>
	
	while(*messagePointer != ':'){
 52e:	f8 01       	movw	r30, r16
 530:	80 81       	ld	r24, Z
		if(*messagePointer == ':'){ break;};
 532:	8a 33       	cpi	r24, 0x3A	; 58
 534:	69 f0       	breq	.+26     	; 0x550 <DetermineCommandtype+0x60>
 536:	31 96       	adiw	r30, 0x01	; 1
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[5];
	uint8_t count = 0;
 538:	90 e0       	ldi	r25, 0x00	; 0
	DebugPrint("\r\n");
	
	while(*messagePointer != ':'){
		if(*messagePointer == ':'){ break;};
		//uart_putc(&uartC1, *messagePointer);
		command[count] = *messagePointer;
 53a:	a1 e0       	ldi	r26, 0x01	; 1
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	ac 0f       	add	r26, r28
 540:	bd 1f       	adc	r27, r29
 542:	a9 0f       	add	r26, r25
 544:	b1 1d       	adc	r27, r1
 546:	8c 93       	st	X, r24
		*messagePointer++;
		count++;
 548:	9f 5f       	subi	r25, 0xFF	; 255
	
	DebugPrint("Determing message\r\n");
	DebugPrint(message);
	DebugPrint("\r\n");
	
	while(*messagePointer != ':'){
 54a:	81 91       	ld	r24, Z+
		if(*messagePointer == ':'){ break;};
 54c:	8a 33       	cpi	r24, 0x3A	; 58
 54e:	a9 f7       	brne	.-22     	; 0x53a <DetermineCommandtype+0x4a>
		//uart_putc(&uartC1, *messagePointer);
		command[count] = *messagePointer;
		*messagePointer++;
		count++;
	}
	DebugPrint("Command:\r\n");
 550:	8b e4       	ldi	r24, 0x4B	; 75
 552:	90 e2       	ldi	r25, 0x20	; 32
 554:	10 d2       	rcall	.+1056   	; 0x976 <DebugPrint>
	DebugPrint(command);
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	0d d2       	rcall	.+1050   	; 0x976 <DebugPrint>
	char test[] = {'*','R','R','N', '\0'};

	if		(strcmp(command,	"*RRN") == 0){	// Data Notification Message
 55c:	66 e5       	ldi	r22, 0x56	; 86
 55e:	70 e2       	ldi	r23, 0x20	; 32
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	f2 d4       	rcall	.+2532   	; 0xf4a <strcmp>
 566:	89 2b       	or	r24, r25
 568:	19 f4       	brne	.+6      	; 0x570 <DetermineCommandtype+0x80>
		RRN_function(message);
 56a:	c8 01       	movw	r24, r16
 56c:	bb df       	rcall	.-138    	; 0x4e4 <RRN_function>
 56e:	1f c0       	rjmp	.+62     	; 0x5ae <DetermineCommandtype+0xbe>
	}else if(strcmp(command, "DNO") == 0){	// Node ID Notification Message
 570:	6b e5       	ldi	r22, 0x5B	; 91
 572:	70 e2       	ldi	r23, 0x20	; 32
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	e8 d4       	rcall	.+2512   	; 0xf4a <strcmp>
 57a:	89 2b       	or	r24, r25
 57c:	c1 f0       	breq	.+48     	; 0x5ae <DetermineCommandtype+0xbe>
		
	}else if(strcmp(command, "NIN") == 0){	// Ranging Result Notification Message
 57e:	6f e5       	ldi	r22, 0x5F	; 95
 580:	70 e2       	ldi	r23, 0x20	; 32
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	e1 d4       	rcall	.+2498   	; 0xf4a <strcmp>
 588:	89 2b       	or	r24, r25
 58a:	89 f0       	breq	.+34     	; 0x5ae <DetermineCommandtype+0xbe>
		//printf("NIN\n");
	}else if(strcmp(command, "SDAT") == 0){	// SDAT Notification Messages
 58c:	63 e6       	ldi	r22, 0x63	; 99
 58e:	70 e2       	ldi	r23, 0x20	; 32
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	da d4       	rcall	.+2484   	; 0xf4a <strcmp>
 596:	89 2b       	or	r24, r25
 598:	51 f0       	breq	.+20     	; 0x5ae <DetermineCommandtype+0xbe>
		//printf("SDAT\n");
	}else if(strcmp(command, "AIR") == 0){	// AIR Notification Message
 59a:	68 e6       	ldi	r22, 0x68	; 104
 59c:	70 e2       	ldi	r23, 0x20	; 32
 59e:	ce 01       	movw	r24, r28
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	d3 d4       	rcall	.+2470   	; 0xf4a <strcmp>
 5a4:	89 2b       	or	r24, r25
 5a6:	19 f0       	breq	.+6      	; 0x5ae <DetermineCommandtype+0xbe>
		//printf("AIR\n");
	}else{
		DebugPrint("No command\r\n");
 5a8:	8c e6       	ldi	r24, 0x6C	; 108
 5aa:	90 e2       	ldi	r25, 0x20	; 32
 5ac:	e4 d1       	rcall	.+968    	; 0x976 <DebugPrint>
	}

}
 5ae:	25 96       	adiw	r28, 0x05	; 5
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <TranslateMessage>:
 * Translates the received message converts characters
 * to a single string
 * @param  	value	received value
 * @return	message pointer to the translated message
 */
char * TranslateMessage (void){
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	c0 58       	subi	r28, 0x80	; 128
 5cc:	d1 09       	sbc	r29, r1
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	de bf       	out	0x3e, r29	; 62
	char value[128];

	memset(message, EOS, strlen(message));
 5d2:	e8 e8       	ldi	r30, 0x88	; 136
 5d4:	f4 e2       	ldi	r31, 0x24	; 36
 5d6:	01 90       	ld	r0, Z+
 5d8:	00 20       	and	r0, r0
 5da:	e9 f7       	brne	.-6      	; 0x5d6 <TranslateMessage+0x18>
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	af 01       	movw	r20, r30
 5e0:	48 58       	subi	r20, 0x88	; 136
 5e2:	54 42       	sbci	r21, 0x24	; 36
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	88 e8       	ldi	r24, 0x88	; 136
 5ea:	94 e2       	ldi	r25, 0x24	; 36
 5ec:	9c d4       	rcall	.+2360   	; 0xf26 <memset>
	memset(value, EOS, strlen(value));
 5ee:	8e 01       	movw	r16, r28
 5f0:	0f 5f       	subi	r16, 0xFF	; 255
 5f2:	1f 4f       	sbci	r17, 0xFF	; 255
 5f4:	f8 01       	movw	r30, r16
 5f6:	01 90       	ld	r0, Z+
 5f8:	00 20       	and	r0, r0
 5fa:	e9 f7       	brne	.-6      	; 0x5f6 <TranslateMessage+0x38>
 5fc:	31 97       	sbiw	r30, 0x01	; 1
 5fe:	af 01       	movw	r20, r30
 600:	40 1b       	sub	r20, r16
 602:	51 0b       	sbc	r21, r17
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	c8 01       	movw	r24, r16
 60a:	8d d4       	rcall	.+2330   	; 0xf26 <memset>

	value[0] = uart_getc(&uartC0);
 60c:	8a e7       	ldi	r24, 0x7A	; 122
 60e:	90 e2       	ldi	r25, 0x20	; 32
 610:	21 d0       	rcall	.+66     	; 0x654 <uart_getc>
 612:	89 83       	std	Y+1, r24	; 0x01
	strcpy(message, value);
 614:	b8 01       	movw	r22, r16
 616:	88 e8       	ldi	r24, 0x88	; 136
 618:	94 e2       	ldi	r25, 0x24	; 36
 61a:	a0 d4       	rcall	.+2368   	; 0xf5c <strcpy>
	while (value[0] != CR){
 61c:	89 81       	ldd	r24, Y+1	; 0x01
 61e:	8d 30       	cpi	r24, 0x0D	; 13
 620:	71 f0       	breq	.+28     	; 0x63e <TranslateMessage+0x80>
		if (value[0] != CR){	
 622:	8d 30       	cpi	r24, 0x0D	; 13
 624:	31 f0       	breq	.+12     	; 0x632 <TranslateMessage+0x74>
			
			strcat(message, value);	
 626:	be 01       	movw	r22, r28
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	88 e8       	ldi	r24, 0x88	; 136
 62e:	94 e2       	ldi	r25, 0x24	; 36
 630:	81 d4       	rcall	.+2306   	; 0xf34 <strcat>
		}
		value[0] = uart_getc(&uartC0);
 632:	8a e7       	ldi	r24, 0x7A	; 122
 634:	90 e2       	ldi	r25, 0x20	; 32
 636:	0e d0       	rcall	.+28     	; 0x654 <uart_getc>
 638:	89 83       	std	Y+1, r24	; 0x01
	memset(message, EOS, strlen(message));
	memset(value, EOS, strlen(value));

	value[0] = uart_getc(&uartC0);
	strcpy(message, value);
	while (value[0] != CR){
 63a:	8d 30       	cpi	r24, 0x0D	; 13
 63c:	91 f7       	brne	.-28     	; 0x622 <TranslateMessage+0x64>
			strcat(message, value);	
		}
		value[0] = uart_getc(&uartC0);
	}
	return message;
 63e:	88 e8       	ldi	r24, 0x88	; 136
 640:	94 e2       	ldi	r25, 0x24	; 36
 642:	c0 58       	subi	r28, 0x80	; 128
 644:	df 4f       	sbci	r29, 0xFF	; 255
 646:	cd bf       	out	0x3d, r28	; 61
 648:	de bf       	out	0x3e, r29	; 62
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	08 95       	ret

00000654 <uart_getc>:
 *
 *  \return received byte from circulair buffer (low byte) or
 *          UART_NO_DATA if buffer is empty
 */
uint16_t uart_getc(USART_data_t *uart)
{
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	ec 01       	movw	r28, r24
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
 65a:	da d1       	rcall	.+948    	; 0xa10 <USART_RXBufferData_Available>
 65c:	88 23       	and	r24, r24
 65e:	49 f0       	breq	.+18     	; 0x672 <uart_getc+0x1e>
    return UART_NO_DATA;
}
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
 660:	e0 eb       	ldi	r30, 0xB0	; 176
 662:	f8 e0       	ldi	r31, 0x08	; 8
 664:	81 81       	ldd	r24, Z+1	; 0x01
 666:	86 ff       	sbrs	r24, 6
 668:	fd cf       	rjmp	.-6      	; 0x664 <uart_getc+0x10>
  data = USART_RXBuffer_GetByte(uart);
 66a:	ce 01       	movw	r24, r28
 66c:	dc d1       	rcall	.+952    	; 0xa26 <USART_RXBuffer_GetByte>

  return (data & 0x00FF);
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <uart_getc+0x22>
{
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
    return UART_NO_DATA;
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	91 e0       	ldi	r25, 0x01	; 1
/*
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );

return USARTC1.DATA;
*/
}
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ec 01       	movw	r28, r24
 684:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
 686:	8f d1       	rcall	.+798    	; 0x9a6 <USART_TXBuffer_FreeSpace>
 688:	88 23       	and	r24, r24
 68a:	19 f0       	breq	.+6      	; 0x692 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
 68c:	61 2f       	mov	r22, r17
 68e:	ce 01       	movw	r24, r28
 690:	96 d1       	rcall	.+812    	; 0x9be <USART_TXBuffer_PutByte>
  }
}
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	08 95       	ret

0000069a <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
 6a4:	eb 01       	movw	r28, r22
 6a6:	21 96       	adiw	r28, 0x01	; 1
 6a8:	fb 01       	movw	r30, r22
 6aa:	60 81       	ld	r22, Z
 6ac:	66 23       	and	r22, r22
 6ae:	29 f0       	breq	.+10     	; 0x6ba <uart_puts+0x20>
    uart_putc(uart, c);
 6b0:	c8 01       	movw	r24, r16
 6b2:	e4 df       	rcall	.-56     	; 0x67c <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
 6b4:	69 91       	ld	r22, Y+
 6b6:	61 11       	cpse	r22, r1
 6b8:	fb cf       	rjmp	.-10     	; 0x6b0 <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
 6c4:	80 3a       	cpi	r24, 0xA0	; 160
 6c6:	28 e0       	ldi	r18, 0x08	; 8
 6c8:	92 07       	cpc	r25, r18
 6ca:	39 f4       	brne	.+14     	; 0x6da <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
 6cc:	e0 e4       	ldi	r30, 0x40	; 64
 6ce:	f6 e0       	ldi	r31, 0x06	; 6
 6d0:	88 e0       	ldi	r24, 0x08	; 8
 6d2:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
 6d4:	84 e0       	ldi	r24, 0x04	; 4
 6d6:	82 83       	std	Z+2, r24	; 0x02
     return;
 6d8:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
 6da:	80 3b       	cpi	r24, 0xB0	; 176
 6dc:	28 e0       	ldi	r18, 0x08	; 8
 6de:	92 07       	cpc	r25, r18
 6e0:	39 f4       	brne	.+14     	; 0x6f0 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
 6e2:	e0 e4       	ldi	r30, 0x40	; 64
 6e4:	f6 e0       	ldi	r31, 0x06	; 6
 6e6:	80 e8       	ldi	r24, 0x80	; 128
 6e8:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
 6ea:	80 e4       	ldi	r24, 0x40	; 64
 6ec:	82 83       	std	Z+2, r24	; 0x02
     return;
 6ee:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
 6f0:	80 3a       	cpi	r24, 0xA0	; 160
 6f2:	29 e0       	ldi	r18, 0x09	; 9
 6f4:	92 07       	cpc	r25, r18
 6f6:	39 f4       	brne	.+14     	; 0x706 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
 6f8:	e0 e6       	ldi	r30, 0x60	; 96
 6fa:	f6 e0       	ldi	r31, 0x06	; 6
 6fc:	88 e0       	ldi	r24, 0x08	; 8
 6fe:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
 700:	84 e0       	ldi	r24, 0x04	; 4
 702:	82 83       	std	Z+2, r24	; 0x02
     return;
 704:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
 706:	80 3b       	cpi	r24, 0xB0	; 176
 708:	29 e0       	ldi	r18, 0x09	; 9
 70a:	92 07       	cpc	r25, r18
 70c:	39 f4       	brne	.+14     	; 0x71c <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
 70e:	e0 e6       	ldi	r30, 0x60	; 96
 710:	f6 e0       	ldi	r31, 0x06	; 6
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
 716:	80 e4       	ldi	r24, 0x40	; 64
 718:	82 83       	std	Z+2, r24	; 0x02
     return;
 71a:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
 71c:	80 3a       	cpi	r24, 0xA0	; 160
 71e:	9a 40       	sbci	r25, 0x0A	; 10
 720:	31 f4       	brne	.+12     	; 0x72e <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
 722:	e0 e8       	ldi	r30, 0x80	; 128
 724:	f6 e0       	ldi	r31, 0x06	; 6
 726:	88 e0       	ldi	r24, 0x08	; 8
 728:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
 72a:	84 e0       	ldi	r24, 0x04	; 4
 72c:	82 83       	std	Z+2, r24	; 0x02
 72e:	08 95       	ret

00000730 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
 730:	4f 92       	push	r4
 732:	5f 92       	push	r5
 734:	6f 92       	push	r6
 736:	7f 92       	push	r7
 738:	8f 92       	push	r8
 73a:	9f 92       	push	r9
 73c:	af 92       	push	r10
 73e:	bf 92       	push	r11
 740:	cf 92       	push	r12
 742:	df 92       	push	r13
 744:	ef 92       	push	r14
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	49 01       	movw	r8, r18
 74e:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
 750:	4e 2d       	mov	r20, r14
 752:	41 70       	andi	r20, 0x01	; 1
 754:	20 e1       	ldi	r18, 0x10	; 16
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	79 01       	movw	r14, r18
 75a:	02 c0       	rjmp	.+4      	; 0x760 <calc_bsel+0x30>
 75c:	f5 94       	asr	r15
 75e:	e7 94       	ror	r14
 760:	4a 95       	dec	r20
 762:	e2 f7       	brpl	.-8      	; 0x75c <calc_bsel+0x2c>
  if ( scale < 0 ) {
 764:	00 23       	and	r16, r16
 766:	0c f0       	brlt	.+2      	; 0x76a <calc_bsel+0x3a>
 768:	39 c0       	rjmp	.+114    	; 0x7dc <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
 76a:	a3 d2       	rcall	.+1350   	; 0xcb2 <__floatunsisf>
 76c:	2b 01       	movw	r4, r22
 76e:	3c 01       	movw	r6, r24
 770:	b7 01       	movw	r22, r14
 772:	77 27       	eor	r23, r23
 774:	88 27       	eor	r24, r24
 776:	77 fd       	sbrc	r23, 7
 778:	80 95       	com	r24
 77a:	98 2f       	mov	r25, r24
 77c:	9c d2       	rcall	.+1336   	; 0xcb6 <__floatsisf>
 77e:	6b 01       	movw	r12, r22
 780:	7c 01       	movw	r14, r24
 782:	c5 01       	movw	r24, r10
 784:	b4 01       	movw	r22, r8
 786:	95 d2       	rcall	.+1322   	; 0xcb2 <__floatunsisf>
 788:	9b 01       	movw	r18, r22
 78a:	ac 01       	movw	r20, r24
 78c:	c7 01       	movw	r24, r14
 78e:	b6 01       	movw	r22, r12
 790:	1e d3       	rcall	.+1596   	; 0xdce <__mulsf3>
 792:	9b 01       	movw	r18, r22
 794:	ac 01       	movw	r20, r24
 796:	c3 01       	movw	r24, r6
 798:	b2 01       	movw	r22, r4
 79a:	f7 d1       	rcall	.+1006   	; 0xb8a <__divsf3>
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	40 e8       	ldi	r20, 0x80	; 128
 7a2:	5f e3       	ldi	r21, 0x3F	; 63
 7a4:	8d d1       	rcall	.+794    	; 0xac0 <__subsf3>
 7a6:	6b 01       	movw	r12, r22
 7a8:	7c 01       	movw	r14, r24
 7aa:	11 27       	eor	r17, r17
 7ac:	01 95       	neg	r16
 7ae:	0c f4       	brge	.+2      	; 0x7b2 <calc_bsel+0x82>
 7b0:	10 95       	com	r17
 7b2:	61 e0       	ldi	r22, 0x01	; 1
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <calc_bsel+0x8c>
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	0a 95       	dec	r16
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <calc_bsel+0x88>
 7c0:	88 27       	eor	r24, r24
 7c2:	77 fd       	sbrc	r23, 7
 7c4:	80 95       	com	r24
 7c6:	98 2f       	mov	r25, r24
 7c8:	76 d2       	rcall	.+1260   	; 0xcb6 <__floatsisf>
 7ca:	9b 01       	movw	r18, r22
 7cc:	ac 01       	movw	r20, r24
 7ce:	c7 01       	movw	r24, r14
 7d0:	b6 01       	movw	r22, r12
 7d2:	fd d2       	rcall	.+1530   	; 0xdce <__mulsf3>
 7d4:	5f d3       	rcall	.+1726   	; 0xe94 <round>
 7d6:	41 d2       	rcall	.+1154   	; 0xc5a <__fixunssfsi>
 7d8:	cb 01       	movw	r24, r22
 7da:	34 c0       	rjmp	.+104    	; 0x844 <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
 7dc:	6a d2       	rcall	.+1236   	; 0xcb2 <__floatunsisf>
 7de:	2b 01       	movw	r4, r22
 7e0:	3c 01       	movw	r6, r24
 7e2:	b7 01       	movw	r22, r14
 7e4:	77 27       	eor	r23, r23
 7e6:	88 27       	eor	r24, r24
 7e8:	77 fd       	sbrc	r23, 7
 7ea:	80 95       	com	r24
 7ec:	98 2f       	mov	r25, r24
 7ee:	63 d2       	rcall	.+1222   	; 0xcb6 <__floatsisf>
 7f0:	6b 01       	movw	r12, r22
 7f2:	7c 01       	movw	r14, r24
 7f4:	c5 01       	movw	r24, r10
 7f6:	b4 01       	movw	r22, r8
 7f8:	5c d2       	rcall	.+1208   	; 0xcb2 <__floatunsisf>
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
 7fe:	c7 01       	movw	r24, r14
 800:	b6 01       	movw	r22, r12
 802:	e5 d2       	rcall	.+1482   	; 0xdce <__mulsf3>
 804:	9b 01       	movw	r18, r22
 806:	ac 01       	movw	r20, r24
 808:	c3 01       	movw	r24, r6
 80a:	b2 01       	movw	r22, r4
 80c:	be d1       	rcall	.+892    	; 0xb8a <__divsf3>
 80e:	4b 01       	movw	r8, r22
 810:	5c 01       	movw	r10, r24
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <calc_bsel+0xec>
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	0a 95       	dec	r16
 81e:	e2 f7       	brpl	.-8      	; 0x818 <calc_bsel+0xe8>
 820:	88 27       	eor	r24, r24
 822:	77 fd       	sbrc	r23, 7
 824:	80 95       	com	r24
 826:	98 2f       	mov	r25, r24
 828:	46 d2       	rcall	.+1164   	; 0xcb6 <__floatsisf>
 82a:	9b 01       	movw	r18, r22
 82c:	ac 01       	movw	r20, r24
 82e:	c5 01       	movw	r24, r10
 830:	b4 01       	movw	r22, r8
 832:	ab d1       	rcall	.+854    	; 0xb8a <__divsf3>
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	40 e8       	ldi	r20, 0x80	; 128
 83a:	5f e3       	ldi	r21, 0x3F	; 63
 83c:	41 d1       	rcall	.+642    	; 0xac0 <__subsf3>
 83e:	2a d3       	rcall	.+1620   	; 0xe94 <round>
 840:	0c d2       	rcall	.+1048   	; 0xc5a <__fixunssfsi>
 842:	cb 01       	movw	r24, r22
  }
}
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
 84c:	df 90       	pop	r13
 84e:	cf 90       	pop	r12
 850:	bf 90       	pop	r11
 852:	af 90       	pop	r10
 854:	9f 90       	pop	r9
 856:	8f 90       	pop	r8
 858:	7f 90       	pop	r7
 85a:	6f 90       	pop	r6
 85c:	5f 90       	pop	r5
 85e:	4f 90       	pop	r4
 860:	08 95       	ret

00000862 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 862:	4f 92       	push	r4
 864:	5f 92       	push	r5
 866:	6f 92       	push	r6
 868:	7f 92       	push	r7
 86a:	8f 92       	push	r8
 86c:	9f 92       	push	r9
 86e:	af 92       	push	r10
 870:	bf 92       	push	r11
 872:	ef 92       	push	r14
 874:	0f 93       	push	r16
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	2b 01       	movw	r4, r22
 87c:	3c 01       	movw	r6, r24
 87e:	49 01       	movw	r8, r18
 880:	5a 01       	movw	r10, r20
 882:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 884:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
 886:	ed 2e       	mov	r14, r29
 888:	0c 2f       	mov	r16, r28
 88a:	a5 01       	movw	r20, r10
 88c:	94 01       	movw	r18, r8
 88e:	c3 01       	movw	r24, r6
 890:	b2 01       	movw	r22, r4
 892:	4e df       	rcall	.-356    	; 0x730 <calc_bsel>
 894:	81 15       	cp	r24, r1
 896:	90 41       	sbci	r25, 0x10	; 16
 898:	18 f0       	brcs	.+6      	; 0x8a0 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 89a:	cf 5f       	subi	r28, 0xFF	; 255
 89c:	c8 30       	cpi	r28, 0x08	; 8
 89e:	99 f7       	brne	.-26     	; 0x886 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
 8a0:	8c 2f       	mov	r24, r28
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	0f 91       	pop	r16
 8a8:	ef 90       	pop	r14
 8aa:	bf 90       	pop	r11
 8ac:	af 90       	pop	r10
 8ae:	9f 90       	pop	r9
 8b0:	8f 90       	pop	r8
 8b2:	7f 90       	pop	r7
 8b4:	6f 90       	pop	r6
 8b6:	5f 90       	pop	r5
 8b8:	4f 90       	pop	r4
 8ba:	08 95       	ret

000008bc <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 8bc:	2f 92       	push	r2
 8be:	3f 92       	push	r3
 8c0:	4f 92       	push	r4
 8c2:	5f 92       	push	r5
 8c4:	6f 92       	push	r6
 8c6:	7f 92       	push	r7
 8c8:	8f 92       	push	r8
 8ca:	9f 92       	push	r9
 8cc:	af 92       	push	r10
 8ce:	bf 92       	push	r11
 8d0:	cf 92       	push	r12
 8d2:	ef 92       	push	r14
 8d4:	ff 92       	push	r15
 8d6:	0f 93       	push	r16
 8d8:	1f 93       	push	r17
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	ec 01       	movw	r28, r24
 8e0:	3b 01       	movw	r6, r22
 8e2:	49 01       	movw	r8, r18
 8e4:	5a 01       	movw	r10, r20
 8e6:	17 01       	movw	r2, r14
 8e8:	28 01       	movw	r4, r16
 8ea:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
 8ec:	0c 2d       	mov	r16, r12
 8ee:	a2 01       	movw	r20, r4
 8f0:	91 01       	movw	r18, r2
 8f2:	c5 01       	movw	r24, r10
 8f4:	b4 01       	movw	r22, r8
 8f6:	b5 df       	rcall	.-150    	; 0x862 <calc_bscale>
 8f8:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
 8fa:	08 2f       	mov	r16, r24
 8fc:	a2 01       	movw	r20, r4
 8fe:	91 01       	movw	r18, r2
 900:	c5 01       	movw	r24, r10
 902:	b4 01       	movw	r22, r8
 904:	15 df       	rcall	.-470    	; 0x730 <calc_bsel>
 906:	b8 2e       	mov	r11, r24
 908:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	b3 01       	movw	r22, r6
 90e:	ce 01       	movw	r24, r28
 910:	3c d0       	rcall	.+120    	; 0x98a <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
 912:	e8 81       	ld	r30, Y
 914:	f9 81       	ldd	r31, Y+1	; 0x01
 916:	83 e0       	ldi	r24, 0x03	; 3
 918:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
 91a:	e8 81       	ld	r30, Y
 91c:	f9 81       	ldd	r31, Y+1	; 0x01
 91e:	84 81       	ldd	r24, Z+4	; 0x04
 920:	80 61       	ori	r24, 0x10	; 16
 922:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
 924:	e8 81       	ld	r30, Y
 926:	f9 81       	ldd	r31, Y+1	; 0x01
 928:	84 81       	ldd	r24, Z+4	; 0x04
 92a:	88 60       	ori	r24, 0x08	; 8
 92c:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
 92e:	e8 81       	ld	r30, Y
 930:	f9 81       	ldd	r31, Y+1	; 0x01
 932:	83 81       	ldd	r24, Z+3	; 0x03
 934:	8f 7c       	andi	r24, 0xCF	; 207
 936:	80 61       	ori	r24, 0x10	; 16
 938:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
 93a:	e8 81       	ld	r30, Y
 93c:	f9 81       	ldd	r31, Y+1	; 0x01
 93e:	b6 82       	std	Z+6, r11	; 0x06
 940:	e8 81       	ld	r30, Y
 942:	f9 81       	ldd	r31, Y+1	; 0x01
 944:	12 95       	swap	r17
 946:	10 7f       	andi	r17, 0xF0	; 240
 948:	e1 2a       	or	r14, r17
 94a:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
 94c:	88 81       	ld	r24, Y
 94e:	99 81       	ldd	r25, Y+1	; 0x01
 950:	b9 de       	rcall	.-654    	; 0x6c4 <set_usart_txrx_direction>
}
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	1f 91       	pop	r17
 958:	0f 91       	pop	r16
 95a:	ff 90       	pop	r15
 95c:	ef 90       	pop	r14
 95e:	cf 90       	pop	r12
 960:	bf 90       	pop	r11
 962:	af 90       	pop	r10
 964:	9f 90       	pop	r9
 966:	8f 90       	pop	r8
 968:	7f 90       	pop	r7
 96a:	6f 90       	pop	r6
 96c:	5f 90       	pop	r5
 96e:	4f 90       	pop	r4
 970:	3f 90       	pop	r3
 972:	2f 90       	pop	r2
 974:	08 95       	ret

00000976 <DebugPrint>:
/*	char value[64];
	strcpy(value, debugData);
	strcat(value, "\r\n");
    uart_puts(&uartC1, value);
	*/
	uart_puts(&uartC1, debugData);
 976:	bc 01       	movw	r22, r24
 978:	81 e8       	ldi	r24, 0x81	; 129
 97a:	92 e2       	ldi	r25, 0x22	; 34
 97c:	8e ce       	rjmp	.-740    	; 0x69a <uart_puts>
 97e:	08 95       	ret

00000980 <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
 980:	bc 01       	movw	r22, r24
 982:	8a e7       	ldi	r24, 0x7A	; 122
 984:	90 e2       	ldi	r25, 0x20	; 32
 986:	89 ce       	rjmp	.-750    	; 0x69a <uart_puts>
 988:	08 95       	ret

0000098a <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 98a:	fc 01       	movw	r30, r24
 98c:	60 83       	st	Z, r22
 98e:	71 83       	std	Z+1, r23	; 0x01
 990:	42 83       	std	Z+2, r20	; 0x02
 992:	ec 5f       	subi	r30, 0xFC	; 252
 994:	fd 4f       	sbci	r31, 0xFD	; 253
 996:	10 82       	st	Z, r1
 998:	31 97       	sbiw	r30, 0x01	; 1
 99a:	10 82       	st	Z, r1
 99c:	33 96       	adiw	r30, 0x03	; 3
 99e:	10 82       	st	Z, r1
 9a0:	31 97       	sbiw	r30, 0x01	; 1
 9a2:	10 82       	st	Z, r1
 9a4:	08 95       	ret

000009a6 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 9a6:	fc 01       	movw	r30, r24
 9a8:	eb 5f       	subi	r30, 0xFB	; 251
 9aa:	fd 4f       	sbci	r31, 0xFD	; 253
 9ac:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 9ae:	31 96       	adiw	r30, 0x01	; 1
 9b0:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 9b2:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	29 13       	cpse	r18, r25
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <USART_TXBuffer_FreeSpace+0x16>
 9ba:	80 e0       	ldi	r24, 0x00	; 0
}
 9bc:	08 95       	ret

000009be <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 9c4:	dc 01       	movw	r26, r24
 9c6:	ab 5f       	subi	r26, 0xFB	; 251
 9c8:	bd 4f       	sbci	r27, 0xFD	; 253
 9ca:	2c 91       	ld	r18, X
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 9cc:	11 96       	adiw	r26, 0x01	; 1
 9ce:	9c 91       	ld	r25, X
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 9d0:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	29 13       	cpse	r18, r25
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <USART_TXBuffer_PutByte+0x1c>
 9d8:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
 9da:	88 23       	and	r24, r24
 9dc:	b1 f0       	breq	.+44     	; 0xa0a <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 9de:	df 01       	movw	r26, r30
 9e0:	ab 5f       	subi	r26, 0xFB	; 251
 9e2:	bd 4f       	sbci	r27, 0xFD	; 253
 9e4:	9c 91       	ld	r25, X
	  	TXbufPtr->TX[tempTX_Head]= data;
 9e6:	ef 01       	movw	r28, r30
 9e8:	c9 0f       	add	r28, r25
 9ea:	d1 1d       	adc	r29, r1
 9ec:	cd 5f       	subi	r28, 0xFD	; 253
 9ee:	de 4f       	sbci	r29, 0xFE	; 254
 9f0:	68 83       	st	Y, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 9f2:	9f 5f       	subi	r25, 0xFF	; 255
 9f4:	9c 93       	st	X, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 9f6:	a0 81       	ld	r26, Z
 9f8:	b1 81       	ldd	r27, Z+1	; 0x01
 9fa:	13 96       	adiw	r26, 0x03	; 3
 9fc:	9c 91       	ld	r25, X
 9fe:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 a00:	9c 7f       	andi	r25, 0xFC	; 252
 a02:	22 81       	ldd	r18, Z+2	; 0x02
 a04:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 a06:	13 96       	adiw	r26, 0x03	; 3
 a08:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	08 95       	ret

00000a10 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 a10:	fc 01       	movw	r30, r24
 a12:	ed 5f       	subi	r30, 0xFD	; 253
 a14:	fd 4f       	sbci	r31, 0xFD	; 253
 a16:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 a18:	31 96       	adiw	r30, 0x01	; 1
 a1a:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	29 13       	cpse	r18, r25
 a20:	01 c0       	rjmp	.+2      	; 0xa24 <USART_RXBufferData_Available+0x14>
 a22:	80 e0       	ldi	r24, 0x00	; 0
}
 a24:	08 95       	ret

00000a26 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 a26:	fc 01       	movw	r30, r24
 a28:	ec 5f       	subi	r30, 0xFC	; 252
 a2a:	fd 4f       	sbci	r31, 0xFD	; 253
 a2c:	20 81       	ld	r18, Z
 a2e:	dc 01       	movw	r26, r24
 a30:	a2 0f       	add	r26, r18
 a32:	b1 1d       	adc	r27, r1
 a34:	13 96       	adiw	r26, 0x03	; 3
 a36:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 a38:	90 81       	ld	r25, Z
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	90 83       	st	Z, r25

	return ans;
}
 a3e:	08 95       	ret

00000a40 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 a40:	fc 01       	movw	r30, r24
 a42:	ed 5f       	subi	r30, 0xFD	; 253
 a44:	fd 4f       	sbci	r31, 0xFD	; 253
 a46:	20 81       	ld	r18, Z
 a48:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 a4a:	31 96       	adiw	r30, 0x01	; 1
 a4c:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
 a4e:	dc 01       	movw	r26, r24
 a50:	ed 91       	ld	r30, X+
 a52:	fc 91       	ld	r31, X
 a54:	11 97       	sbiw	r26, 0x01	; 1
 a56:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
 a58:	23 17       	cp	r18, r19
 a5a:	59 f0       	breq	.+22     	; 0xa72 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 a5c:	fc 01       	movw	r30, r24
 a5e:	ed 5f       	subi	r30, 0xFD	; 253
 a60:	fd 4f       	sbci	r31, 0xFD	; 253
 a62:	30 81       	ld	r19, Z
 a64:	a3 0f       	add	r26, r19
 a66:	b1 1d       	adc	r27, r1
 a68:	13 96       	adiw	r26, 0x03	; 3
 a6a:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
 a6c:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 a72:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 a74:	08 95       	ret

00000a76 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 a7a:	fc 01       	movw	r30, r24
 a7c:	ea 5f       	subi	r30, 0xFA	; 250
 a7e:	fd 4f       	sbci	r31, 0xFD	; 253
 a80:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
 a82:	31 97       	sbiw	r30, 0x01	; 1
 a84:	30 81       	ld	r19, Z
 a86:	32 13       	cpse	r19, r18
 a88:	07 c0       	rjmp	.+14     	; 0xa98 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 a8a:	dc 01       	movw	r26, r24
 a8c:	ed 91       	ld	r30, X+
 a8e:	fc 91       	ld	r31, X
 a90:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 a92:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 a94:	83 83       	std	Z+3, r24	; 0x03
 a96:	11 c0       	rjmp	.+34     	; 0xaba <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 a98:	fc 01       	movw	r30, r24
 a9a:	ea 5f       	subi	r30, 0xFA	; 250
 a9c:	fd 4f       	sbci	r31, 0xFD	; 253
 a9e:	20 81       	ld	r18, Z
 aa0:	dc 01       	movw	r26, r24
 aa2:	a2 0f       	add	r26, r18
 aa4:	b1 1d       	adc	r27, r1
 aa6:	ad 5f       	subi	r26, 0xFD	; 253
 aa8:	be 4f       	sbci	r27, 0xFE	; 254
 aaa:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
 aac:	ec 01       	movw	r28, r24
 aae:	a8 81       	ld	r26, Y
 ab0:	b9 81       	ldd	r27, Y+1	; 0x01
 ab2:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 ab4:	80 81       	ld	r24, Z
 ab6:	8f 5f       	subi	r24, 0xFF	; 255
 ab8:	80 83       	st	Z, r24
	}
}
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	08 95       	ret

00000ac0 <__subsf3>:
 ac0:	50 58       	subi	r21, 0x80	; 128

00000ac2 <__addsf3>:
 ac2:	bb 27       	eor	r27, r27
 ac4:	aa 27       	eor	r26, r26
 ac6:	0e d0       	rcall	.+28     	; 0xae4 <__addsf3x>
 ac8:	48 c1       	rjmp	.+656    	; 0xd5a <__fp_round>
 aca:	39 d1       	rcall	.+626    	; 0xd3e <__fp_pscA>
 acc:	30 f0       	brcs	.+12     	; 0xada <__addsf3+0x18>
 ace:	3e d1       	rcall	.+636    	; 0xd4c <__fp_pscB>
 ad0:	20 f0       	brcs	.+8      	; 0xada <__addsf3+0x18>
 ad2:	31 f4       	brne	.+12     	; 0xae0 <__addsf3+0x1e>
 ad4:	9f 3f       	cpi	r25, 0xFF	; 255
 ad6:	11 f4       	brne	.+4      	; 0xadc <__addsf3+0x1a>
 ad8:	1e f4       	brtc	.+6      	; 0xae0 <__addsf3+0x1e>
 ada:	2e c1       	rjmp	.+604    	; 0xd38 <__fp_nan>
 adc:	0e f4       	brtc	.+2      	; 0xae0 <__addsf3+0x1e>
 ade:	e0 95       	com	r30
 ae0:	e7 fb       	bst	r30, 7
 ae2:	24 c1       	rjmp	.+584    	; 0xd2c <__fp_inf>

00000ae4 <__addsf3x>:
 ae4:	e9 2f       	mov	r30, r25
 ae6:	4a d1       	rcall	.+660    	; 0xd7c <__fp_split3>
 ae8:	80 f3       	brcs	.-32     	; 0xaca <__addsf3+0x8>
 aea:	ba 17       	cp	r27, r26
 aec:	62 07       	cpc	r22, r18
 aee:	73 07       	cpc	r23, r19
 af0:	84 07       	cpc	r24, r20
 af2:	95 07       	cpc	r25, r21
 af4:	18 f0       	brcs	.+6      	; 0xafc <__addsf3x+0x18>
 af6:	71 f4       	brne	.+28     	; 0xb14 <__addsf3x+0x30>
 af8:	9e f5       	brtc	.+102    	; 0xb60 <__addsf3x+0x7c>
 afa:	62 c1       	rjmp	.+708    	; 0xdc0 <__fp_zero>
 afc:	0e f4       	brtc	.+2      	; 0xb00 <__addsf3x+0x1c>
 afe:	e0 95       	com	r30
 b00:	0b 2e       	mov	r0, r27
 b02:	ba 2f       	mov	r27, r26
 b04:	a0 2d       	mov	r26, r0
 b06:	0b 01       	movw	r0, r22
 b08:	b9 01       	movw	r22, r18
 b0a:	90 01       	movw	r18, r0
 b0c:	0c 01       	movw	r0, r24
 b0e:	ca 01       	movw	r24, r20
 b10:	a0 01       	movw	r20, r0
 b12:	11 24       	eor	r1, r1
 b14:	ff 27       	eor	r31, r31
 b16:	59 1b       	sub	r21, r25
 b18:	99 f0       	breq	.+38     	; 0xb40 <__addsf3x+0x5c>
 b1a:	59 3f       	cpi	r21, 0xF9	; 249
 b1c:	50 f4       	brcc	.+20     	; 0xb32 <__addsf3x+0x4e>
 b1e:	50 3e       	cpi	r21, 0xE0	; 224
 b20:	68 f1       	brcs	.+90     	; 0xb7c <__addsf3x+0x98>
 b22:	1a 16       	cp	r1, r26
 b24:	f0 40       	sbci	r31, 0x00	; 0
 b26:	a2 2f       	mov	r26, r18
 b28:	23 2f       	mov	r18, r19
 b2a:	34 2f       	mov	r19, r20
 b2c:	44 27       	eor	r20, r20
 b2e:	58 5f       	subi	r21, 0xF8	; 248
 b30:	f3 cf       	rjmp	.-26     	; 0xb18 <__addsf3x+0x34>
 b32:	46 95       	lsr	r20
 b34:	37 95       	ror	r19
 b36:	27 95       	ror	r18
 b38:	a7 95       	ror	r26
 b3a:	f0 40       	sbci	r31, 0x00	; 0
 b3c:	53 95       	inc	r21
 b3e:	c9 f7       	brne	.-14     	; 0xb32 <__addsf3x+0x4e>
 b40:	7e f4       	brtc	.+30     	; 0xb60 <__addsf3x+0x7c>
 b42:	1f 16       	cp	r1, r31
 b44:	ba 0b       	sbc	r27, r26
 b46:	62 0b       	sbc	r22, r18
 b48:	73 0b       	sbc	r23, r19
 b4a:	84 0b       	sbc	r24, r20
 b4c:	ba f0       	brmi	.+46     	; 0xb7c <__addsf3x+0x98>
 b4e:	91 50       	subi	r25, 0x01	; 1
 b50:	a1 f0       	breq	.+40     	; 0xb7a <__addsf3x+0x96>
 b52:	ff 0f       	add	r31, r31
 b54:	bb 1f       	adc	r27, r27
 b56:	66 1f       	adc	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	c2 f7       	brpl	.-16     	; 0xb4e <__addsf3x+0x6a>
 b5e:	0e c0       	rjmp	.+28     	; 0xb7c <__addsf3x+0x98>
 b60:	ba 0f       	add	r27, r26
 b62:	62 1f       	adc	r22, r18
 b64:	73 1f       	adc	r23, r19
 b66:	84 1f       	adc	r24, r20
 b68:	48 f4       	brcc	.+18     	; 0xb7c <__addsf3x+0x98>
 b6a:	87 95       	ror	r24
 b6c:	77 95       	ror	r23
 b6e:	67 95       	ror	r22
 b70:	b7 95       	ror	r27
 b72:	f7 95       	ror	r31
 b74:	9e 3f       	cpi	r25, 0xFE	; 254
 b76:	08 f0       	brcs	.+2      	; 0xb7a <__addsf3x+0x96>
 b78:	b3 cf       	rjmp	.-154    	; 0xae0 <__addsf3+0x1e>
 b7a:	93 95       	inc	r25
 b7c:	88 0f       	add	r24, r24
 b7e:	08 f0       	brcs	.+2      	; 0xb82 <__addsf3x+0x9e>
 b80:	99 27       	eor	r25, r25
 b82:	ee 0f       	add	r30, r30
 b84:	97 95       	ror	r25
 b86:	87 95       	ror	r24
 b88:	08 95       	ret

00000b8a <__divsf3>:
 b8a:	0c d0       	rcall	.+24     	; 0xba4 <__divsf3x>
 b8c:	e6 c0       	rjmp	.+460    	; 0xd5a <__fp_round>
 b8e:	de d0       	rcall	.+444    	; 0xd4c <__fp_pscB>
 b90:	40 f0       	brcs	.+16     	; 0xba2 <__divsf3+0x18>
 b92:	d5 d0       	rcall	.+426    	; 0xd3e <__fp_pscA>
 b94:	30 f0       	brcs	.+12     	; 0xba2 <__divsf3+0x18>
 b96:	21 f4       	brne	.+8      	; 0xba0 <__divsf3+0x16>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	19 f0       	breq	.+6      	; 0xba2 <__divsf3+0x18>
 b9c:	c7 c0       	rjmp	.+398    	; 0xd2c <__fp_inf>
 b9e:	51 11       	cpse	r21, r1
 ba0:	10 c1       	rjmp	.+544    	; 0xdc2 <__fp_szero>
 ba2:	ca c0       	rjmp	.+404    	; 0xd38 <__fp_nan>

00000ba4 <__divsf3x>:
 ba4:	eb d0       	rcall	.+470    	; 0xd7c <__fp_split3>
 ba6:	98 f3       	brcs	.-26     	; 0xb8e <__divsf3+0x4>

00000ba8 <__divsf3_pse>:
 ba8:	99 23       	and	r25, r25
 baa:	c9 f3       	breq	.-14     	; 0xb9e <__divsf3+0x14>
 bac:	55 23       	and	r21, r21
 bae:	b1 f3       	breq	.-20     	; 0xb9c <__divsf3+0x12>
 bb0:	95 1b       	sub	r25, r21
 bb2:	55 0b       	sbc	r21, r21
 bb4:	bb 27       	eor	r27, r27
 bb6:	aa 27       	eor	r26, r26
 bb8:	62 17       	cp	r22, r18
 bba:	73 07       	cpc	r23, r19
 bbc:	84 07       	cpc	r24, r20
 bbe:	38 f0       	brcs	.+14     	; 0xbce <__divsf3_pse+0x26>
 bc0:	9f 5f       	subi	r25, 0xFF	; 255
 bc2:	5f 4f       	sbci	r21, 0xFF	; 255
 bc4:	22 0f       	add	r18, r18
 bc6:	33 1f       	adc	r19, r19
 bc8:	44 1f       	adc	r20, r20
 bca:	aa 1f       	adc	r26, r26
 bcc:	a9 f3       	breq	.-22     	; 0xbb8 <__divsf3_pse+0x10>
 bce:	33 d0       	rcall	.+102    	; 0xc36 <__divsf3_pse+0x8e>
 bd0:	0e 2e       	mov	r0, r30
 bd2:	3a f0       	brmi	.+14     	; 0xbe2 <__divsf3_pse+0x3a>
 bd4:	e0 e8       	ldi	r30, 0x80	; 128
 bd6:	30 d0       	rcall	.+96     	; 0xc38 <__divsf3_pse+0x90>
 bd8:	91 50       	subi	r25, 0x01	; 1
 bda:	50 40       	sbci	r21, 0x00	; 0
 bdc:	e6 95       	lsr	r30
 bde:	00 1c       	adc	r0, r0
 be0:	ca f7       	brpl	.-14     	; 0xbd4 <__divsf3_pse+0x2c>
 be2:	29 d0       	rcall	.+82     	; 0xc36 <__divsf3_pse+0x8e>
 be4:	fe 2f       	mov	r31, r30
 be6:	27 d0       	rcall	.+78     	; 0xc36 <__divsf3_pse+0x8e>
 be8:	66 0f       	add	r22, r22
 bea:	77 1f       	adc	r23, r23
 bec:	88 1f       	adc	r24, r24
 bee:	bb 1f       	adc	r27, r27
 bf0:	26 17       	cp	r18, r22
 bf2:	37 07       	cpc	r19, r23
 bf4:	48 07       	cpc	r20, r24
 bf6:	ab 07       	cpc	r26, r27
 bf8:	b0 e8       	ldi	r27, 0x80	; 128
 bfa:	09 f0       	breq	.+2      	; 0xbfe <__divsf3_pse+0x56>
 bfc:	bb 0b       	sbc	r27, r27
 bfe:	80 2d       	mov	r24, r0
 c00:	bf 01       	movw	r22, r30
 c02:	ff 27       	eor	r31, r31
 c04:	93 58       	subi	r25, 0x83	; 131
 c06:	5f 4f       	sbci	r21, 0xFF	; 255
 c08:	2a f0       	brmi	.+10     	; 0xc14 <__divsf3_pse+0x6c>
 c0a:	9e 3f       	cpi	r25, 0xFE	; 254
 c0c:	51 05       	cpc	r21, r1
 c0e:	68 f0       	brcs	.+26     	; 0xc2a <__divsf3_pse+0x82>
 c10:	8d c0       	rjmp	.+282    	; 0xd2c <__fp_inf>
 c12:	d7 c0       	rjmp	.+430    	; 0xdc2 <__fp_szero>
 c14:	5f 3f       	cpi	r21, 0xFF	; 255
 c16:	ec f3       	brlt	.-6      	; 0xc12 <__divsf3_pse+0x6a>
 c18:	98 3e       	cpi	r25, 0xE8	; 232
 c1a:	dc f3       	brlt	.-10     	; 0xc12 <__divsf3_pse+0x6a>
 c1c:	86 95       	lsr	r24
 c1e:	77 95       	ror	r23
 c20:	67 95       	ror	r22
 c22:	b7 95       	ror	r27
 c24:	f7 95       	ror	r31
 c26:	9f 5f       	subi	r25, 0xFF	; 255
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__divsf3_pse+0x74>
 c2a:	88 0f       	add	r24, r24
 c2c:	91 1d       	adc	r25, r1
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret
 c36:	e1 e0       	ldi	r30, 0x01	; 1
 c38:	66 0f       	add	r22, r22
 c3a:	77 1f       	adc	r23, r23
 c3c:	88 1f       	adc	r24, r24
 c3e:	bb 1f       	adc	r27, r27
 c40:	62 17       	cp	r22, r18
 c42:	73 07       	cpc	r23, r19
 c44:	84 07       	cpc	r24, r20
 c46:	ba 07       	cpc	r27, r26
 c48:	20 f0       	brcs	.+8      	; 0xc52 <__divsf3_pse+0xaa>
 c4a:	62 1b       	sub	r22, r18
 c4c:	73 0b       	sbc	r23, r19
 c4e:	84 0b       	sbc	r24, r20
 c50:	ba 0b       	sbc	r27, r26
 c52:	ee 1f       	adc	r30, r30
 c54:	88 f7       	brcc	.-30     	; 0xc38 <__divsf3_pse+0x90>
 c56:	e0 95       	com	r30
 c58:	08 95       	ret

00000c5a <__fixunssfsi>:
 c5a:	98 d0       	rcall	.+304    	; 0xd8c <__fp_splitA>
 c5c:	88 f0       	brcs	.+34     	; 0xc80 <__fixunssfsi+0x26>
 c5e:	9f 57       	subi	r25, 0x7F	; 127
 c60:	90 f0       	brcs	.+36     	; 0xc86 <__fixunssfsi+0x2c>
 c62:	b9 2f       	mov	r27, r25
 c64:	99 27       	eor	r25, r25
 c66:	b7 51       	subi	r27, 0x17	; 23
 c68:	a0 f0       	brcs	.+40     	; 0xc92 <__fixunssfsi+0x38>
 c6a:	d1 f0       	breq	.+52     	; 0xca0 <__fixunssfsi+0x46>
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	99 1f       	adc	r25, r25
 c74:	1a f0       	brmi	.+6      	; 0xc7c <__fixunssfsi+0x22>
 c76:	ba 95       	dec	r27
 c78:	c9 f7       	brne	.-14     	; 0xc6c <__fixunssfsi+0x12>
 c7a:	12 c0       	rjmp	.+36     	; 0xca0 <__fixunssfsi+0x46>
 c7c:	b1 30       	cpi	r27, 0x01	; 1
 c7e:	81 f0       	breq	.+32     	; 0xca0 <__fixunssfsi+0x46>
 c80:	9f d0       	rcall	.+318    	; 0xdc0 <__fp_zero>
 c82:	b1 e0       	ldi	r27, 0x01	; 1
 c84:	08 95       	ret
 c86:	9c c0       	rjmp	.+312    	; 0xdc0 <__fp_zero>
 c88:	67 2f       	mov	r22, r23
 c8a:	78 2f       	mov	r23, r24
 c8c:	88 27       	eor	r24, r24
 c8e:	b8 5f       	subi	r27, 0xF8	; 248
 c90:	39 f0       	breq	.+14     	; 0xca0 <__fixunssfsi+0x46>
 c92:	b9 3f       	cpi	r27, 0xF9	; 249
 c94:	cc f3       	brlt	.-14     	; 0xc88 <__fixunssfsi+0x2e>
 c96:	86 95       	lsr	r24
 c98:	77 95       	ror	r23
 c9a:	67 95       	ror	r22
 c9c:	b3 95       	inc	r27
 c9e:	d9 f7       	brne	.-10     	; 0xc96 <__fixunssfsi+0x3c>
 ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__fixunssfsi+0x56>
 ca2:	90 95       	com	r25
 ca4:	80 95       	com	r24
 ca6:	70 95       	com	r23
 ca8:	61 95       	neg	r22
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	08 95       	ret

00000cb2 <__floatunsisf>:
 cb2:	e8 94       	clt
 cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <__floatsisf+0x12>

00000cb6 <__floatsisf>:
 cb6:	97 fb       	bst	r25, 7
 cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__floatsisf+0x12>
 cba:	90 95       	com	r25
 cbc:	80 95       	com	r24
 cbe:	70 95       	com	r23
 cc0:	61 95       	neg	r22
 cc2:	7f 4f       	sbci	r23, 0xFF	; 255
 cc4:	8f 4f       	sbci	r24, 0xFF	; 255
 cc6:	9f 4f       	sbci	r25, 0xFF	; 255
 cc8:	99 23       	and	r25, r25
 cca:	a9 f0       	breq	.+42     	; 0xcf6 <__floatsisf+0x40>
 ccc:	f9 2f       	mov	r31, r25
 cce:	96 e9       	ldi	r25, 0x96	; 150
 cd0:	bb 27       	eor	r27, r27
 cd2:	93 95       	inc	r25
 cd4:	f6 95       	lsr	r31
 cd6:	87 95       	ror	r24
 cd8:	77 95       	ror	r23
 cda:	67 95       	ror	r22
 cdc:	b7 95       	ror	r27
 cde:	f1 11       	cpse	r31, r1
 ce0:	f8 cf       	rjmp	.-16     	; 0xcd2 <__floatsisf+0x1c>
 ce2:	fa f4       	brpl	.+62     	; 0xd22 <__floatsisf+0x6c>
 ce4:	bb 0f       	add	r27, r27
 ce6:	11 f4       	brne	.+4      	; 0xcec <__floatsisf+0x36>
 ce8:	60 ff       	sbrs	r22, 0
 cea:	1b c0       	rjmp	.+54     	; 0xd22 <__floatsisf+0x6c>
 cec:	6f 5f       	subi	r22, 0xFF	; 255
 cee:	7f 4f       	sbci	r23, 0xFF	; 255
 cf0:	8f 4f       	sbci	r24, 0xFF	; 255
 cf2:	9f 4f       	sbci	r25, 0xFF	; 255
 cf4:	16 c0       	rjmp	.+44     	; 0xd22 <__floatsisf+0x6c>
 cf6:	88 23       	and	r24, r24
 cf8:	11 f0       	breq	.+4      	; 0xcfe <__floatsisf+0x48>
 cfa:	96 e9       	ldi	r25, 0x96	; 150
 cfc:	11 c0       	rjmp	.+34     	; 0xd20 <__floatsisf+0x6a>
 cfe:	77 23       	and	r23, r23
 d00:	21 f0       	breq	.+8      	; 0xd0a <__floatsisf+0x54>
 d02:	9e e8       	ldi	r25, 0x8E	; 142
 d04:	87 2f       	mov	r24, r23
 d06:	76 2f       	mov	r23, r22
 d08:	05 c0       	rjmp	.+10     	; 0xd14 <__floatsisf+0x5e>
 d0a:	66 23       	and	r22, r22
 d0c:	71 f0       	breq	.+28     	; 0xd2a <__floatsisf+0x74>
 d0e:	96 e8       	ldi	r25, 0x86	; 134
 d10:	86 2f       	mov	r24, r22
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	2a f0       	brmi	.+10     	; 0xd22 <__floatsisf+0x6c>
 d18:	9a 95       	dec	r25
 d1a:	66 0f       	add	r22, r22
 d1c:	77 1f       	adc	r23, r23
 d1e:	88 1f       	adc	r24, r24
 d20:	da f7       	brpl	.-10     	; 0xd18 <__floatsisf+0x62>
 d22:	88 0f       	add	r24, r24
 d24:	96 95       	lsr	r25
 d26:	87 95       	ror	r24
 d28:	97 f9       	bld	r25, 7
 d2a:	08 95       	ret

00000d2c <__fp_inf>:
 d2c:	97 f9       	bld	r25, 7
 d2e:	9f 67       	ori	r25, 0x7F	; 127
 d30:	80 e8       	ldi	r24, 0x80	; 128
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	60 e0       	ldi	r22, 0x00	; 0
 d36:	08 95       	ret

00000d38 <__fp_nan>:
 d38:	9f ef       	ldi	r25, 0xFF	; 255
 d3a:	80 ec       	ldi	r24, 0xC0	; 192
 d3c:	08 95       	ret

00000d3e <__fp_pscA>:
 d3e:	00 24       	eor	r0, r0
 d40:	0a 94       	dec	r0
 d42:	16 16       	cp	r1, r22
 d44:	17 06       	cpc	r1, r23
 d46:	18 06       	cpc	r1, r24
 d48:	09 06       	cpc	r0, r25
 d4a:	08 95       	ret

00000d4c <__fp_pscB>:
 d4c:	00 24       	eor	r0, r0
 d4e:	0a 94       	dec	r0
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	05 06       	cpc	r0, r21
 d58:	08 95       	ret

00000d5a <__fp_round>:
 d5a:	09 2e       	mov	r0, r25
 d5c:	03 94       	inc	r0
 d5e:	00 0c       	add	r0, r0
 d60:	11 f4       	brne	.+4      	; 0xd66 <__fp_round+0xc>
 d62:	88 23       	and	r24, r24
 d64:	52 f0       	brmi	.+20     	; 0xd7a <__fp_round+0x20>
 d66:	bb 0f       	add	r27, r27
 d68:	40 f4       	brcc	.+16     	; 0xd7a <__fp_round+0x20>
 d6a:	bf 2b       	or	r27, r31
 d6c:	11 f4       	brne	.+4      	; 0xd72 <__fp_round+0x18>
 d6e:	60 ff       	sbrs	r22, 0
 d70:	04 c0       	rjmp	.+8      	; 0xd7a <__fp_round+0x20>
 d72:	6f 5f       	subi	r22, 0xFF	; 255
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	08 95       	ret

00000d7c <__fp_split3>:
 d7c:	57 fd       	sbrc	r21, 7
 d7e:	90 58       	subi	r25, 0x80	; 128
 d80:	44 0f       	add	r20, r20
 d82:	55 1f       	adc	r21, r21
 d84:	59 f0       	breq	.+22     	; 0xd9c <__fp_splitA+0x10>
 d86:	5f 3f       	cpi	r21, 0xFF	; 255
 d88:	71 f0       	breq	.+28     	; 0xda6 <__fp_splitA+0x1a>
 d8a:	47 95       	ror	r20

00000d8c <__fp_splitA>:
 d8c:	88 0f       	add	r24, r24
 d8e:	97 fb       	bst	r25, 7
 d90:	99 1f       	adc	r25, r25
 d92:	61 f0       	breq	.+24     	; 0xdac <__fp_splitA+0x20>
 d94:	9f 3f       	cpi	r25, 0xFF	; 255
 d96:	79 f0       	breq	.+30     	; 0xdb6 <__fp_splitA+0x2a>
 d98:	87 95       	ror	r24
 d9a:	08 95       	ret
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	55 1f       	adc	r21, r21
 da4:	f2 cf       	rjmp	.-28     	; 0xd8a <__fp_split3+0xe>
 da6:	46 95       	lsr	r20
 da8:	f1 df       	rcall	.-30     	; 0xd8c <__fp_splitA>
 daa:	08 c0       	rjmp	.+16     	; 0xdbc <__fp_splitA+0x30>
 dac:	16 16       	cp	r1, r22
 dae:	17 06       	cpc	r1, r23
 db0:	18 06       	cpc	r1, r24
 db2:	99 1f       	adc	r25, r25
 db4:	f1 cf       	rjmp	.-30     	; 0xd98 <__fp_splitA+0xc>
 db6:	86 95       	lsr	r24
 db8:	71 05       	cpc	r23, r1
 dba:	61 05       	cpc	r22, r1
 dbc:	08 94       	sec
 dbe:	08 95       	ret

00000dc0 <__fp_zero>:
 dc0:	e8 94       	clt

00000dc2 <__fp_szero>:
 dc2:	bb 27       	eor	r27, r27
 dc4:	66 27       	eor	r22, r22
 dc6:	77 27       	eor	r23, r23
 dc8:	cb 01       	movw	r24, r22
 dca:	97 f9       	bld	r25, 7
 dcc:	08 95       	ret

00000dce <__mulsf3>:
 dce:	0b d0       	rcall	.+22     	; 0xde6 <__mulsf3x>
 dd0:	c4 cf       	rjmp	.-120    	; 0xd5a <__fp_round>
 dd2:	b5 df       	rcall	.-150    	; 0xd3e <__fp_pscA>
 dd4:	28 f0       	brcs	.+10     	; 0xde0 <__mulsf3+0x12>
 dd6:	ba df       	rcall	.-140    	; 0xd4c <__fp_pscB>
 dd8:	18 f0       	brcs	.+6      	; 0xde0 <__mulsf3+0x12>
 dda:	95 23       	and	r25, r21
 ddc:	09 f0       	breq	.+2      	; 0xde0 <__mulsf3+0x12>
 dde:	a6 cf       	rjmp	.-180    	; 0xd2c <__fp_inf>
 de0:	ab cf       	rjmp	.-170    	; 0xd38 <__fp_nan>
 de2:	11 24       	eor	r1, r1
 de4:	ee cf       	rjmp	.-36     	; 0xdc2 <__fp_szero>

00000de6 <__mulsf3x>:
 de6:	ca df       	rcall	.-108    	; 0xd7c <__fp_split3>
 de8:	a0 f3       	brcs	.-24     	; 0xdd2 <__mulsf3+0x4>

00000dea <__mulsf3_pse>:
 dea:	95 9f       	mul	r25, r21
 dec:	d1 f3       	breq	.-12     	; 0xde2 <__mulsf3+0x14>
 dee:	95 0f       	add	r25, r21
 df0:	50 e0       	ldi	r21, 0x00	; 0
 df2:	55 1f       	adc	r21, r21
 df4:	62 9f       	mul	r22, r18
 df6:	f0 01       	movw	r30, r0
 df8:	72 9f       	mul	r23, r18
 dfa:	bb 27       	eor	r27, r27
 dfc:	f0 0d       	add	r31, r0
 dfe:	b1 1d       	adc	r27, r1
 e00:	63 9f       	mul	r22, r19
 e02:	aa 27       	eor	r26, r26
 e04:	f0 0d       	add	r31, r0
 e06:	b1 1d       	adc	r27, r1
 e08:	aa 1f       	adc	r26, r26
 e0a:	64 9f       	mul	r22, r20
 e0c:	66 27       	eor	r22, r22
 e0e:	b0 0d       	add	r27, r0
 e10:	a1 1d       	adc	r26, r1
 e12:	66 1f       	adc	r22, r22
 e14:	82 9f       	mul	r24, r18
 e16:	22 27       	eor	r18, r18
 e18:	b0 0d       	add	r27, r0
 e1a:	a1 1d       	adc	r26, r1
 e1c:	62 1f       	adc	r22, r18
 e1e:	73 9f       	mul	r23, r19
 e20:	b0 0d       	add	r27, r0
 e22:	a1 1d       	adc	r26, r1
 e24:	62 1f       	adc	r22, r18
 e26:	83 9f       	mul	r24, r19
 e28:	a0 0d       	add	r26, r0
 e2a:	61 1d       	adc	r22, r1
 e2c:	22 1f       	adc	r18, r18
 e2e:	74 9f       	mul	r23, r20
 e30:	33 27       	eor	r19, r19
 e32:	a0 0d       	add	r26, r0
 e34:	61 1d       	adc	r22, r1
 e36:	23 1f       	adc	r18, r19
 e38:	84 9f       	mul	r24, r20
 e3a:	60 0d       	add	r22, r0
 e3c:	21 1d       	adc	r18, r1
 e3e:	82 2f       	mov	r24, r18
 e40:	76 2f       	mov	r23, r22
 e42:	6a 2f       	mov	r22, r26
 e44:	11 24       	eor	r1, r1
 e46:	9f 57       	subi	r25, 0x7F	; 127
 e48:	50 40       	sbci	r21, 0x00	; 0
 e4a:	8a f0       	brmi	.+34     	; 0xe6e <__mulsf3_pse+0x84>
 e4c:	e1 f0       	breq	.+56     	; 0xe86 <__mulsf3_pse+0x9c>
 e4e:	88 23       	and	r24, r24
 e50:	4a f0       	brmi	.+18     	; 0xe64 <__mulsf3_pse+0x7a>
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	bb 1f       	adc	r27, r27
 e58:	66 1f       	adc	r22, r22
 e5a:	77 1f       	adc	r23, r23
 e5c:	88 1f       	adc	r24, r24
 e5e:	91 50       	subi	r25, 0x01	; 1
 e60:	50 40       	sbci	r21, 0x00	; 0
 e62:	a9 f7       	brne	.-22     	; 0xe4e <__mulsf3_pse+0x64>
 e64:	9e 3f       	cpi	r25, 0xFE	; 254
 e66:	51 05       	cpc	r21, r1
 e68:	70 f0       	brcs	.+28     	; 0xe86 <__mulsf3_pse+0x9c>
 e6a:	60 cf       	rjmp	.-320    	; 0xd2c <__fp_inf>
 e6c:	aa cf       	rjmp	.-172    	; 0xdc2 <__fp_szero>
 e6e:	5f 3f       	cpi	r21, 0xFF	; 255
 e70:	ec f3       	brlt	.-6      	; 0xe6c <__mulsf3_pse+0x82>
 e72:	98 3e       	cpi	r25, 0xE8	; 232
 e74:	dc f3       	brlt	.-10     	; 0xe6c <__mulsf3_pse+0x82>
 e76:	86 95       	lsr	r24
 e78:	77 95       	ror	r23
 e7a:	67 95       	ror	r22
 e7c:	b7 95       	ror	r27
 e7e:	f7 95       	ror	r31
 e80:	e7 95       	ror	r30
 e82:	9f 5f       	subi	r25, 0xFF	; 255
 e84:	c1 f7       	brne	.-16     	; 0xe76 <__mulsf3_pse+0x8c>
 e86:	fe 2b       	or	r31, r30
 e88:	88 0f       	add	r24, r24
 e8a:	91 1d       	adc	r25, r1
 e8c:	96 95       	lsr	r25
 e8e:	87 95       	ror	r24
 e90:	97 f9       	bld	r25, 7
 e92:	08 95       	ret

00000e94 <round>:
 e94:	7b df       	rcall	.-266    	; 0xd8c <__fp_splitA>
 e96:	e0 f0       	brcs	.+56     	; 0xed0 <round+0x3c>
 e98:	9e 37       	cpi	r25, 0x7E	; 126
 e9a:	d8 f0       	brcs	.+54     	; 0xed2 <round+0x3e>
 e9c:	96 39       	cpi	r25, 0x96	; 150
 e9e:	b8 f4       	brcc	.+46     	; 0xece <round+0x3a>
 ea0:	9e 38       	cpi	r25, 0x8E	; 142
 ea2:	48 f4       	brcc	.+18     	; 0xeb6 <round+0x22>
 ea4:	67 2f       	mov	r22, r23
 ea6:	78 2f       	mov	r23, r24
 ea8:	88 27       	eor	r24, r24
 eaa:	98 5f       	subi	r25, 0xF8	; 248
 eac:	f9 cf       	rjmp	.-14     	; 0xea0 <round+0xc>
 eae:	86 95       	lsr	r24
 eb0:	77 95       	ror	r23
 eb2:	67 95       	ror	r22
 eb4:	93 95       	inc	r25
 eb6:	95 39       	cpi	r25, 0x95	; 149
 eb8:	d0 f3       	brcs	.-12     	; 0xeae <round+0x1a>
 eba:	b6 2f       	mov	r27, r22
 ebc:	b1 70       	andi	r27, 0x01	; 1
 ebe:	6b 0f       	add	r22, r27
 ec0:	71 1d       	adc	r23, r1
 ec2:	81 1d       	adc	r24, r1
 ec4:	20 f4       	brcc	.+8      	; 0xece <round+0x3a>
 ec6:	87 95       	ror	r24
 ec8:	77 95       	ror	r23
 eca:	67 95       	ror	r22
 ecc:	93 95       	inc	r25
 ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fp_mintl>
 ed0:	1c c0       	rjmp	.+56     	; 0xf0a <__fp_mpack>
 ed2:	77 cf       	rjmp	.-274    	; 0xdc2 <__fp_szero>

00000ed4 <__fp_mintl>:
 ed4:	88 23       	and	r24, r24
 ed6:	71 f4       	brne	.+28     	; 0xef4 <__fp_mintl+0x20>
 ed8:	77 23       	and	r23, r23
 eda:	21 f0       	breq	.+8      	; 0xee4 <__fp_mintl+0x10>
 edc:	98 50       	subi	r25, 0x08	; 8
 ede:	87 2b       	or	r24, r23
 ee0:	76 2f       	mov	r23, r22
 ee2:	07 c0       	rjmp	.+14     	; 0xef2 <__fp_mintl+0x1e>
 ee4:	66 23       	and	r22, r22
 ee6:	11 f4       	brne	.+4      	; 0xeec <__fp_mintl+0x18>
 ee8:	99 27       	eor	r25, r25
 eea:	0d c0       	rjmp	.+26     	; 0xf06 <__fp_mintl+0x32>
 eec:	90 51       	subi	r25, 0x10	; 16
 eee:	86 2b       	or	r24, r22
 ef0:	70 e0       	ldi	r23, 0x00	; 0
 ef2:	60 e0       	ldi	r22, 0x00	; 0
 ef4:	2a f0       	brmi	.+10     	; 0xf00 <__fp_mintl+0x2c>
 ef6:	9a 95       	dec	r25
 ef8:	66 0f       	add	r22, r22
 efa:	77 1f       	adc	r23, r23
 efc:	88 1f       	adc	r24, r24
 efe:	da f7       	brpl	.-10     	; 0xef6 <__fp_mintl+0x22>
 f00:	88 0f       	add	r24, r24
 f02:	96 95       	lsr	r25
 f04:	87 95       	ror	r24
 f06:	97 f9       	bld	r25, 7
 f08:	08 95       	ret

00000f0a <__fp_mpack>:
 f0a:	9f 3f       	cpi	r25, 0xFF	; 255
 f0c:	31 f0       	breq	.+12     	; 0xf1a <__fp_mpack_finite+0xc>

00000f0e <__fp_mpack_finite>:
 f0e:	91 50       	subi	r25, 0x01	; 1
 f10:	20 f4       	brcc	.+8      	; 0xf1a <__fp_mpack_finite+0xc>
 f12:	87 95       	ror	r24
 f14:	77 95       	ror	r23
 f16:	67 95       	ror	r22
 f18:	b7 95       	ror	r27
 f1a:	88 0f       	add	r24, r24
 f1c:	91 1d       	adc	r25, r1
 f1e:	96 95       	lsr	r25
 f20:	87 95       	ror	r24
 f22:	97 f9       	bld	r25, 7
 f24:	08 95       	ret

00000f26 <memset>:
 f26:	dc 01       	movw	r26, r24
 f28:	01 c0       	rjmp	.+2      	; 0xf2c <memset+0x6>
 f2a:	6d 93       	st	X+, r22
 f2c:	41 50       	subi	r20, 0x01	; 1
 f2e:	50 40       	sbci	r21, 0x00	; 0
 f30:	e0 f7       	brcc	.-8      	; 0xf2a <memset+0x4>
 f32:	08 95       	ret

00000f34 <strcat>:
 f34:	fb 01       	movw	r30, r22
 f36:	dc 01       	movw	r26, r24
 f38:	0d 90       	ld	r0, X+
 f3a:	00 20       	and	r0, r0
 f3c:	e9 f7       	brne	.-6      	; 0xf38 <strcat+0x4>
 f3e:	11 97       	sbiw	r26, 0x01	; 1
 f40:	01 90       	ld	r0, Z+
 f42:	0d 92       	st	X+, r0
 f44:	00 20       	and	r0, r0
 f46:	e1 f7       	brne	.-8      	; 0xf40 <strcat+0xc>
 f48:	08 95       	ret

00000f4a <strcmp>:
 f4a:	fb 01       	movw	r30, r22
 f4c:	dc 01       	movw	r26, r24
 f4e:	8d 91       	ld	r24, X+
 f50:	01 90       	ld	r0, Z+
 f52:	80 19       	sub	r24, r0
 f54:	01 10       	cpse	r0, r1
 f56:	d9 f3       	breq	.-10     	; 0xf4e <strcmp+0x4>
 f58:	99 0b       	sbc	r25, r25
 f5a:	08 95       	ret

00000f5c <strcpy>:
 f5c:	fb 01       	movw	r30, r22
 f5e:	dc 01       	movw	r26, r24
 f60:	01 90       	ld	r0, Z+
 f62:	0d 92       	st	X+, r0
 f64:	00 20       	and	r0, r0
 f66:	e1 f7       	brne	.-8      	; 0xf60 <strcpy+0x4>
 f68:	08 95       	ret

00000f6a <_exit>:
 f6a:	f8 94       	cli

00000f6c <__stop_program>:
 f6c:	ff cf       	rjmp	.-2      	; 0xf6c <__stop_program>
