
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000148a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00802000  0000148a  0000151e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000494  0080208a  0080208a  000015a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a6f  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d58  00000000  00000000  0000420f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011df  00000000  00000000  00004f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000648  00000000  00000000  00006148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ade  00000000  00000000  00006790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b6e  00000000  00000000  0000726e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00008ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	bc c1       	rjmp	.+888    	; 0x3de <__vector_25>
      66:	00 00       	nop
      68:	ee c1       	rjmp	.+988    	; 0x446 <__vector_26>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1e c2       	rjmp	.+1084   	; 0x4ae <__vector_28>
      72:	00 00       	nop
      74:	50 c2       	rjmp	.+1184   	; 0x516 <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e8       	ldi	r30, 0x8A	; 138
     21c:	f4 e1       	ldi	r31, 0x14	; 20
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	aa 38       	cpi	r26, 0x8A	; 138
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	25 e2       	ldi	r18, 0x25	; 37
     232:	aa e8       	ldi	r26, 0x8A	; 138
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	ae 31       	cpi	r26, 0x1E	; 30
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	9e d1       	rcall	.+828    	; 0x57e <main>
     242:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
     248:	88 ed       	ldi	r24, 0xD8	; 216
     24a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
     24c:	e0 e5       	ldi	r30, 0x50	; 80
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	82 60       	ori	r24, 0x02	; 2
     254:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	81 ff       	sbrs	r24, 1
     25a:	fd cf       	rjmp	.-6      	; 0x256 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
     25c:	88 ed       	ldi	r24, 0xD8	; 216
     25e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 40 00 	sts	0x0040, r24
     266:	08 95       	ret

00000268 <printHeaderList>:
//node_t *listHead = NULL; // head
node_t *listHead = NULL; // head

int sizeOfList(node_t *listHead);

void printHeaderList (void){
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	char* number = NULL;
	DebugPrint("\r\nPopulationlist\r\n");
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	90 e2       	ldi	r25, 0x20	; 32
     270:	b6 d4       	rcall	.+2412   	; 0xbde <DebugPrint>
    DebugPrint("Nr.\t");
     272:	89 e1       	ldi	r24, 0x19	; 25
     274:	90 e2       	ldi	r25, 0x20	; 32
     276:	b3 d4       	rcall	.+2406   	; 0xbde <DebugPrint>
    for (int iteration = 0; iteration < DATASIZE; ++iteration){
     278:	c0 e0       	ldi	r28, 0x00	; 0
     27a:	d0 e0       	ldi	r29, 0x00	; 0
    	DebugPrint("Data[");
     27c:	8e e1       	ldi	r24, 0x1E	; 30
     27e:	90 e2       	ldi	r25, 0x20	; 32
     280:	ae d4       	rcall	.+2396   	; 0xbde <DebugPrint>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     282:	4a e0       	ldi	r20, 0x0A	; 10
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	ce 01       	movw	r24, r28
     28a:	0e 94 10 0a 	call	0x1420	; 0x1420 <__itoa_ncheck>
		itoa(iteration, number, 10);
		DebugPrint(number);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	a5 d4       	rcall	.+2378   	; 0xbde <DebugPrint>
		DebugPrint("]\t");
     294:	84 e2       	ldi	r24, 0x24	; 36
     296:	90 e2       	ldi	r25, 0x20	; 32
     298:	a2 d4       	rcall	.+2372   	; 0xbde <DebugPrint>

void printHeaderList (void){
	char* number = NULL;
	DebugPrint("\r\nPopulationlist\r\n");
    DebugPrint("Nr.\t");
    for (int iteration = 0; iteration < DATASIZE; ++iteration){
     29a:	21 96       	adiw	r28, 0x01	; 1
     29c:	c8 30       	cpi	r28, 0x08	; 8
     29e:	d1 05       	cpc	r29, r1
     2a0:	69 f7       	brne	.-38     	; 0x27c <printHeaderList+0x14>
    	DebugPrint("Data[");
		itoa(iteration, number, 10);
		DebugPrint(number);
		DebugPrint("]\t");
    }
    DebugPrint("\r\n");
     2a2:	8d e2       	ldi	r24, 0x2D	; 45
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	9b d4       	rcall	.+2358   	; 0xbde <DebugPrint>
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <print_list>:
 * @param  item 	Used for iteration
 * @param  *current Status pointer to the current memory location
 * @param  data     Data from memory
 * @param  next    Status pointer to the next memory location
 */
void print_list(node_t *listHead) {
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	7c 01       	movw	r14, r24
	char* number = NULL;
	int item, listNumber = 0;
    node_t *current = listHead;

    printHeaderList();
     2c0:	d3 df       	rcall	.-90     	; 0x268 <printHeaderList>
    while(current != NULL) {
     2c2:	e1 14       	cp	r14, r1
     2c4:	f1 04       	cpc	r15, r1
     2c6:	49 f1       	breq	.+82     	; 0x31a <print_list+0x6c>
 * @param  data     Data from memory
 * @param  next    Status pointer to the next memory location
 */
void print_list(node_t *listHead) {
	char* number = NULL;
	int item, listNumber = 0;
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	4a e0       	ldi	r20, 0x0A	; 10
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	c6 01       	movw	r24, r12
     2d4:	0e 94 10 0a 	call	0x1420	; 0x1420 <__itoa_ncheck>
    node_t *current = listHead;

    printHeaderList();
    while(current != NULL) {
		itoa(listNumber, number, 10);
		DebugPrint(number);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	80 d4       	rcall	.+2304   	; 0xbde <DebugPrint>
		DebugPrint("\t");
     2de:	8c e1       	ldi	r24, 0x1C	; 28
     2e0:	90 e2       	ldi	r25, 0x20	; 32
     2e2:	7d d4       	rcall	.+2298   	; 0xbde <DebugPrint>
     2e4:	87 01       	movw	r16, r14
        for(item = 0; item < DATASIZE; item++){
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
        	DebugPrint(current -> data[item]);
     2ea:	f8 01       	movw	r30, r16
     2ec:	81 91       	ld	r24, Z+
     2ee:	91 91       	ld	r25, Z+
     2f0:	8f 01       	movw	r16, r30
     2f2:	75 d4       	rcall	.+2282   	; 0xbde <DebugPrint>
			DebugPrint("\t");
     2f4:	8c e1       	ldi	r24, 0x1C	; 28
     2f6:	90 e2       	ldi	r25, 0x20	; 32
     2f8:	72 d4       	rcall	.+2276   	; 0xbde <DebugPrint>
    printHeaderList();
    while(current != NULL) {
		itoa(listNumber, number, 10);
		DebugPrint(number);
		DebugPrint("\t");
        for(item = 0; item < DATASIZE; item++){
     2fa:	21 96       	adiw	r28, 0x01	; 1
     2fc:	c8 30       	cpi	r28, 0x08	; 8
     2fe:	d1 05       	cpc	r29, r1
     300:	a1 f7       	brne	.-24     	; 0x2ea <print_list+0x3c>
        	DebugPrint(current -> data[item]);
			DebugPrint("\t");
        }  
        DebugPrint("\r\n");
     302:	8d e2       	ldi	r24, 0x2D	; 45
     304:	90 e2       	ldi	r25, 0x20	; 32
     306:	6b d4       	rcall	.+2262   	; 0xbde <DebugPrint>
        current = current -> next;
     308:	f7 01       	movw	r30, r14
     30a:	e0 88       	ldd	r14, Z+16	; 0x10
     30c:	f1 88       	ldd	r15, Z+17	; 0x11
        ++listNumber;
     30e:	ff ef       	ldi	r31, 0xFF	; 255
     310:	cf 1a       	sub	r12, r31
     312:	df 0a       	sbc	r13, r31
	char* number = NULL;
	int item, listNumber = 0;
    node_t *current = listHead;

    printHeaderList();
    while(current != NULL) {
     314:	e1 14       	cp	r14, r1
     316:	f1 04       	cpc	r15, r1
     318:	c9 f6       	brne	.-78     	; 0x2cc <print_list+0x1e>
        }  
        DebugPrint("\r\n");
        current = current -> next;
        ++listNumber;
    }
}
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	08 95       	ret

0000032c <append>:
 * @param  *head    List variable
 * @param  data     Data to write to memory
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 */
void append (node_t *listHead, char* data[DATASIZE]){
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
     336:	06 2f       	mov	r16, r22
     338:	17 2f       	mov	r17, r23
	node_t *current = listHead;
	while (current -> next != NULL){
     33a:	28 89       	ldd	r18, Y+16	; 0x10
     33c:	39 89       	ldd	r19, Y+17	; 0x11
     33e:	21 15       	cp	r18, r1
     340:	31 05       	cpc	r19, r1
     342:	11 f0       	breq	.+4      	; 0x348 <append+0x1c>
		current = current -> next;
     344:	e9 01       	movw	r28, r18
     346:	f9 cf       	rjmp	.-14     	; 0x33a <append+0xe>
	}
	current -> next = (struct node *) malloc(sizeof(node_t));
     348:	82 e1       	ldi	r24, 0x12	; 18
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	20 d7       	rcall	.+3648   	; 0x118e <malloc>
     34e:	88 8b       	std	Y+16, r24	; 0x10
     350:	99 8b       	std	Y+17, r25	; 0x11
     352:	e0 2f       	mov	r30, r16
     354:	f1 2f       	mov	r31, r17
	for (int item = 0; item < DATASIZE; ++item){
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
		current -> next -> data[item] = data[item];
     35a:	a8 89       	ldd	r26, Y+16	; 0x10
     35c:	b9 89       	ldd	r27, Y+17	; 0x11
     35e:	81 91       	ld	r24, Z+
     360:	91 91       	ld	r25, Z+
     362:	a9 01       	movw	r20, r18
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	a4 0f       	add	r26, r20
     36a:	b5 1f       	adc	r27, r21
     36c:	8d 93       	st	X+, r24
     36e:	9c 93       	st	X, r25
	node_t *current = listHead;
	while (current -> next != NULL){
		current = current -> next;
	}
	current -> next = (struct node *) malloc(sizeof(node_t));
	for (int item = 0; item < DATASIZE; ++item){
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	28 30       	cpi	r18, 0x08	; 8
     376:	31 05       	cpc	r19, r1
     378:	81 f7       	brne	.-32     	; 0x35a <append+0x2e>
		current -> next -> data[item] = data[item];
	}
	current -> next -> next = NULL;
     37a:	e8 89       	ldd	r30, Y+16	; 0x10
     37c:	f9 89       	ldd	r31, Y+17	; 0x11
     37e:	10 8a       	std	Z+16, r1	; 0x10
     380:	11 8a       	std	Z+17, r1	; 0x11
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <insert>:
 * @param  data     Data to write to memory
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 * @param  item 	Used for iteration
 */
void insert (node_t ** listHead, char* data[DATASIZE]){
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	8c 01       	movw	r16, r24
     39a:	e6 2e       	mov	r14, r22
     39c:	f7 2e       	mov	r15, r23
	node_t * new_node;
	new_node = (struct node *) malloc(sizeof(node_t));
     39e:	82 e1       	ldi	r24, 0x12	; 18
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	f5 d6       	rcall	.+3562   	; 0x118e <malloc>
     3a4:	ec 01       	movw	r28, r24
     3a6:	ee 2d       	mov	r30, r14
     3a8:	ff 2d       	mov	r31, r15
     3aa:	dc 01       	movw	r26, r24

	for (int item = 0; item < DATASIZE; ++item){
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
		new_node -> data[item] = data[item];
     3b0:	41 91       	ld	r20, Z+
     3b2:	51 91       	ld	r21, Z+
     3b4:	4d 93       	st	X+, r20
     3b6:	5d 93       	st	X+, r21
 */
void insert (node_t ** listHead, char* data[DATASIZE]){
	node_t * new_node;
	new_node = (struct node *) malloc(sizeof(node_t));

	for (int item = 0; item < DATASIZE; ++item){
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	28 30       	cpi	r18, 0x08	; 8
     3be:	31 05       	cpc	r19, r1
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <insert+0x24>
		new_node -> data[item] = data[item];
	}
	new_node -> next = *listHead;
     3c2:	f8 01       	movw	r30, r16
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	88 8b       	std	Y+16, r24	; 0x10
     3ca:	99 8b       	std	Y+17, r25	; 0x11
	*listHead = new_node;
     3cc:	c0 83       	st	Z, r28
     3ce:	d1 83       	std	Z+1, r29	; 0x01
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	08 b6       	in	r0, 0x38	; 56
     3ea:	0f 92       	push	r0
     3ec:	18 be       	out	0x38, r1	; 56
     3ee:	09 b6       	in	r0, 0x39	; 57
     3f0:	0f 92       	push	r0
     3f2:	19 be       	out	0x39, r1	; 57
     3f4:	0b b6       	in	r0, 0x3b	; 59
     3f6:	0f 92       	push	r0
     3f8:	1b be       	out	0x3b, r1	; 59
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
     412:	8c e8       	ldi	r24, 0x8C	; 140
     414:	90 e2       	ldi	r25, 0x20	; 32
     416:	48 d4       	rcall	.+2192   	; 0xca8 <USART_RXComplete>
}
     418:	ff 91       	pop	r31
     41a:	ef 91       	pop	r30
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	7f 91       	pop	r23
     426:	6f 91       	pop	r22
     428:	5f 91       	pop	r21
     42a:	4f 91       	pop	r20
     42c:	3f 91       	pop	r19
     42e:	2f 91       	pop	r18
     430:	0f 90       	pop	r0
     432:	0b be       	out	0x3b, r0	; 59
     434:	0f 90       	pop	r0
     436:	09 be       	out	0x39, r0	; 57
     438:	0f 90       	pop	r0
     43a:	08 be       	out	0x38, r0	; 56
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	08 b6       	in	r0, 0x38	; 56
     452:	0f 92       	push	r0
     454:	18 be       	out	0x38, r1	; 56
     456:	09 b6       	in	r0, 0x39	; 57
     458:	0f 92       	push	r0
     45a:	19 be       	out	0x39, r1	; 57
     45c:	0b b6       	in	r0, 0x3b	; 59
     45e:	0f 92       	push	r0
     460:	1b be       	out	0x3b, r1	; 59
     462:	2f 93       	push	r18
     464:	3f 93       	push	r19
     466:	4f 93       	push	r20
     468:	5f 93       	push	r21
     46a:	6f 93       	push	r22
     46c:	7f 93       	push	r23
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
     476:	ef 93       	push	r30
     478:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
     47a:	8c e8       	ldi	r24, 0x8C	; 140
     47c:	90 e2       	ldi	r25, 0x20	; 32
     47e:	2f d4       	rcall	.+2142   	; 0xcde <USART_DataRegEmpty>
}
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	bf 91       	pop	r27
     486:	af 91       	pop	r26
     488:	9f 91       	pop	r25
     48a:	8f 91       	pop	r24
     48c:	7f 91       	pop	r23
     48e:	6f 91       	pop	r22
     490:	5f 91       	pop	r21
     492:	4f 91       	pop	r20
     494:	3f 91       	pop	r19
     496:	2f 91       	pop	r18
     498:	0f 90       	pop	r0
     49a:	0b be       	out	0x3b, r0	; 59
     49c:	0f 90       	pop	r0
     49e:	09 be       	out	0x39, r0	; 57
     4a0:	0f 90       	pop	r0
     4a2:	08 be       	out	0x38, r0	; 56
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	08 b6       	in	r0, 0x38	; 56
     4ba:	0f 92       	push	r0
     4bc:	18 be       	out	0x38, r1	; 56
     4be:	09 b6       	in	r0, 0x39	; 57
     4c0:	0f 92       	push	r0
     4c2:	19 be       	out	0x39, r1	; 57
     4c4:	0b b6       	in	r0, 0x3b	; 59
     4c6:	0f 92       	push	r0
     4c8:	1b be       	out	0x3b, r1	; 59
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     4e2:	83 e9       	ldi	r24, 0x93	; 147
     4e4:	92 e2       	ldi	r25, 0x22	; 34
     4e6:	e0 d3       	rcall	.+1984   	; 0xca8 <USART_RXComplete>
}
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	0b be       	out	0x3b, r0	; 59
     504:	0f 90       	pop	r0
     506:	09 be       	out	0x39, r0	; 57
     508:	0f 90       	pop	r0
     50a:	08 be       	out	0x38, r0	; 56
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	08 b6       	in	r0, 0x38	; 56
     522:	0f 92       	push	r0
     524:	18 be       	out	0x38, r1	; 56
     526:	09 b6       	in	r0, 0x39	; 57
     528:	0f 92       	push	r0
     52a:	19 be       	out	0x39, r1	; 57
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	1b be       	out	0x3b, r1	; 59
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     54a:	83 e9       	ldi	r24, 0x93	; 147
     54c:	92 e2       	ldi	r25, 0x22	; 34
     54e:	c7 d3       	rcall	.+1934   	; 0xcde <USART_DataRegEmpty>
}
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	bf 91       	pop	r27
     556:	af 91       	pop	r26
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	7f 91       	pop	r23
     55e:	6f 91       	pop	r22
     560:	5f 91       	pop	r21
     562:	4f 91       	pop	r20
     564:	3f 91       	pop	r19
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	0b be       	out	0x3b, r0	; 59
     56c:	0f 90       	pop	r0
     56e:	09 be       	out	0x39, r0	; 57
     570:	0f 90       	pop	r0
     572:	08 be       	out	0x38, r0	; 56
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <main>:
extern node_t *listHead; // head


#define UPDATEINTERVAL 1000			// in ms

int main(void){
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	c0 59       	subi	r28, 0x90	; 144
     588:	d1 09       	sbc	r29, r1
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
     58e:	5c de       	rcall	.-840    	; 0x248 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
     590:	c1 2c       	mov	r12, r1
     592:	e1 2c       	mov	r14, r1
     594:	12 ec       	ldi	r17, 0xC2	; 194
     596:	f1 2e       	mov	r15, r17
     598:	01 e0       	ldi	r16, 0x01	; 1
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	38 e4       	ldi	r19, 0x48	; 72
     5a0:	48 ee       	ldi	r20, 0xE8	; 232
     5a2:	51 e0       	ldi	r21, 0x01	; 1
     5a4:	60 ea       	ldi	r22, 0xA0	; 160
     5a6:	78 e0       	ldi	r23, 0x08	; 8
     5a8:	8c e8       	ldi	r24, 0x8C	; 140
     5aa:	90 e2       	ldi	r25, 0x20	; 32
     5ac:	bb d2       	rcall	.+1398   	; 0xb24 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	38 e4       	ldi	r19, 0x48	; 72
     5b2:	48 ee       	ldi	r20, 0xE8	; 232
     5b4:	51 e0       	ldi	r21, 0x01	; 1
     5b6:	60 eb       	ldi	r22, 0xB0	; 176
     5b8:	78 e0       	ldi	r23, 0x08	; 8
     5ba:	83 e9       	ldi	r24, 0x93	; 147
     5bc:	92 e2       	ldi	r25, 0x22	; 34
     5be:	b2 d2       	rcall	.+1380   	; 0xb24 <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	e0 ea       	ldi	r30, 0xA0	; 160
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	82 83       	std	Z+2, r24	; 0x02
	sei();
     5c8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	87 ea       	ldi	r24, 0xA7	; 167
     5ce:	91 e6       	ldi	r25, 0x61	; 97
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x52>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x5c>
     5da:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
     5dc:	87 e2       	ldi	r24, 0x27	; 39
     5de:	90 e2       	ldi	r25, 0x20	; 32
     5e0:	03 d3       	rcall	.+1542   	; 0xbe8 <Command>
	Command(SBIV500);
     5e2:	80 e3       	ldi	r24, 0x30	; 48
     5e4:	90 e2       	ldi	r25, 0x20	; 32
     5e6:	00 d3       	rcall	.+1536   	; 0xbe8 <Command>
     5e8:	fe 01       	movw	r30, r28
     5ea:	31 96       	adiw	r30, 0x01	; 1
     5ec:	9e 01       	movw	r18, r28
     5ee:	2f 5e       	subi	r18, 0xEF	; 239
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
	
	char* database [8];
	char* empty = "empty";
	
	for (int i = 0; i < 8; ++i){
		database[i]= empty;
     5f2:	8b e3       	ldi	r24, 0x3B	; 59
     5f4:	90 e2       	ldi	r25, 0x20	; 32
     5f6:	81 93       	st	Z+, r24
     5f8:	91 93       	st	Z+, r25
	Command(SBIV500);
	
	char* database [8];
	char* empty = "empty";
	
	for (int i = 0; i < 8; ++i){
     5fa:	e2 17       	cp	r30, r18
     5fc:	f3 07       	cpc	r31, r19
     5fe:	d9 f7       	brne	.-10     	; 0x5f6 <main+0x78>
		database[i]= empty;
	}
	
	insert(&listHead,database);
     600:	be 01       	movw	r22, r28
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	8a e8       	ldi	r24, 0x8A	; 138
     608:	90 e2       	ldi	r25, 0x20	; 32
     60a:	c0 de       	rcall	.-640    	; 0x38c <insert>
	
	
	while(1) {
		char message[128];
		
		memset(message, EOS, strlen(message));
     60c:	8e 01       	movw	r16, r28
     60e:	0f 5e       	subi	r16, 0xEF	; 239
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	f8 01       	movw	r30, r16
     614:	01 90       	ld	r0, Z+
     616:	00 20       	and	r0, r0
     618:	e9 f7       	brne	.-6      	; 0x614 <main+0x96>
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	af 01       	movw	r20, r30
     61e:	40 1b       	sub	r20, r16
     620:	51 0b       	sbc	r21, r17
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	c8 01       	movw	r24, r16
     628:	d9 d6       	rcall	.+3506   	; 0x13dc <memset>
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	87 ea       	ldi	r24, 0xA7	; 167
     62e:	91 e6       	ldi	r25, 0x61	; 97
     630:	21 50       	subi	r18, 0x01	; 1
     632:	80 40       	sbci	r24, 0x00	; 0
     634:	90 40       	sbci	r25, 0x00	; 0
     636:	e1 f7       	brne	.-8      	; 0x630 <main+0xb2>
     638:	00 c0       	rjmp	.+0      	; 0x63a <main+0xbc>
     63a:	00 00       	nop
		_delay_ms(UPDATEINTERVAL);
		DebugPrint(CLEARTERM);
     63c:	81 e4       	ldi	r24, 0x41	; 65
     63e:	90 e2       	ldi	r25, 0x20	; 32
     640:	ce d2       	rcall	.+1436   	; 0xbde <DebugPrint>
		//DebugPrint(TranslateMessage());
		strcpy(message,TranslateMessage());
     642:	f1 d0       	rcall	.+482    	; 0x826 <TranslateMessage>
     644:	bc 01       	movw	r22, r24
     646:	c8 01       	movw	r24, r16
     648:	e4 d6       	rcall	.+3528   	; 0x1412 <strcpy>
		
//		DebugPrint(message);
		if (ValidateMessage(message,TYPE_RRN) == true){
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	c8 01       	movw	r24, r16
     64e:	09 d0       	rcall	.+18     	; 0x662 <ValidateMessage>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	19 f4       	brne	.+6      	; 0x65a <main+0xdc>
			DetermineCommandtype(message);
     654:	c8 01       	movw	r24, r16
     656:	68 d0       	rcall	.+208    	; 0x728 <DetermineCommandtype>
     658:	dc cf       	rjmp	.-72     	; 0x612 <main+0x94>
		}else{
			DebugPrint("Not valid");
     65a:	8c e4       	ldi	r24, 0x4C	; 76
     65c:	90 e2       	ldi	r25, 0x20	; 32
     65e:	bf d2       	rcall	.+1406   	; 0xbde <DebugPrint>
		}

	}
     660:	d8 cf       	rjmp	.-80     	; 0x612 <main+0x94>

00000662 <ValidateMessage>:
 * @param	
 */
void RRN_function (char *message){
	uart_puts(&uartC1, "\r\nfunctie\r\n");
	DebugPrint(message);
}
     662:	fc 01       	movw	r30, r24
     664:	01 90       	ld	r0, Z+
     666:	00 20       	and	r0, r0
     668:	e9 f7       	brne	.-6      	; 0x664 <ValidateMessage+0x2>
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	e8 1b       	sub	r30, r24
     66e:	f9 0b       	sbc	r31, r25
     670:	61 30       	cpi	r22, 0x01	; 1
     672:	29 f4       	brne	.+10     	; 0x67e <ValidateMessage+0x1c>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	e9 32       	cpi	r30, 0x29	; 41
     678:	19 f0       	breq	.+6      	; 0x680 <ValidateMessage+0x1e>
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	08 95       	ret
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	08 95       	ret

00000682 <fillpopulationlist>:
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	6c 97       	sbiw	r28, 0x1c	; 28
     690:	cd bf       	out	0x3d, r28	; 61
     692:	de bf       	out	0x3e, r29	; 62
     694:	8c 01       	movw	r16, r24
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	fc 01       	movw	r30, r24
     69c:	01 90       	ld	r0, Z+
     69e:	00 20       	and	r0, r0
     6a0:	e9 f7       	brne	.-6      	; 0x69c <fillpopulationlist+0x1a>
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	af 01       	movw	r20, r30
     6a6:	48 1b       	sub	r20, r24
     6a8:	59 0b       	sbc	r21, r25
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	96 d6       	rcall	.+3372   	; 0x13dc <memset>
     6b0:	f8 01       	movw	r30, r16
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	8c 32       	cpi	r24, 0x2C	; 44
     6b6:	71 f0       	breq	.+28     	; 0x6d4 <fillpopulationlist+0x52>
     6b8:	32 96       	adiw	r30, 0x02	; 2
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	a1 e0       	ldi	r26, 0x01	; 1
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	ac 0f       	add	r26, r28
     6c2:	bd 1f       	adc	r27, r29
     6c4:	a2 0f       	add	r26, r18
     6c6:	b1 1d       	adc	r27, r1
     6c8:	8c 93       	st	X, r24
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	81 91       	ld	r24, Z+
     6ce:	8c 32       	cpi	r24, 0x2C	; 44
     6d0:	a9 f7       	brne	.-22     	; 0x6bc <fillpopulationlist+0x3a>
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <fillpopulationlist+0x54>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	ce 01       	movw	r24, r28
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	fc 01       	movw	r30, r24
     6dc:	e2 0f       	add	r30, r18
     6de:	f1 1d       	adc	r31, r1
     6e0:	10 82       	st	Z, r1
     6e2:	8d 87       	std	Y+13, r24	; 0x0d
     6e4:	9e 87       	std	Y+14, r25	; 0x0e
     6e6:	fe 01       	movw	r30, r28
     6e8:	3f 96       	adiw	r30, 0x0f	; 15
     6ea:	9e 01       	movw	r18, r28
     6ec:	23 5e       	subi	r18, 0xE3	; 227
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	86 e5       	ldi	r24, 0x56	; 86
     6f2:	90 e2       	ldi	r25, 0x20	; 32
     6f4:	81 93       	st	Z+, r24
     6f6:	91 93       	st	Z+, r25
     6f8:	e2 17       	cp	r30, r18
     6fa:	f3 07       	cpc	r31, r19
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <fillpopulationlist+0x72>
     6fe:	be 01       	movw	r22, r28
     700:	63 5f       	subi	r22, 0xF3	; 243
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	80 91 8a 20 	lds	r24, 0x208A
     708:	90 91 8b 20 	lds	r25, 0x208B
     70c:	0f de       	rcall	.-994    	; 0x32c <append>
     70e:	80 91 8a 20 	lds	r24, 0x208A
     712:	90 91 8b 20 	lds	r25, 0x208B
     716:	cb dd       	rcall	.-1130   	; 0x2ae <print_list>
     718:	6c 96       	adiw	r28, 0x1c	; 28
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <DetermineCommandtype>:
/**
 * Determines the meaning of the message
 * @param  	value	received value
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <DetermineCommandtype+0xe>
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	7c 01       	movw	r14, r24
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
	
	memset(command, EOS, strlen(command));	
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	fc 01       	movw	r30, r24
     744:	01 90       	ld	r0, Z+
     746:	00 20       	and	r0, r0
     748:	e9 f7       	brne	.-6      	; 0x744 <DetermineCommandtype+0x1c>
     74a:	31 97       	sbiw	r30, 0x01	; 1
     74c:	af 01       	movw	r20, r30
     74e:	48 1b       	sub	r20, r24
     750:	59 0b       	sbc	r21, r25
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	42 d6       	rcall	.+3204   	; 0x13dc <memset>
	messagePointer = message;
	
	DebugPrint(message);
     758:	c7 01       	movw	r24, r14
     75a:	41 d2       	rcall	.+1154   	; 0xbde <DebugPrint>

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     75c:	f7 01       	movw	r30, r14
     75e:	81 81       	ldd	r24, Z+1	; 0x01
     760:	8a 33       	cpi	r24, 0x3A	; 58
     762:	29 f4       	brne	.+10     	; 0x76e <DetermineCommandtype+0x46>
	memset(command, EOS, strlen(command));	
	messagePointer = message;
	
	DebugPrint(message);

	*messagePointer++;
     764:	87 01       	movw	r16, r14
     766:	0f 5f       	subi	r16, 0xFF	; 255
     768:	1f 4f       	sbci	r17, 0xFF	; 255
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	21 c0       	rjmp	.+66     	; 0x7b0 <DetermineCommandtype+0x88>
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     76e:	87 01       	movw	r16, r14
     770:	0e 5f       	subi	r16, 0xFE	; 254
     772:	1f 4f       	sbci	r17, 0xFF	; 255
		if(*messagePointer == ( COMMAND_END)){ break;}		
     774:	f7 01       	movw	r30, r14
     776:	92 81       	ldd	r25, Z+2	; 0x02
     778:	9a 33       	cpi	r25, 0x3A	; 58
     77a:	c9 f0       	breq	.+50     	; 0x7ae <DetermineCommandtype+0x86>
     77c:	98 01       	movw	r18, r16
     77e:	d7 01       	movw	r26, r14
     780:	13 96       	adiw	r26, 0x03	; 3
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	04 c0       	rjmp	.+8      	; 0x78e <DetermineCommandtype+0x66>
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     786:	89 01       	movw	r16, r18
		if(*messagePointer == ( COMMAND_END)){ break;}		
     788:	9d 91       	ld	r25, X+
     78a:	9a 33       	cpi	r25, 0x3A	; 58
     78c:	89 f0       	breq	.+34     	; 0x7b0 <DetermineCommandtype+0x88>
     78e:	89 01       	movw	r16, r18
		command[count] = *messagePointer;		
     790:	e1 e0       	ldi	r30, 0x01	; 1
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	ec 0f       	add	r30, r28
     796:	fd 1f       	adc	r31, r29
     798:	e8 0f       	add	r30, r24
     79a:	f1 1d       	adc	r31, r1
     79c:	90 83       	st	Z, r25
		count++;
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
	
	DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     7a4:	f8 01       	movw	r30, r16
     7a6:	90 81       	ld	r25, Z
     7a8:	9a 33       	cpi	r25, 0x3A	; 58
     7aa:	69 f7       	brne	.-38     	; 0x786 <DetermineCommandtype+0x5e>
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <DetermineCommandtype+0x88>
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
		*messagePointer++;
		if(*messagePointer == ( COMMAND_END)){ break;}		
		command[count] = *messagePointer;		
		count++;
	}
	command[count] = EOS;
     7b0:	e1 e0       	ldi	r30, 0x01	; 1
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ec 0f       	add	r30, r28
     7b6:	fd 1f       	adc	r31, r29
     7b8:	e8 0f       	add	r30, r24
     7ba:	f1 1d       	adc	r31, r1
     7bc:	10 82       	st	Z, r1
	
	*messagePointer++;

	if		(strcmp(command, "*RRN") == 0){	// Data Notification Message
     7be:	67 e6       	ldi	r22, 0x67	; 103
     7c0:	70 e2       	ldi	r23, 0x20	; 32
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	1c d6       	rcall	.+3128   	; 0x1400 <strcmp>
     7c8:	89 2b       	or	r24, r25
     7ca:	21 f4       	brne	.+8      	; 0x7d4 <DetermineCommandtype+0xac>
		//RRN_function(messagePointer);
		fillpopulationlist(messagePointer);
     7cc:	c8 01       	movw	r24, r16
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	58 df       	rcall	.-336    	; 0x682 <fillpopulationlist>
     7d2:	1f c0       	rjmp	.+62     	; 0x812 <DetermineCommandtype+0xea>
	}else if(strcmp(command, "DNO")  == 0){	// Node ID Notification Message
     7d4:	6c e6       	ldi	r22, 0x6C	; 108
     7d6:	70 e2       	ldi	r23, 0x20	; 32
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	11 d6       	rcall	.+3106   	; 0x1400 <strcmp>
     7de:	89 2b       	or	r24, r25
     7e0:	c1 f0       	breq	.+48     	; 0x812 <DetermineCommandtype+0xea>
		
	}else if(strcmp(command, "NIN")  == 0){	// Ranging Result Notification Message
     7e2:	60 e7       	ldi	r22, 0x70	; 112
     7e4:	70 e2       	ldi	r23, 0x20	; 32
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	0a d6       	rcall	.+3092   	; 0x1400 <strcmp>
     7ec:	89 2b       	or	r24, r25
     7ee:	89 f0       	breq	.+34     	; 0x812 <DetermineCommandtype+0xea>
		//printf("NIN\n");
	}else if(strcmp(command, "SDAT") == 0){	// SDAT Notification Messages
     7f0:	64 e7       	ldi	r22, 0x74	; 116
     7f2:	70 e2       	ldi	r23, 0x20	; 32
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	03 d6       	rcall	.+3078   	; 0x1400 <strcmp>
     7fa:	89 2b       	or	r24, r25
     7fc:	51 f0       	breq	.+20     	; 0x812 <DetermineCommandtype+0xea>
		//printf("SDAT\n");
	}else if(strcmp(command, "AIR")  == 0){	// AIR Notification Message
     7fe:	69 e7       	ldi	r22, 0x79	; 121
     800:	70 e2       	ldi	r23, 0x20	; 32
     802:	ce 01       	movw	r24, r28
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	fc d5       	rcall	.+3064   	; 0x1400 <strcmp>
     808:	89 2b       	or	r24, r25
     80a:	19 f0       	breq	.+6      	; 0x812 <DetermineCommandtype+0xea>
		//printf("AIR\n");
	}else{
		DebugPrint("No command\r\n");
     80c:	8d e7       	ldi	r24, 0x7D	; 125
     80e:	90 e2       	ldi	r25, 0x20	; 32
     810:	e6 d1       	rcall	.+972    	; 0xbde <DebugPrint>
	}
}
     812:	24 96       	adiw	r28, 0x04	; 4
     814:	cd bf       	out	0x3d, r28	; 61
     816:	de bf       	out	0x3e, r29	; 62
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	08 95       	ret

00000826 <TranslateMessage>:
 * Translates the received message converts characters
 * to a single string
 * @param  	value	received value
 * @return	message pointer to the translated message
 */
char * TranslateMessage (void){
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	c0 58       	subi	r28, 0x80	; 128
     834:	d1 09       	sbc	r29, r1
     836:	cd bf       	out	0x3d, r28	; 61
     838:	de bf       	out	0x3e, r29	; 62
	char value[128];

	memset(globalMessage, EOS, strlen(globalMessage));
     83a:	ea e9       	ldi	r30, 0x9A	; 154
     83c:	f4 e2       	ldi	r31, 0x24	; 36
     83e:	01 90       	ld	r0, Z+
     840:	00 20       	and	r0, r0
     842:	e9 f7       	brne	.-6      	; 0x83e <TranslateMessage+0x18>
     844:	31 97       	sbiw	r30, 0x01	; 1
     846:	af 01       	movw	r20, r30
     848:	4a 59       	subi	r20, 0x9A	; 154
     84a:	54 42       	sbci	r21, 0x24	; 36
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	8a e9       	ldi	r24, 0x9A	; 154
     852:	94 e2       	ldi	r25, 0x24	; 36
     854:	c3 d5       	rcall	.+2950   	; 0x13dc <memset>
	memset(value, EOS, strlen(value));
     856:	8e 01       	movw	r16, r28
     858:	0f 5f       	subi	r16, 0xFF	; 255
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	f8 01       	movw	r30, r16
     85e:	01 90       	ld	r0, Z+
     860:	00 20       	and	r0, r0
     862:	e9 f7       	brne	.-6      	; 0x85e <TranslateMessage+0x38>
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	af 01       	movw	r20, r30
     868:	40 1b       	sub	r20, r16
     86a:	51 0b       	sbc	r21, r17
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	c8 01       	movw	r24, r16
     872:	b4 d5       	rcall	.+2920   	; 0x13dc <memset>

	value[0] = uart_getc(&uartC0);
     874:	8c e8       	ldi	r24, 0x8C	; 140
     876:	90 e2       	ldi	r25, 0x20	; 32
     878:	21 d0       	rcall	.+66     	; 0x8bc <uart_getc>
     87a:	89 83       	std	Y+1, r24	; 0x01
	strcpy(globalMessage, value);
     87c:	b8 01       	movw	r22, r16
     87e:	8a e9       	ldi	r24, 0x9A	; 154
     880:	94 e2       	ldi	r25, 0x24	; 36
     882:	c7 d5       	rcall	.+2958   	; 0x1412 <strcpy>
	while (value[0] != CR){
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	8d 30       	cpi	r24, 0x0D	; 13
     888:	71 f0       	breq	.+28     	; 0x8a6 <TranslateMessage+0x80>
		if (value[0] != CR){	
     88a:	8d 30       	cpi	r24, 0x0D	; 13
     88c:	31 f0       	breq	.+12     	; 0x89a <TranslateMessage+0x74>
			
			strcat(globalMessage, value);	
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	8a e9       	ldi	r24, 0x9A	; 154
     896:	94 e2       	ldi	r25, 0x24	; 36
     898:	a8 d5       	rcall	.+2896   	; 0x13ea <strcat>
		}
		value[0] = uart_getc(&uartC0);
     89a:	8c e8       	ldi	r24, 0x8C	; 140
     89c:	90 e2       	ldi	r25, 0x20	; 32
     89e:	0e d0       	rcall	.+28     	; 0x8bc <uart_getc>
     8a0:	89 83       	std	Y+1, r24	; 0x01
	memset(globalMessage, EOS, strlen(globalMessage));
	memset(value, EOS, strlen(value));

	value[0] = uart_getc(&uartC0);
	strcpy(globalMessage, value);
	while (value[0] != CR){
     8a2:	8d 30       	cpi	r24, 0x0D	; 13
     8a4:	91 f7       	brne	.-28     	; 0x88a <TranslateMessage+0x64>
			strcat(globalMessage, value);	
		}
		value[0] = uart_getc(&uartC0);
	}
	return globalMessage;
     8a6:	8a e9       	ldi	r24, 0x9A	; 154
     8a8:	94 e2       	ldi	r25, 0x24	; 36
     8aa:	c0 58       	subi	r28, 0x80	; 128
     8ac:	df 4f       	sbci	r29, 0xFF	; 255
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <uart_getc>:
 *
 *  \return received byte from circulair buffer (low byte) or
 *          UART_NO_DATA if buffer is empty
 */
uint16_t uart_getc(USART_data_t *uart)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
     8c2:	da d1       	rcall	.+948    	; 0xc78 <USART_RXBufferData_Available>
     8c4:	88 23       	and	r24, r24
     8c6:	49 f0       	breq	.+18     	; 0x8da <uart_getc+0x1e>
    return UART_NO_DATA;
}
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
     8c8:	e0 eb       	ldi	r30, 0xB0	; 176
     8ca:	f8 e0       	ldi	r31, 0x08	; 8
     8cc:	81 81       	ldd	r24, Z+1	; 0x01
     8ce:	86 ff       	sbrs	r24, 6
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <uart_getc+0x10>
  data = USART_RXBuffer_GetByte(uart);
     8d2:	ce 01       	movw	r24, r28
     8d4:	dc d1       	rcall	.+952    	; 0xc8e <USART_RXBuffer_GetByte>

  return (data & 0x00FF);
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <uart_getc+0x22>
{
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
    return UART_NO_DATA;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	91 e0       	ldi	r25, 0x01	; 1
/*
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );

return USARTC1.DATA;
*/
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
     8ec:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     8ee:	8f d1       	rcall	.+798    	; 0xc0e <USART_TXBuffer_FreeSpace>
     8f0:	88 23       	and	r24, r24
     8f2:	19 f0       	breq	.+6      	; 0x8fa <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     8f4:	61 2f       	mov	r22, r17
     8f6:	ce 01       	movw	r24, r28
     8f8:	96 d1       	rcall	.+812    	; 0xc26 <USART_TXBuffer_PutByte>
  }
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	08 95       	ret

00000902 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     90c:	eb 01       	movw	r28, r22
     90e:	21 96       	adiw	r28, 0x01	; 1
     910:	fb 01       	movw	r30, r22
     912:	60 81       	ld	r22, Z
     914:	66 23       	and	r22, r22
     916:	29 f0       	breq	.+10     	; 0x922 <uart_puts+0x20>
    uart_putc(uart, c);
     918:	c8 01       	movw	r24, r16
     91a:	e4 df       	rcall	.-56     	; 0x8e4 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     91c:	69 91       	ld	r22, Y+
     91e:	61 11       	cpse	r22, r1
     920:	fb cf       	rjmp	.-10     	; 0x918 <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     92c:	80 3a       	cpi	r24, 0xA0	; 160
     92e:	28 e0       	ldi	r18, 0x08	; 8
     930:	92 07       	cpc	r25, r18
     932:	39 f4       	brne	.+14     	; 0x942 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     934:	e0 e4       	ldi	r30, 0x40	; 64
     936:	f6 e0       	ldi	r31, 0x06	; 6
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	82 83       	std	Z+2, r24	; 0x02
     return;
     940:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     942:	80 3b       	cpi	r24, 0xB0	; 176
     944:	28 e0       	ldi	r18, 0x08	; 8
     946:	92 07       	cpc	r25, r18
     948:	39 f4       	brne	.+14     	; 0x958 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     94a:	e0 e4       	ldi	r30, 0x40	; 64
     94c:	f6 e0       	ldi	r31, 0x06	; 6
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     952:	80 e4       	ldi	r24, 0x40	; 64
     954:	82 83       	std	Z+2, r24	; 0x02
     return;
     956:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     958:	80 3a       	cpi	r24, 0xA0	; 160
     95a:	29 e0       	ldi	r18, 0x09	; 9
     95c:	92 07       	cpc	r25, r18
     95e:	39 f4       	brne	.+14     	; 0x96e <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     960:	e0 e6       	ldi	r30, 0x60	; 96
     962:	f6 e0       	ldi	r31, 0x06	; 6
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	82 83       	std	Z+2, r24	; 0x02
     return;
     96c:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     96e:	80 3b       	cpi	r24, 0xB0	; 176
     970:	29 e0       	ldi	r18, 0x09	; 9
     972:	92 07       	cpc	r25, r18
     974:	39 f4       	brne	.+14     	; 0x984 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     976:	e0 e6       	ldi	r30, 0x60	; 96
     978:	f6 e0       	ldi	r31, 0x06	; 6
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     97e:	80 e4       	ldi	r24, 0x40	; 64
     980:	82 83       	std	Z+2, r24	; 0x02
     return;
     982:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     984:	80 3a       	cpi	r24, 0xA0	; 160
     986:	9a 40       	sbci	r25, 0x0A	; 10
     988:	31 f4       	brne	.+12     	; 0x996 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     98a:	e0 e8       	ldi	r30, 0x80	; 128
     98c:	f6 e0       	ldi	r31, 0x06	; 6
     98e:	88 e0       	ldi	r24, 0x08	; 8
     990:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     992:	84 e0       	ldi	r24, 0x04	; 4
     994:	82 83       	std	Z+2, r24	; 0x02
     996:	08 95       	ret

00000998 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     998:	4f 92       	push	r4
     99a:	5f 92       	push	r5
     99c:	6f 92       	push	r6
     99e:	7f 92       	push	r7
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	49 01       	movw	r8, r18
     9b6:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     9b8:	4e 2d       	mov	r20, r14
     9ba:	41 70       	andi	r20, 0x01	; 1
     9bc:	20 e1       	ldi	r18, 0x10	; 16
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	79 01       	movw	r14, r18
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <calc_bsel+0x30>
     9c4:	f5 94       	asr	r15
     9c6:	e7 94       	ror	r14
     9c8:	4a 95       	dec	r20
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <calc_bsel+0x2c>
  if ( scale < 0 ) {
     9cc:	00 23       	and	r16, r16
     9ce:	0c f0       	brlt	.+2      	; 0x9d2 <calc_bsel+0x3a>
     9d0:	39 c0       	rjmp	.+114    	; 0xa44 <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     9d2:	a3 d2       	rcall	.+1350   	; 0xf1a <__floatunsisf>
     9d4:	2b 01       	movw	r4, r22
     9d6:	3c 01       	movw	r6, r24
     9d8:	b7 01       	movw	r22, r14
     9da:	77 27       	eor	r23, r23
     9dc:	88 27       	eor	r24, r24
     9de:	77 fd       	sbrc	r23, 7
     9e0:	80 95       	com	r24
     9e2:	98 2f       	mov	r25, r24
     9e4:	9c d2       	rcall	.+1336   	; 0xf1e <__floatsisf>
     9e6:	6b 01       	movw	r12, r22
     9e8:	7c 01       	movw	r14, r24
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	95 d2       	rcall	.+1322   	; 0xf1a <__floatunsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	1e d3       	rcall	.+1596   	; 0x1036 <__mulsf3>
     9fa:	9b 01       	movw	r18, r22
     9fc:	ac 01       	movw	r20, r24
     9fe:	c3 01       	movw	r24, r6
     a00:	b2 01       	movw	r22, r4
     a02:	f7 d1       	rcall	.+1006   	; 0xdf2 <__divsf3>
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e8       	ldi	r20, 0x80	; 128
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	8d d1       	rcall	.+794    	; 0xd28 <__subsf3>
     a0e:	6b 01       	movw	r12, r22
     a10:	7c 01       	movw	r14, r24
     a12:	11 27       	eor	r17, r17
     a14:	01 95       	neg	r16
     a16:	0c f4       	brge	.+2      	; 0xa1a <calc_bsel+0x82>
     a18:	10 95       	com	r17
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <calc_bsel+0x8c>
     a20:	66 0f       	add	r22, r22
     a22:	77 1f       	adc	r23, r23
     a24:	0a 95       	dec	r16
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <calc_bsel+0x88>
     a28:	88 27       	eor	r24, r24
     a2a:	77 fd       	sbrc	r23, 7
     a2c:	80 95       	com	r24
     a2e:	98 2f       	mov	r25, r24
     a30:	76 d2       	rcall	.+1260   	; 0xf1e <__floatsisf>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	fd d2       	rcall	.+1530   	; 0x1036 <__mulsf3>
     a3c:	5f d3       	rcall	.+1726   	; 0x10fc <round>
     a3e:	41 d2       	rcall	.+1154   	; 0xec2 <__fixunssfsi>
     a40:	cb 01       	movw	r24, r22
     a42:	34 c0       	rjmp	.+104    	; 0xaac <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     a44:	6a d2       	rcall	.+1236   	; 0xf1a <__floatunsisf>
     a46:	2b 01       	movw	r4, r22
     a48:	3c 01       	movw	r6, r24
     a4a:	b7 01       	movw	r22, r14
     a4c:	77 27       	eor	r23, r23
     a4e:	88 27       	eor	r24, r24
     a50:	77 fd       	sbrc	r23, 7
     a52:	80 95       	com	r24
     a54:	98 2f       	mov	r25, r24
     a56:	63 d2       	rcall	.+1222   	; 0xf1e <__floatsisf>
     a58:	6b 01       	movw	r12, r22
     a5a:	7c 01       	movw	r14, r24
     a5c:	c5 01       	movw	r24, r10
     a5e:	b4 01       	movw	r22, r8
     a60:	5c d2       	rcall	.+1208   	; 0xf1a <__floatunsisf>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	c7 01       	movw	r24, r14
     a68:	b6 01       	movw	r22, r12
     a6a:	e5 d2       	rcall	.+1482   	; 0x1036 <__mulsf3>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	c3 01       	movw	r24, r6
     a72:	b2 01       	movw	r22, r4
     a74:	be d1       	rcall	.+892    	; 0xdf2 <__divsf3>
     a76:	4b 01       	movw	r8, r22
     a78:	5c 01       	movw	r10, r24
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <calc_bsel+0xec>
     a80:	66 0f       	add	r22, r22
     a82:	77 1f       	adc	r23, r23
     a84:	0a 95       	dec	r16
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <calc_bsel+0xe8>
     a88:	88 27       	eor	r24, r24
     a8a:	77 fd       	sbrc	r23, 7
     a8c:	80 95       	com	r24
     a8e:	98 2f       	mov	r25, r24
     a90:	46 d2       	rcall	.+1164   	; 0xf1e <__floatsisf>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	c5 01       	movw	r24, r10
     a98:	b4 01       	movw	r22, r8
     a9a:	ab d1       	rcall	.+854    	; 0xdf2 <__divsf3>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e8       	ldi	r20, 0x80	; 128
     aa2:	5f e3       	ldi	r21, 0x3F	; 63
     aa4:	41 d1       	rcall	.+642    	; 0xd28 <__subsf3>
     aa6:	2a d3       	rcall	.+1620   	; 0x10fc <round>
     aa8:	0c d2       	rcall	.+1048   	; 0xec2 <__fixunssfsi>
     aaa:	cb 01       	movw	r24, r22
  }
}
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	9f 90       	pop	r9
     abe:	8f 90       	pop	r8
     ac0:	7f 90       	pop	r7
     ac2:	6f 90       	pop	r6
     ac4:	5f 90       	pop	r5
     ac6:	4f 90       	pop	r4
     ac8:	08 95       	ret

00000aca <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     aca:	4f 92       	push	r4
     acc:	5f 92       	push	r5
     ace:	6f 92       	push	r6
     ad0:	7f 92       	push	r7
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	ef 92       	push	r14
     adc:	0f 93       	push	r16
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	2b 01       	movw	r4, r22
     ae4:	3c 01       	movw	r6, r24
     ae6:	49 01       	movw	r8, r18
     ae8:	5a 01       	movw	r10, r20
     aea:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     aec:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     aee:	ed 2e       	mov	r14, r29
     af0:	0c 2f       	mov	r16, r28
     af2:	a5 01       	movw	r20, r10
     af4:	94 01       	movw	r18, r8
     af6:	c3 01       	movw	r24, r6
     af8:	b2 01       	movw	r22, r4
     afa:	4e df       	rcall	.-356    	; 0x998 <calc_bsel>
     afc:	81 15       	cp	r24, r1
     afe:	90 41       	sbci	r25, 0x10	; 16
     b00:	18 f0       	brcs	.+6      	; 0xb08 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     b02:	cf 5f       	subi	r28, 0xFF	; 255
     b04:	c8 30       	cpi	r28, 0x08	; 8
     b06:	99 f7       	brne	.-26     	; 0xaee <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     b08:	8c 2f       	mov	r24, r28
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	0f 91       	pop	r16
     b10:	ef 90       	pop	r14
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	7f 90       	pop	r7
     b1c:	6f 90       	pop	r6
     b1e:	5f 90       	pop	r5
     b20:	4f 90       	pop	r4
     b22:	08 95       	ret

00000b24 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     b24:	2f 92       	push	r2
     b26:	3f 92       	push	r3
     b28:	4f 92       	push	r4
     b2a:	5f 92       	push	r5
     b2c:	6f 92       	push	r6
     b2e:	7f 92       	push	r7
     b30:	8f 92       	push	r8
     b32:	9f 92       	push	r9
     b34:	af 92       	push	r10
     b36:	bf 92       	push	r11
     b38:	cf 92       	push	r12
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	ec 01       	movw	r28, r24
     b48:	3b 01       	movw	r6, r22
     b4a:	49 01       	movw	r8, r18
     b4c:	5a 01       	movw	r10, r20
     b4e:	17 01       	movw	r2, r14
     b50:	28 01       	movw	r4, r16
     b52:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     b54:	0c 2d       	mov	r16, r12
     b56:	a2 01       	movw	r20, r4
     b58:	91 01       	movw	r18, r2
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	b5 df       	rcall	.-150    	; 0xaca <calc_bscale>
     b60:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     b62:	08 2f       	mov	r16, r24
     b64:	a2 01       	movw	r20, r4
     b66:	91 01       	movw	r18, r2
     b68:	c5 01       	movw	r24, r10
     b6a:	b4 01       	movw	r22, r8
     b6c:	15 df       	rcall	.-470    	; 0x998 <calc_bsel>
     b6e:	b8 2e       	mov	r11, r24
     b70:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     b72:	41 e0       	ldi	r20, 0x01	; 1
     b74:	b3 01       	movw	r22, r6
     b76:	ce 01       	movw	r24, r28
     b78:	3c d0       	rcall	.+120    	; 0xbf2 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     b7a:	e8 81       	ld	r30, Y
     b7c:	f9 81       	ldd	r31, Y+1	; 0x01
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     b82:	e8 81       	ld	r30, Y
     b84:	f9 81       	ldd	r31, Y+1	; 0x01
     b86:	84 81       	ldd	r24, Z+4	; 0x04
     b88:	80 61       	ori	r24, 0x10	; 16
     b8a:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     b8c:	e8 81       	ld	r30, Y
     b8e:	f9 81       	ldd	r31, Y+1	; 0x01
     b90:	84 81       	ldd	r24, Z+4	; 0x04
     b92:	88 60       	ori	r24, 0x08	; 8
     b94:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     b96:	e8 81       	ld	r30, Y
     b98:	f9 81       	ldd	r31, Y+1	; 0x01
     b9a:	83 81       	ldd	r24, Z+3	; 0x03
     b9c:	8f 7c       	andi	r24, 0xCF	; 207
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     ba2:	e8 81       	ld	r30, Y
     ba4:	f9 81       	ldd	r31, Y+1	; 0x01
     ba6:	b6 82       	std	Z+6, r11	; 0x06
     ba8:	e8 81       	ld	r30, Y
     baa:	f9 81       	ldd	r31, Y+1	; 0x01
     bac:	12 95       	swap	r17
     bae:	10 7f       	andi	r17, 0xF0	; 240
     bb0:	e1 2a       	or	r14, r17
     bb2:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     bb4:	88 81       	ld	r24, Y
     bb6:	99 81       	ldd	r25, Y+1	; 0x01
     bb8:	b9 de       	rcall	.-654    	; 0x92c <set_usart_txrx_direction>
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	9f 90       	pop	r9
     bce:	8f 90       	pop	r8
     bd0:	7f 90       	pop	r7
     bd2:	6f 90       	pop	r6
     bd4:	5f 90       	pop	r5
     bd6:	4f 90       	pop	r4
     bd8:	3f 90       	pop	r3
     bda:	2f 90       	pop	r2
     bdc:	08 95       	ret

00000bde <DebugPrint>:
 * Print a string of information on the UART C1 (DEBUG) interface.
 * @param   *debugData	String of information
 * @param   value		Temporarily string value to add a cariage return and new line feed
 */
void DebugPrint (char *debugData){
	uart_puts(&uartC1, debugData);
     bde:	bc 01       	movw	r22, r24
     be0:	83 e9       	ldi	r24, 0x93	; 147
     be2:	92 e2       	ldi	r25, 0x22	; 34
     be4:	8e ce       	rjmp	.-740    	; 0x902 <uart_puts>
     be6:	08 95       	ret

00000be8 <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
     be8:	bc 01       	movw	r22, r24
     bea:	8c e8       	ldi	r24, 0x8C	; 140
     bec:	90 e2       	ldi	r25, 0x20	; 32
     bee:	89 ce       	rjmp	.-750    	; 0x902 <uart_puts>
     bf0:	08 95       	ret

00000bf2 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     bf2:	fc 01       	movw	r30, r24
     bf4:	60 83       	st	Z, r22
     bf6:	71 83       	std	Z+1, r23	; 0x01
     bf8:	42 83       	std	Z+2, r20	; 0x02
     bfa:	ec 5f       	subi	r30, 0xFC	; 252
     bfc:	fd 4f       	sbci	r31, 0xFD	; 253
     bfe:	10 82       	st	Z, r1
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	10 82       	st	Z, r1
     c04:	33 96       	adiw	r30, 0x03	; 3
     c06:	10 82       	st	Z, r1
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	10 82       	st	Z, r1
     c0c:	08 95       	ret

00000c0e <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c0e:	fc 01       	movw	r30, r24
     c10:	eb 5f       	subi	r30, 0xFB	; 251
     c12:	fd 4f       	sbci	r31, 0xFD	; 253
     c14:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     c16:	31 96       	adiw	r30, 0x01	; 1
     c18:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c1a:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	29 13       	cpse	r18, r25
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <USART_TXBuffer_FreeSpace+0x16>
     c22:	80 e0       	ldi	r24, 0x00	; 0
}
     c24:	08 95       	ret

00000c26 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c2c:	dc 01       	movw	r26, r24
     c2e:	ab 5f       	subi	r26, 0xFB	; 251
     c30:	bd 4f       	sbci	r27, 0xFD	; 253
     c32:	2c 91       	ld	r18, X
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	9c 91       	ld	r25, X
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     c38:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	29 13       	cpse	r18, r25
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <USART_TXBuffer_PutByte+0x1c>
     c40:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     c42:	88 23       	and	r24, r24
     c44:	b1 f0       	breq	.+44     	; 0xc72 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     c46:	df 01       	movw	r26, r30
     c48:	ab 5f       	subi	r26, 0xFB	; 251
     c4a:	bd 4f       	sbci	r27, 0xFD	; 253
     c4c:	9c 91       	ld	r25, X
	  	TXbufPtr->TX[tempTX_Head]= data;
     c4e:	ef 01       	movw	r28, r30
     c50:	c9 0f       	add	r28, r25
     c52:	d1 1d       	adc	r29, r1
     c54:	cd 5f       	subi	r28, 0xFD	; 253
     c56:	de 4f       	sbci	r29, 0xFE	; 254
     c58:	68 83       	st	Y, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     c5a:	9f 5f       	subi	r25, 0xFF	; 255
     c5c:	9c 93       	st	X, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     c5e:	a0 81       	ld	r26, Z
     c60:	b1 81       	ldd	r27, Z+1	; 0x01
     c62:	13 96       	adiw	r26, 0x03	; 3
     c64:	9c 91       	ld	r25, X
     c66:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     c68:	9c 7f       	andi	r25, 0xFC	; 252
     c6a:	22 81       	ldd	r18, Z+2	; 0x02
     c6c:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     c78:	fc 01       	movw	r30, r24
     c7a:	ed 5f       	subi	r30, 0xFD	; 253
     c7c:	fd 4f       	sbci	r31, 0xFD	; 253
     c7e:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     c80:	31 96       	adiw	r30, 0x01	; 1
     c82:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	29 13       	cpse	r18, r25
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <USART_RXBufferData_Available+0x14>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
}
     c8c:	08 95       	ret

00000c8e <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     c8e:	fc 01       	movw	r30, r24
     c90:	ec 5f       	subi	r30, 0xFC	; 252
     c92:	fd 4f       	sbci	r31, 0xFD	; 253
     c94:	20 81       	ld	r18, Z
     c96:	dc 01       	movw	r26, r24
     c98:	a2 0f       	add	r26, r18
     c9a:	b1 1d       	adc	r27, r1
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     ca0:	90 81       	ld	r25, Z
     ca2:	9f 5f       	subi	r25, 0xFF	; 255
     ca4:	90 83       	st	Z, r25

	return ans;
}
     ca6:	08 95       	ret

00000ca8 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     ca8:	fc 01       	movw	r30, r24
     caa:	ed 5f       	subi	r30, 0xFD	; 253
     cac:	fd 4f       	sbci	r31, 0xFD	; 253
     cae:	20 81       	ld	r18, Z
     cb0:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     cb2:	31 96       	adiw	r30, 0x01	; 1
     cb4:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     cb6:	dc 01       	movw	r26, r24
     cb8:	ed 91       	ld	r30, X+
     cba:	fc 91       	ld	r31, X
     cbc:	11 97       	sbiw	r26, 0x01	; 1
     cbe:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     cc0:	23 17       	cp	r18, r19
     cc2:	59 f0       	breq	.+22     	; 0xcda <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     cc4:	fc 01       	movw	r30, r24
     cc6:	ed 5f       	subi	r30, 0xFD	; 253
     cc8:	fd 4f       	sbci	r31, 0xFD	; 253
     cca:	30 81       	ld	r19, Z
     ccc:	a3 0f       	add	r26, r19
     cce:	b1 1d       	adc	r27, r1
     cd0:	13 96       	adiw	r26, 0x03	; 3
     cd2:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     cd4:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     cda:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     cdc:	08 95       	ret

00000cde <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     ce2:	fc 01       	movw	r30, r24
     ce4:	ea 5f       	subi	r30, 0xFA	; 250
     ce6:	fd 4f       	sbci	r31, 0xFD	; 253
     ce8:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	30 81       	ld	r19, Z
     cee:	32 13       	cpse	r19, r18
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     cf2:	dc 01       	movw	r26, r24
     cf4:	ed 91       	ld	r30, X+
     cf6:	fc 91       	ld	r31, X
     cf8:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     cfa:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     cfc:	83 83       	std	Z+3, r24	; 0x03
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     d00:	fc 01       	movw	r30, r24
     d02:	ea 5f       	subi	r30, 0xFA	; 250
     d04:	fd 4f       	sbci	r31, 0xFD	; 253
     d06:	20 81       	ld	r18, Z
     d08:	dc 01       	movw	r26, r24
     d0a:	a2 0f       	add	r26, r18
     d0c:	b1 1d       	adc	r27, r1
     d0e:	ad 5f       	subi	r26, 0xFD	; 253
     d10:	be 4f       	sbci	r27, 0xFE	; 254
     d12:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     d14:	ec 01       	movw	r28, r24
     d16:	a8 81       	ld	r26, Y
     d18:	b9 81       	ldd	r27, Y+1	; 0x01
     d1a:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 5f       	subi	r24, 0xFF	; 255
     d20:	80 83       	st	Z, r24
	}
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <__subsf3>:
     d28:	50 58       	subi	r21, 0x80	; 128

00000d2a <__addsf3>:
     d2a:	bb 27       	eor	r27, r27
     d2c:	aa 27       	eor	r26, r26
     d2e:	0e d0       	rcall	.+28     	; 0xd4c <__addsf3x>
     d30:	48 c1       	rjmp	.+656    	; 0xfc2 <__fp_round>
     d32:	39 d1       	rcall	.+626    	; 0xfa6 <__fp_pscA>
     d34:	30 f0       	brcs	.+12     	; 0xd42 <__addsf3+0x18>
     d36:	3e d1       	rcall	.+636    	; 0xfb4 <__fp_pscB>
     d38:	20 f0       	brcs	.+8      	; 0xd42 <__addsf3+0x18>
     d3a:	31 f4       	brne	.+12     	; 0xd48 <__addsf3+0x1e>
     d3c:	9f 3f       	cpi	r25, 0xFF	; 255
     d3e:	11 f4       	brne	.+4      	; 0xd44 <__addsf3+0x1a>
     d40:	1e f4       	brtc	.+6      	; 0xd48 <__addsf3+0x1e>
     d42:	2e c1       	rjmp	.+604    	; 0xfa0 <__fp_nan>
     d44:	0e f4       	brtc	.+2      	; 0xd48 <__addsf3+0x1e>
     d46:	e0 95       	com	r30
     d48:	e7 fb       	bst	r30, 7
     d4a:	24 c1       	rjmp	.+584    	; 0xf94 <__fp_inf>

00000d4c <__addsf3x>:
     d4c:	e9 2f       	mov	r30, r25
     d4e:	4a d1       	rcall	.+660    	; 0xfe4 <__fp_split3>
     d50:	80 f3       	brcs	.-32     	; 0xd32 <__addsf3+0x8>
     d52:	ba 17       	cp	r27, r26
     d54:	62 07       	cpc	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	95 07       	cpc	r25, r21
     d5c:	18 f0       	brcs	.+6      	; 0xd64 <__addsf3x+0x18>
     d5e:	71 f4       	brne	.+28     	; 0xd7c <__addsf3x+0x30>
     d60:	9e f5       	brtc	.+102    	; 0xdc8 <__addsf3x+0x7c>
     d62:	62 c1       	rjmp	.+708    	; 0x1028 <__fp_zero>
     d64:	0e f4       	brtc	.+2      	; 0xd68 <__addsf3x+0x1c>
     d66:	e0 95       	com	r30
     d68:	0b 2e       	mov	r0, r27
     d6a:	ba 2f       	mov	r27, r26
     d6c:	a0 2d       	mov	r26, r0
     d6e:	0b 01       	movw	r0, r22
     d70:	b9 01       	movw	r22, r18
     d72:	90 01       	movw	r18, r0
     d74:	0c 01       	movw	r0, r24
     d76:	ca 01       	movw	r24, r20
     d78:	a0 01       	movw	r20, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	ff 27       	eor	r31, r31
     d7e:	59 1b       	sub	r21, r25
     d80:	99 f0       	breq	.+38     	; 0xda8 <__addsf3x+0x5c>
     d82:	59 3f       	cpi	r21, 0xF9	; 249
     d84:	50 f4       	brcc	.+20     	; 0xd9a <__addsf3x+0x4e>
     d86:	50 3e       	cpi	r21, 0xE0	; 224
     d88:	68 f1       	brcs	.+90     	; 0xde4 <__addsf3x+0x98>
     d8a:	1a 16       	cp	r1, r26
     d8c:	f0 40       	sbci	r31, 0x00	; 0
     d8e:	a2 2f       	mov	r26, r18
     d90:	23 2f       	mov	r18, r19
     d92:	34 2f       	mov	r19, r20
     d94:	44 27       	eor	r20, r20
     d96:	58 5f       	subi	r21, 0xF8	; 248
     d98:	f3 cf       	rjmp	.-26     	; 0xd80 <__addsf3x+0x34>
     d9a:	46 95       	lsr	r20
     d9c:	37 95       	ror	r19
     d9e:	27 95       	ror	r18
     da0:	a7 95       	ror	r26
     da2:	f0 40       	sbci	r31, 0x00	; 0
     da4:	53 95       	inc	r21
     da6:	c9 f7       	brne	.-14     	; 0xd9a <__addsf3x+0x4e>
     da8:	7e f4       	brtc	.+30     	; 0xdc8 <__addsf3x+0x7c>
     daa:	1f 16       	cp	r1, r31
     dac:	ba 0b       	sbc	r27, r26
     dae:	62 0b       	sbc	r22, r18
     db0:	73 0b       	sbc	r23, r19
     db2:	84 0b       	sbc	r24, r20
     db4:	ba f0       	brmi	.+46     	; 0xde4 <__addsf3x+0x98>
     db6:	91 50       	subi	r25, 0x01	; 1
     db8:	a1 f0       	breq	.+40     	; 0xde2 <__addsf3x+0x96>
     dba:	ff 0f       	add	r31, r31
     dbc:	bb 1f       	adc	r27, r27
     dbe:	66 1f       	adc	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	c2 f7       	brpl	.-16     	; 0xdb6 <__addsf3x+0x6a>
     dc6:	0e c0       	rjmp	.+28     	; 0xde4 <__addsf3x+0x98>
     dc8:	ba 0f       	add	r27, r26
     dca:	62 1f       	adc	r22, r18
     dcc:	73 1f       	adc	r23, r19
     dce:	84 1f       	adc	r24, r20
     dd0:	48 f4       	brcc	.+18     	; 0xde4 <__addsf3x+0x98>
     dd2:	87 95       	ror	r24
     dd4:	77 95       	ror	r23
     dd6:	67 95       	ror	r22
     dd8:	b7 95       	ror	r27
     dda:	f7 95       	ror	r31
     ddc:	9e 3f       	cpi	r25, 0xFE	; 254
     dde:	08 f0       	brcs	.+2      	; 0xde2 <__addsf3x+0x96>
     de0:	b3 cf       	rjmp	.-154    	; 0xd48 <__addsf3+0x1e>
     de2:	93 95       	inc	r25
     de4:	88 0f       	add	r24, r24
     de6:	08 f0       	brcs	.+2      	; 0xdea <__addsf3x+0x9e>
     de8:	99 27       	eor	r25, r25
     dea:	ee 0f       	add	r30, r30
     dec:	97 95       	ror	r25
     dee:	87 95       	ror	r24
     df0:	08 95       	ret

00000df2 <__divsf3>:
     df2:	0c d0       	rcall	.+24     	; 0xe0c <__divsf3x>
     df4:	e6 c0       	rjmp	.+460    	; 0xfc2 <__fp_round>
     df6:	de d0       	rcall	.+444    	; 0xfb4 <__fp_pscB>
     df8:	40 f0       	brcs	.+16     	; 0xe0a <__divsf3+0x18>
     dfa:	d5 d0       	rcall	.+426    	; 0xfa6 <__fp_pscA>
     dfc:	30 f0       	brcs	.+12     	; 0xe0a <__divsf3+0x18>
     dfe:	21 f4       	brne	.+8      	; 0xe08 <__divsf3+0x16>
     e00:	5f 3f       	cpi	r21, 0xFF	; 255
     e02:	19 f0       	breq	.+6      	; 0xe0a <__divsf3+0x18>
     e04:	c7 c0       	rjmp	.+398    	; 0xf94 <__fp_inf>
     e06:	51 11       	cpse	r21, r1
     e08:	10 c1       	rjmp	.+544    	; 0x102a <__fp_szero>
     e0a:	ca c0       	rjmp	.+404    	; 0xfa0 <__fp_nan>

00000e0c <__divsf3x>:
     e0c:	eb d0       	rcall	.+470    	; 0xfe4 <__fp_split3>
     e0e:	98 f3       	brcs	.-26     	; 0xdf6 <__divsf3+0x4>

00000e10 <__divsf3_pse>:
     e10:	99 23       	and	r25, r25
     e12:	c9 f3       	breq	.-14     	; 0xe06 <__divsf3+0x14>
     e14:	55 23       	and	r21, r21
     e16:	b1 f3       	breq	.-20     	; 0xe04 <__divsf3+0x12>
     e18:	95 1b       	sub	r25, r21
     e1a:	55 0b       	sbc	r21, r21
     e1c:	bb 27       	eor	r27, r27
     e1e:	aa 27       	eor	r26, r26
     e20:	62 17       	cp	r22, r18
     e22:	73 07       	cpc	r23, r19
     e24:	84 07       	cpc	r24, r20
     e26:	38 f0       	brcs	.+14     	; 0xe36 <__divsf3_pse+0x26>
     e28:	9f 5f       	subi	r25, 0xFF	; 255
     e2a:	5f 4f       	sbci	r21, 0xFF	; 255
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	44 1f       	adc	r20, r20
     e32:	aa 1f       	adc	r26, r26
     e34:	a9 f3       	breq	.-22     	; 0xe20 <__divsf3_pse+0x10>
     e36:	33 d0       	rcall	.+102    	; 0xe9e <__divsf3_pse+0x8e>
     e38:	0e 2e       	mov	r0, r30
     e3a:	3a f0       	brmi	.+14     	; 0xe4a <__divsf3_pse+0x3a>
     e3c:	e0 e8       	ldi	r30, 0x80	; 128
     e3e:	30 d0       	rcall	.+96     	; 0xea0 <__divsf3_pse+0x90>
     e40:	91 50       	subi	r25, 0x01	; 1
     e42:	50 40       	sbci	r21, 0x00	; 0
     e44:	e6 95       	lsr	r30
     e46:	00 1c       	adc	r0, r0
     e48:	ca f7       	brpl	.-14     	; 0xe3c <__divsf3_pse+0x2c>
     e4a:	29 d0       	rcall	.+82     	; 0xe9e <__divsf3_pse+0x8e>
     e4c:	fe 2f       	mov	r31, r30
     e4e:	27 d0       	rcall	.+78     	; 0xe9e <__divsf3_pse+0x8e>
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	bb 1f       	adc	r27, r27
     e58:	26 17       	cp	r18, r22
     e5a:	37 07       	cpc	r19, r23
     e5c:	48 07       	cpc	r20, r24
     e5e:	ab 07       	cpc	r26, r27
     e60:	b0 e8       	ldi	r27, 0x80	; 128
     e62:	09 f0       	breq	.+2      	; 0xe66 <__divsf3_pse+0x56>
     e64:	bb 0b       	sbc	r27, r27
     e66:	80 2d       	mov	r24, r0
     e68:	bf 01       	movw	r22, r30
     e6a:	ff 27       	eor	r31, r31
     e6c:	93 58       	subi	r25, 0x83	; 131
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	2a f0       	brmi	.+10     	; 0xe7c <__divsf3_pse+0x6c>
     e72:	9e 3f       	cpi	r25, 0xFE	; 254
     e74:	51 05       	cpc	r21, r1
     e76:	68 f0       	brcs	.+26     	; 0xe92 <__divsf3_pse+0x82>
     e78:	8d c0       	rjmp	.+282    	; 0xf94 <__fp_inf>
     e7a:	d7 c0       	rjmp	.+430    	; 0x102a <__fp_szero>
     e7c:	5f 3f       	cpi	r21, 0xFF	; 255
     e7e:	ec f3       	brlt	.-6      	; 0xe7a <__divsf3_pse+0x6a>
     e80:	98 3e       	cpi	r25, 0xE8	; 232
     e82:	dc f3       	brlt	.-10     	; 0xe7a <__divsf3_pse+0x6a>
     e84:	86 95       	lsr	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	f7 95       	ror	r31
     e8e:	9f 5f       	subi	r25, 0xFF	; 255
     e90:	c9 f7       	brne	.-14     	; 0xe84 <__divsf3_pse+0x74>
     e92:	88 0f       	add	r24, r24
     e94:	91 1d       	adc	r25, r1
     e96:	96 95       	lsr	r25
     e98:	87 95       	ror	r24
     e9a:	97 f9       	bld	r25, 7
     e9c:	08 95       	ret
     e9e:	e1 e0       	ldi	r30, 0x01	; 1
     ea0:	66 0f       	add	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	88 1f       	adc	r24, r24
     ea6:	bb 1f       	adc	r27, r27
     ea8:	62 17       	cp	r22, r18
     eaa:	73 07       	cpc	r23, r19
     eac:	84 07       	cpc	r24, r20
     eae:	ba 07       	cpc	r27, r26
     eb0:	20 f0       	brcs	.+8      	; 0xeba <__divsf3_pse+0xaa>
     eb2:	62 1b       	sub	r22, r18
     eb4:	73 0b       	sbc	r23, r19
     eb6:	84 0b       	sbc	r24, r20
     eb8:	ba 0b       	sbc	r27, r26
     eba:	ee 1f       	adc	r30, r30
     ebc:	88 f7       	brcc	.-30     	; 0xea0 <__divsf3_pse+0x90>
     ebe:	e0 95       	com	r30
     ec0:	08 95       	ret

00000ec2 <__fixunssfsi>:
     ec2:	98 d0       	rcall	.+304    	; 0xff4 <__fp_splitA>
     ec4:	88 f0       	brcs	.+34     	; 0xee8 <__fixunssfsi+0x26>
     ec6:	9f 57       	subi	r25, 0x7F	; 127
     ec8:	90 f0       	brcs	.+36     	; 0xeee <__fixunssfsi+0x2c>
     eca:	b9 2f       	mov	r27, r25
     ecc:	99 27       	eor	r25, r25
     ece:	b7 51       	subi	r27, 0x17	; 23
     ed0:	a0 f0       	brcs	.+40     	; 0xefa <__fixunssfsi+0x38>
     ed2:	d1 f0       	breq	.+52     	; 0xf08 <__fixunssfsi+0x46>
     ed4:	66 0f       	add	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	88 1f       	adc	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	1a f0       	brmi	.+6      	; 0xee4 <__fixunssfsi+0x22>
     ede:	ba 95       	dec	r27
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <__fixunssfsi+0x12>
     ee2:	12 c0       	rjmp	.+36     	; 0xf08 <__fixunssfsi+0x46>
     ee4:	b1 30       	cpi	r27, 0x01	; 1
     ee6:	81 f0       	breq	.+32     	; 0xf08 <__fixunssfsi+0x46>
     ee8:	9f d0       	rcall	.+318    	; 0x1028 <__fp_zero>
     eea:	b1 e0       	ldi	r27, 0x01	; 1
     eec:	08 95       	ret
     eee:	9c c0       	rjmp	.+312    	; 0x1028 <__fp_zero>
     ef0:	67 2f       	mov	r22, r23
     ef2:	78 2f       	mov	r23, r24
     ef4:	88 27       	eor	r24, r24
     ef6:	b8 5f       	subi	r27, 0xF8	; 248
     ef8:	39 f0       	breq	.+14     	; 0xf08 <__fixunssfsi+0x46>
     efa:	b9 3f       	cpi	r27, 0xF9	; 249
     efc:	cc f3       	brlt	.-14     	; 0xef0 <__fixunssfsi+0x2e>
     efe:	86 95       	lsr	r24
     f00:	77 95       	ror	r23
     f02:	67 95       	ror	r22
     f04:	b3 95       	inc	r27
     f06:	d9 f7       	brne	.-10     	; 0xefe <__fixunssfsi+0x3c>
     f08:	3e f4       	brtc	.+14     	; 0xf18 <__fixunssfsi+0x56>
     f0a:	90 95       	com	r25
     f0c:	80 95       	com	r24
     f0e:	70 95       	com	r23
     f10:	61 95       	neg	r22
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	08 95       	ret

00000f1a <__floatunsisf>:
     f1a:	e8 94       	clt
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <__floatsisf+0x12>

00000f1e <__floatsisf>:
     f1e:	97 fb       	bst	r25, 7
     f20:	3e f4       	brtc	.+14     	; 0xf30 <__floatsisf+0x12>
     f22:	90 95       	com	r25
     f24:	80 95       	com	r24
     f26:	70 95       	com	r23
     f28:	61 95       	neg	r22
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	99 23       	and	r25, r25
     f32:	a9 f0       	breq	.+42     	; 0xf5e <__floatsisf+0x40>
     f34:	f9 2f       	mov	r31, r25
     f36:	96 e9       	ldi	r25, 0x96	; 150
     f38:	bb 27       	eor	r27, r27
     f3a:	93 95       	inc	r25
     f3c:	f6 95       	lsr	r31
     f3e:	87 95       	ror	r24
     f40:	77 95       	ror	r23
     f42:	67 95       	ror	r22
     f44:	b7 95       	ror	r27
     f46:	f1 11       	cpse	r31, r1
     f48:	f8 cf       	rjmp	.-16     	; 0xf3a <__floatsisf+0x1c>
     f4a:	fa f4       	brpl	.+62     	; 0xf8a <__floatsisf+0x6c>
     f4c:	bb 0f       	add	r27, r27
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__floatsisf+0x36>
     f50:	60 ff       	sbrs	r22, 0
     f52:	1b c0       	rjmp	.+54     	; 0xf8a <__floatsisf+0x6c>
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	16 c0       	rjmp	.+44     	; 0xf8a <__floatsisf+0x6c>
     f5e:	88 23       	and	r24, r24
     f60:	11 f0       	breq	.+4      	; 0xf66 <__floatsisf+0x48>
     f62:	96 e9       	ldi	r25, 0x96	; 150
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <__floatsisf+0x6a>
     f66:	77 23       	and	r23, r23
     f68:	21 f0       	breq	.+8      	; 0xf72 <__floatsisf+0x54>
     f6a:	9e e8       	ldi	r25, 0x8E	; 142
     f6c:	87 2f       	mov	r24, r23
     f6e:	76 2f       	mov	r23, r22
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <__floatsisf+0x5e>
     f72:	66 23       	and	r22, r22
     f74:	71 f0       	breq	.+28     	; 0xf92 <__floatsisf+0x74>
     f76:	96 e8       	ldi	r25, 0x86	; 134
     f78:	86 2f       	mov	r24, r22
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	2a f0       	brmi	.+10     	; 0xf8a <__floatsisf+0x6c>
     f80:	9a 95       	dec	r25
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	da f7       	brpl	.-10     	; 0xf80 <__floatsisf+0x62>
     f8a:	88 0f       	add	r24, r24
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__fp_inf>:
     f94:	97 f9       	bld	r25, 7
     f96:	9f 67       	ori	r25, 0x7F	; 127
     f98:	80 e8       	ldi	r24, 0x80	; 128
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <__fp_nan>:
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	80 ec       	ldi	r24, 0xC0	; 192
     fa4:	08 95       	ret

00000fa6 <__fp_pscA>:
     fa6:	00 24       	eor	r0, r0
     fa8:	0a 94       	dec	r0
     faa:	16 16       	cp	r1, r22
     fac:	17 06       	cpc	r1, r23
     fae:	18 06       	cpc	r1, r24
     fb0:	09 06       	cpc	r0, r25
     fb2:	08 95       	ret

00000fb4 <__fp_pscB>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	14 06       	cpc	r1, r20
     fbe:	05 06       	cpc	r0, r21
     fc0:	08 95       	ret

00000fc2 <__fp_round>:
     fc2:	09 2e       	mov	r0, r25
     fc4:	03 94       	inc	r0
     fc6:	00 0c       	add	r0, r0
     fc8:	11 f4       	brne	.+4      	; 0xfce <__fp_round+0xc>
     fca:	88 23       	and	r24, r24
     fcc:	52 f0       	brmi	.+20     	; 0xfe2 <__fp_round+0x20>
     fce:	bb 0f       	add	r27, r27
     fd0:	40 f4       	brcc	.+16     	; 0xfe2 <__fp_round+0x20>
     fd2:	bf 2b       	or	r27, r31
     fd4:	11 f4       	brne	.+4      	; 0xfda <__fp_round+0x18>
     fd6:	60 ff       	sbrs	r22, 0
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <__fp_round+0x20>
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	08 95       	ret

00000fe4 <__fp_split3>:
     fe4:	57 fd       	sbrc	r21, 7
     fe6:	90 58       	subi	r25, 0x80	; 128
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	59 f0       	breq	.+22     	; 0x1004 <__fp_splitA+0x10>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	71 f0       	breq	.+28     	; 0x100e <__fp_splitA+0x1a>
     ff2:	47 95       	ror	r20

00000ff4 <__fp_splitA>:
     ff4:	88 0f       	add	r24, r24
     ff6:	97 fb       	bst	r25, 7
     ff8:	99 1f       	adc	r25, r25
     ffa:	61 f0       	breq	.+24     	; 0x1014 <__fp_splitA+0x20>
     ffc:	9f 3f       	cpi	r25, 0xFF	; 255
     ffe:	79 f0       	breq	.+30     	; 0x101e <__fp_splitA+0x2a>
    1000:	87 95       	ror	r24
    1002:	08 95       	ret
    1004:	12 16       	cp	r1, r18
    1006:	13 06       	cpc	r1, r19
    1008:	14 06       	cpc	r1, r20
    100a:	55 1f       	adc	r21, r21
    100c:	f2 cf       	rjmp	.-28     	; 0xff2 <__fp_split3+0xe>
    100e:	46 95       	lsr	r20
    1010:	f1 df       	rcall	.-30     	; 0xff4 <__fp_splitA>
    1012:	08 c0       	rjmp	.+16     	; 0x1024 <__fp_splitA+0x30>
    1014:	16 16       	cp	r1, r22
    1016:	17 06       	cpc	r1, r23
    1018:	18 06       	cpc	r1, r24
    101a:	99 1f       	adc	r25, r25
    101c:	f1 cf       	rjmp	.-30     	; 0x1000 <__fp_splitA+0xc>
    101e:	86 95       	lsr	r24
    1020:	71 05       	cpc	r23, r1
    1022:	61 05       	cpc	r22, r1
    1024:	08 94       	sec
    1026:	08 95       	ret

00001028 <__fp_zero>:
    1028:	e8 94       	clt

0000102a <__fp_szero>:
    102a:	bb 27       	eor	r27, r27
    102c:	66 27       	eor	r22, r22
    102e:	77 27       	eor	r23, r23
    1030:	cb 01       	movw	r24, r22
    1032:	97 f9       	bld	r25, 7
    1034:	08 95       	ret

00001036 <__mulsf3>:
    1036:	0b d0       	rcall	.+22     	; 0x104e <__mulsf3x>
    1038:	c4 cf       	rjmp	.-120    	; 0xfc2 <__fp_round>
    103a:	b5 df       	rcall	.-150    	; 0xfa6 <__fp_pscA>
    103c:	28 f0       	brcs	.+10     	; 0x1048 <__mulsf3+0x12>
    103e:	ba df       	rcall	.-140    	; 0xfb4 <__fp_pscB>
    1040:	18 f0       	brcs	.+6      	; 0x1048 <__mulsf3+0x12>
    1042:	95 23       	and	r25, r21
    1044:	09 f0       	breq	.+2      	; 0x1048 <__mulsf3+0x12>
    1046:	a6 cf       	rjmp	.-180    	; 0xf94 <__fp_inf>
    1048:	ab cf       	rjmp	.-170    	; 0xfa0 <__fp_nan>
    104a:	11 24       	eor	r1, r1
    104c:	ee cf       	rjmp	.-36     	; 0x102a <__fp_szero>

0000104e <__mulsf3x>:
    104e:	ca df       	rcall	.-108    	; 0xfe4 <__fp_split3>
    1050:	a0 f3       	brcs	.-24     	; 0x103a <__mulsf3+0x4>

00001052 <__mulsf3_pse>:
    1052:	95 9f       	mul	r25, r21
    1054:	d1 f3       	breq	.-12     	; 0x104a <__mulsf3+0x14>
    1056:	95 0f       	add	r25, r21
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	55 1f       	adc	r21, r21
    105c:	62 9f       	mul	r22, r18
    105e:	f0 01       	movw	r30, r0
    1060:	72 9f       	mul	r23, r18
    1062:	bb 27       	eor	r27, r27
    1064:	f0 0d       	add	r31, r0
    1066:	b1 1d       	adc	r27, r1
    1068:	63 9f       	mul	r22, r19
    106a:	aa 27       	eor	r26, r26
    106c:	f0 0d       	add	r31, r0
    106e:	b1 1d       	adc	r27, r1
    1070:	aa 1f       	adc	r26, r26
    1072:	64 9f       	mul	r22, r20
    1074:	66 27       	eor	r22, r22
    1076:	b0 0d       	add	r27, r0
    1078:	a1 1d       	adc	r26, r1
    107a:	66 1f       	adc	r22, r22
    107c:	82 9f       	mul	r24, r18
    107e:	22 27       	eor	r18, r18
    1080:	b0 0d       	add	r27, r0
    1082:	a1 1d       	adc	r26, r1
    1084:	62 1f       	adc	r22, r18
    1086:	73 9f       	mul	r23, r19
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	62 1f       	adc	r22, r18
    108e:	83 9f       	mul	r24, r19
    1090:	a0 0d       	add	r26, r0
    1092:	61 1d       	adc	r22, r1
    1094:	22 1f       	adc	r18, r18
    1096:	74 9f       	mul	r23, r20
    1098:	33 27       	eor	r19, r19
    109a:	a0 0d       	add	r26, r0
    109c:	61 1d       	adc	r22, r1
    109e:	23 1f       	adc	r18, r19
    10a0:	84 9f       	mul	r24, r20
    10a2:	60 0d       	add	r22, r0
    10a4:	21 1d       	adc	r18, r1
    10a6:	82 2f       	mov	r24, r18
    10a8:	76 2f       	mov	r23, r22
    10aa:	6a 2f       	mov	r22, r26
    10ac:	11 24       	eor	r1, r1
    10ae:	9f 57       	subi	r25, 0x7F	; 127
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	8a f0       	brmi	.+34     	; 0x10d6 <__mulsf3_pse+0x84>
    10b4:	e1 f0       	breq	.+56     	; 0x10ee <__mulsf3_pse+0x9c>
    10b6:	88 23       	and	r24, r24
    10b8:	4a f0       	brmi	.+18     	; 0x10cc <__mulsf3_pse+0x7a>
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	bb 1f       	adc	r27, r27
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	91 50       	subi	r25, 0x01	; 1
    10c8:	50 40       	sbci	r21, 0x00	; 0
    10ca:	a9 f7       	brne	.-22     	; 0x10b6 <__mulsf3_pse+0x64>
    10cc:	9e 3f       	cpi	r25, 0xFE	; 254
    10ce:	51 05       	cpc	r21, r1
    10d0:	70 f0       	brcs	.+28     	; 0x10ee <__mulsf3_pse+0x9c>
    10d2:	60 cf       	rjmp	.-320    	; 0xf94 <__fp_inf>
    10d4:	aa cf       	rjmp	.-172    	; 0x102a <__fp_szero>
    10d6:	5f 3f       	cpi	r21, 0xFF	; 255
    10d8:	ec f3       	brlt	.-6      	; 0x10d4 <__mulsf3_pse+0x82>
    10da:	98 3e       	cpi	r25, 0xE8	; 232
    10dc:	dc f3       	brlt	.-10     	; 0x10d4 <__mulsf3_pse+0x82>
    10de:	86 95       	lsr	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f7 95       	ror	r31
    10e8:	e7 95       	ror	r30
    10ea:	9f 5f       	subi	r25, 0xFF	; 255
    10ec:	c1 f7       	brne	.-16     	; 0x10de <__mulsf3_pse+0x8c>
    10ee:	fe 2b       	or	r31, r30
    10f0:	88 0f       	add	r24, r24
    10f2:	91 1d       	adc	r25, r1
    10f4:	96 95       	lsr	r25
    10f6:	87 95       	ror	r24
    10f8:	97 f9       	bld	r25, 7
    10fa:	08 95       	ret

000010fc <round>:
    10fc:	7b df       	rcall	.-266    	; 0xff4 <__fp_splitA>
    10fe:	e0 f0       	brcs	.+56     	; 0x1138 <round+0x3c>
    1100:	9e 37       	cpi	r25, 0x7E	; 126
    1102:	d8 f0       	brcs	.+54     	; 0x113a <round+0x3e>
    1104:	96 39       	cpi	r25, 0x96	; 150
    1106:	b8 f4       	brcc	.+46     	; 0x1136 <round+0x3a>
    1108:	9e 38       	cpi	r25, 0x8E	; 142
    110a:	48 f4       	brcc	.+18     	; 0x111e <round+0x22>
    110c:	67 2f       	mov	r22, r23
    110e:	78 2f       	mov	r23, r24
    1110:	88 27       	eor	r24, r24
    1112:	98 5f       	subi	r25, 0xF8	; 248
    1114:	f9 cf       	rjmp	.-14     	; 0x1108 <round+0xc>
    1116:	86 95       	lsr	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	93 95       	inc	r25
    111e:	95 39       	cpi	r25, 0x95	; 149
    1120:	d0 f3       	brcs	.-12     	; 0x1116 <round+0x1a>
    1122:	b6 2f       	mov	r27, r22
    1124:	b1 70       	andi	r27, 0x01	; 1
    1126:	6b 0f       	add	r22, r27
    1128:	71 1d       	adc	r23, r1
    112a:	81 1d       	adc	r24, r1
    112c:	20 f4       	brcc	.+8      	; 0x1136 <round+0x3a>
    112e:	87 95       	ror	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	93 95       	inc	r25
    1136:	02 c0       	rjmp	.+4      	; 0x113c <__fp_mintl>
    1138:	1c c0       	rjmp	.+56     	; 0x1172 <__fp_mpack>
    113a:	77 cf       	rjmp	.-274    	; 0x102a <__fp_szero>

0000113c <__fp_mintl>:
    113c:	88 23       	and	r24, r24
    113e:	71 f4       	brne	.+28     	; 0x115c <__fp_mintl+0x20>
    1140:	77 23       	and	r23, r23
    1142:	21 f0       	breq	.+8      	; 0x114c <__fp_mintl+0x10>
    1144:	98 50       	subi	r25, 0x08	; 8
    1146:	87 2b       	or	r24, r23
    1148:	76 2f       	mov	r23, r22
    114a:	07 c0       	rjmp	.+14     	; 0x115a <__fp_mintl+0x1e>
    114c:	66 23       	and	r22, r22
    114e:	11 f4       	brne	.+4      	; 0x1154 <__fp_mintl+0x18>
    1150:	99 27       	eor	r25, r25
    1152:	0d c0       	rjmp	.+26     	; 0x116e <__fp_mintl+0x32>
    1154:	90 51       	subi	r25, 0x10	; 16
    1156:	86 2b       	or	r24, r22
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	2a f0       	brmi	.+10     	; 0x1168 <__fp_mintl+0x2c>
    115e:	9a 95       	dec	r25
    1160:	66 0f       	add	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	da f7       	brpl	.-10     	; 0x115e <__fp_mintl+0x22>
    1168:	88 0f       	add	r24, r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	97 f9       	bld	r25, 7
    1170:	08 95       	ret

00001172 <__fp_mpack>:
    1172:	9f 3f       	cpi	r25, 0xFF	; 255
    1174:	31 f0       	breq	.+12     	; 0x1182 <__fp_mpack_finite+0xc>

00001176 <__fp_mpack_finite>:
    1176:	91 50       	subi	r25, 0x01	; 1
    1178:	20 f4       	brcc	.+8      	; 0x1182 <__fp_mpack_finite+0xc>
    117a:	87 95       	ror	r24
    117c:	77 95       	ror	r23
    117e:	67 95       	ror	r22
    1180:	b7 95       	ror	r27
    1182:	88 0f       	add	r24, r24
    1184:	91 1d       	adc	r25, r1
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	97 f9       	bld	r25, 7
    118c:	08 95       	ret

0000118e <malloc>:
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	91 05       	cpc	r25, r1
    1196:	10 f4       	brcc	.+4      	; 0x119c <malloc+0xe>
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	e0 91 1c 25 	lds	r30, 0x251C
    11a0:	f0 91 1d 25 	lds	r31, 0x251D
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	a0 e0       	ldi	r26, 0x00	; 0
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	30 97       	sbiw	r30, 0x00	; 0
    11ae:	39 f1       	breq	.+78     	; 0x11fe <malloc+0x70>
    11b0:	40 81       	ld	r20, Z
    11b2:	51 81       	ldd	r21, Z+1	; 0x01
    11b4:	48 17       	cp	r20, r24
    11b6:	59 07       	cpc	r21, r25
    11b8:	b8 f0       	brcs	.+46     	; 0x11e8 <malloc+0x5a>
    11ba:	48 17       	cp	r20, r24
    11bc:	59 07       	cpc	r21, r25
    11be:	71 f4       	brne	.+28     	; 0x11dc <malloc+0x4e>
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	10 97       	sbiw	r26, 0x00	; 0
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <malloc+0x44>
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	8d 93       	st	X+, r24
    11cc:	9c 93       	st	X, r25
    11ce:	13 97       	sbiw	r26, 0x03	; 3
    11d0:	2c c0       	rjmp	.+88     	; 0x122a <malloc+0x9c>
    11d2:	80 93 1c 25 	sts	0x251C, r24
    11d6:	90 93 1d 25 	sts	0x251D, r25
    11da:	27 c0       	rjmp	.+78     	; 0x122a <malloc+0x9c>
    11dc:	21 15       	cp	r18, r1
    11de:	31 05       	cpc	r19, r1
    11e0:	31 f0       	breq	.+12     	; 0x11ee <malloc+0x60>
    11e2:	42 17       	cp	r20, r18
    11e4:	53 07       	cpc	r21, r19
    11e6:	18 f0       	brcs	.+6      	; 0x11ee <malloc+0x60>
    11e8:	a9 01       	movw	r20, r18
    11ea:	db 01       	movw	r26, r22
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <malloc+0x62>
    11ee:	ef 01       	movw	r28, r30
    11f0:	9a 01       	movw	r18, r20
    11f2:	bd 01       	movw	r22, r26
    11f4:	df 01       	movw	r26, r30
    11f6:	02 80       	ldd	r0, Z+2	; 0x02
    11f8:	f3 81       	ldd	r31, Z+3	; 0x03
    11fa:	e0 2d       	mov	r30, r0
    11fc:	d7 cf       	rjmp	.-82     	; 0x11ac <malloc+0x1e>
    11fe:	21 15       	cp	r18, r1
    1200:	31 05       	cpc	r19, r1
    1202:	f9 f0       	breq	.+62     	; 0x1242 <malloc+0xb4>
    1204:	28 1b       	sub	r18, r24
    1206:	39 0b       	sbc	r19, r25
    1208:	24 30       	cpi	r18, 0x04	; 4
    120a:	31 05       	cpc	r19, r1
    120c:	80 f4       	brcc	.+32     	; 0x122e <malloc+0xa0>
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	61 15       	cp	r22, r1
    1214:	71 05       	cpc	r23, r1
    1216:	21 f0       	breq	.+8      	; 0x1220 <malloc+0x92>
    1218:	fb 01       	movw	r30, r22
    121a:	82 83       	std	Z+2, r24	; 0x02
    121c:	93 83       	std	Z+3, r25	; 0x03
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <malloc+0x9a>
    1220:	80 93 1c 25 	sts	0x251C, r24
    1224:	90 93 1d 25 	sts	0x251D, r25
    1228:	fe 01       	movw	r30, r28
    122a:	32 96       	adiw	r30, 0x02	; 2
    122c:	44 c0       	rjmp	.+136    	; 0x12b6 <malloc+0x128>
    122e:	fe 01       	movw	r30, r28
    1230:	e2 0f       	add	r30, r18
    1232:	f3 1f       	adc	r31, r19
    1234:	81 93       	st	Z+, r24
    1236:	91 93       	st	Z+, r25
    1238:	22 50       	subi	r18, 0x02	; 2
    123a:	31 09       	sbc	r19, r1
    123c:	28 83       	st	Y, r18
    123e:	39 83       	std	Y+1, r19	; 0x01
    1240:	3a c0       	rjmp	.+116    	; 0x12b6 <malloc+0x128>
    1242:	20 91 1a 25 	lds	r18, 0x251A
    1246:	30 91 1b 25 	lds	r19, 0x251B
    124a:	23 2b       	or	r18, r19
    124c:	41 f4       	brne	.+16     	; 0x125e <malloc+0xd0>
    124e:	20 91 02 20 	lds	r18, 0x2002
    1252:	30 91 03 20 	lds	r19, 0x2003
    1256:	20 93 1a 25 	sts	0x251A, r18
    125a:	30 93 1b 25 	sts	0x251B, r19
    125e:	20 91 00 20 	lds	r18, 0x2000
    1262:	30 91 01 20 	lds	r19, 0x2001
    1266:	21 15       	cp	r18, r1
    1268:	31 05       	cpc	r19, r1
    126a:	41 f4       	brne	.+16     	; 0x127c <malloc+0xee>
    126c:	2d b7       	in	r18, 0x3d	; 61
    126e:	3e b7       	in	r19, 0x3e	; 62
    1270:	40 91 04 20 	lds	r20, 0x2004
    1274:	50 91 05 20 	lds	r21, 0x2005
    1278:	24 1b       	sub	r18, r20
    127a:	35 0b       	sbc	r19, r21
    127c:	e0 91 1a 25 	lds	r30, 0x251A
    1280:	f0 91 1b 25 	lds	r31, 0x251B
    1284:	e2 17       	cp	r30, r18
    1286:	f3 07       	cpc	r31, r19
    1288:	a0 f4       	brcc	.+40     	; 0x12b2 <malloc+0x124>
    128a:	2e 1b       	sub	r18, r30
    128c:	3f 0b       	sbc	r19, r31
    128e:	28 17       	cp	r18, r24
    1290:	39 07       	cpc	r19, r25
    1292:	78 f0       	brcs	.+30     	; 0x12b2 <malloc+0x124>
    1294:	ac 01       	movw	r20, r24
    1296:	4e 5f       	subi	r20, 0xFE	; 254
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	24 17       	cp	r18, r20
    129c:	35 07       	cpc	r19, r21
    129e:	48 f0       	brcs	.+18     	; 0x12b2 <malloc+0x124>
    12a0:	4e 0f       	add	r20, r30
    12a2:	5f 1f       	adc	r21, r31
    12a4:	40 93 1a 25 	sts	0x251A, r20
    12a8:	50 93 1b 25 	sts	0x251B, r21
    12ac:	81 93       	st	Z+, r24
    12ae:	91 93       	st	Z+, r25
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <malloc+0x128>
    12b2:	e0 e0       	ldi	r30, 0x00	; 0
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	cf 01       	movw	r24, r30
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <free>:
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <free+0xa>
    12c6:	87 c0       	rjmp	.+270    	; 0x13d6 <free+0x118>
    12c8:	fc 01       	movw	r30, r24
    12ca:	32 97       	sbiw	r30, 0x02	; 2
    12cc:	12 82       	std	Z+2, r1	; 0x02
    12ce:	13 82       	std	Z+3, r1	; 0x03
    12d0:	c0 91 1c 25 	lds	r28, 0x251C
    12d4:	d0 91 1d 25 	lds	r29, 0x251D
    12d8:	20 97       	sbiw	r28, 0x00	; 0
    12da:	81 f4       	brne	.+32     	; 0x12fc <free+0x3e>
    12dc:	20 81       	ld	r18, Z
    12de:	31 81       	ldd	r19, Z+1	; 0x01
    12e0:	28 0f       	add	r18, r24
    12e2:	39 1f       	adc	r19, r25
    12e4:	80 91 1a 25 	lds	r24, 0x251A
    12e8:	90 91 1b 25 	lds	r25, 0x251B
    12ec:	82 17       	cp	r24, r18
    12ee:	93 07       	cpc	r25, r19
    12f0:	79 f5       	brne	.+94     	; 0x1350 <free+0x92>
    12f2:	e0 93 1a 25 	sts	0x251A, r30
    12f6:	f0 93 1b 25 	sts	0x251B, r31
    12fa:	6d c0       	rjmp	.+218    	; 0x13d6 <free+0x118>
    12fc:	de 01       	movw	r26, r28
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	ae 17       	cp	r26, r30
    1304:	bf 07       	cpc	r27, r31
    1306:	50 f4       	brcc	.+20     	; 0x131c <free+0x5e>
    1308:	12 96       	adiw	r26, 0x02	; 2
    130a:	4d 91       	ld	r20, X+
    130c:	5c 91       	ld	r21, X
    130e:	13 97       	sbiw	r26, 0x03	; 3
    1310:	9d 01       	movw	r18, r26
    1312:	41 15       	cp	r20, r1
    1314:	51 05       	cpc	r21, r1
    1316:	09 f1       	breq	.+66     	; 0x135a <free+0x9c>
    1318:	da 01       	movw	r26, r20
    131a:	f3 cf       	rjmp	.-26     	; 0x1302 <free+0x44>
    131c:	a2 83       	std	Z+2, r26	; 0x02
    131e:	b3 83       	std	Z+3, r27	; 0x03
    1320:	40 81       	ld	r20, Z
    1322:	51 81       	ldd	r21, Z+1	; 0x01
    1324:	84 0f       	add	r24, r20
    1326:	95 1f       	adc	r25, r21
    1328:	8a 17       	cp	r24, r26
    132a:	9b 07       	cpc	r25, r27
    132c:	71 f4       	brne	.+28     	; 0x134a <free+0x8c>
    132e:	8d 91       	ld	r24, X+
    1330:	9c 91       	ld	r25, X
    1332:	11 97       	sbiw	r26, 0x01	; 1
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	02 96       	adiw	r24, 0x02	; 2
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	12 96       	adiw	r26, 0x02	; 2
    1340:	8d 91       	ld	r24, X+
    1342:	9c 91       	ld	r25, X
    1344:	13 97       	sbiw	r26, 0x03	; 3
    1346:	82 83       	std	Z+2, r24	; 0x02
    1348:	93 83       	std	Z+3, r25	; 0x03
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	29 f4       	brne	.+10     	; 0x135a <free+0x9c>
    1350:	e0 93 1c 25 	sts	0x251C, r30
    1354:	f0 93 1d 25 	sts	0x251D, r31
    1358:	3e c0       	rjmp	.+124    	; 0x13d6 <free+0x118>
    135a:	d9 01       	movw	r26, r18
    135c:	12 96       	adiw	r26, 0x02	; 2
    135e:	ed 93       	st	X+, r30
    1360:	fc 93       	st	X, r31
    1362:	13 97       	sbiw	r26, 0x03	; 3
    1364:	4d 91       	ld	r20, X+
    1366:	5d 91       	ld	r21, X+
    1368:	a4 0f       	add	r26, r20
    136a:	b5 1f       	adc	r27, r21
    136c:	ea 17       	cp	r30, r26
    136e:	fb 07       	cpc	r31, r27
    1370:	79 f4       	brne	.+30     	; 0x1390 <free+0xd2>
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	84 0f       	add	r24, r20
    1378:	95 1f       	adc	r25, r21
    137a:	02 96       	adiw	r24, 0x02	; 2
    137c:	d9 01       	movw	r26, r18
    137e:	8d 93       	st	X+, r24
    1380:	9c 93       	st	X, r25
    1382:	11 97       	sbiw	r26, 0x01	; 1
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	12 96       	adiw	r26, 0x02	; 2
    138a:	8d 93       	st	X+, r24
    138c:	9c 93       	st	X, r25
    138e:	13 97       	sbiw	r26, 0x03	; 3
    1390:	e0 e0       	ldi	r30, 0x00	; 0
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	19 f0       	breq	.+6      	; 0x13a2 <free+0xe4>
    139c:	fe 01       	movw	r30, r28
    139e:	ec 01       	movw	r28, r24
    13a0:	f9 cf       	rjmp	.-14     	; 0x1394 <free+0xd6>
    13a2:	ce 01       	movw	r24, r28
    13a4:	02 96       	adiw	r24, 0x02	; 2
    13a6:	28 81       	ld	r18, Y
    13a8:	39 81       	ldd	r19, Y+1	; 0x01
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	20 91 1a 25 	lds	r18, 0x251A
    13b2:	30 91 1b 25 	lds	r19, 0x251B
    13b6:	28 17       	cp	r18, r24
    13b8:	39 07       	cpc	r19, r25
    13ba:	69 f4       	brne	.+26     	; 0x13d6 <free+0x118>
    13bc:	30 97       	sbiw	r30, 0x00	; 0
    13be:	29 f4       	brne	.+10     	; 0x13ca <free+0x10c>
    13c0:	10 92 1c 25 	sts	0x251C, r1
    13c4:	10 92 1d 25 	sts	0x251D, r1
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <free+0x110>
    13ca:	12 82       	std	Z+2, r1	; 0x02
    13cc:	13 82       	std	Z+3, r1	; 0x03
    13ce:	c0 93 1a 25 	sts	0x251A, r28
    13d2:	d0 93 1b 25 	sts	0x251B, r29
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <memset>:
    13dc:	dc 01       	movw	r26, r24
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <memset+0x6>
    13e0:	6d 93       	st	X+, r22
    13e2:	41 50       	subi	r20, 0x01	; 1
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	e0 f7       	brcc	.-8      	; 0x13e0 <memset+0x4>
    13e8:	08 95       	ret

000013ea <strcat>:
    13ea:	fb 01       	movw	r30, r22
    13ec:	dc 01       	movw	r26, r24
    13ee:	0d 90       	ld	r0, X+
    13f0:	00 20       	and	r0, r0
    13f2:	e9 f7       	brne	.-6      	; 0x13ee <strcat+0x4>
    13f4:	11 97       	sbiw	r26, 0x01	; 1
    13f6:	01 90       	ld	r0, Z+
    13f8:	0d 92       	st	X+, r0
    13fa:	00 20       	and	r0, r0
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <strcat+0xc>
    13fe:	08 95       	ret

00001400 <strcmp>:
    1400:	fb 01       	movw	r30, r22
    1402:	dc 01       	movw	r26, r24
    1404:	8d 91       	ld	r24, X+
    1406:	01 90       	ld	r0, Z+
    1408:	80 19       	sub	r24, r0
    140a:	01 10       	cpse	r0, r1
    140c:	d9 f3       	breq	.-10     	; 0x1404 <strcmp+0x4>
    140e:	99 0b       	sbc	r25, r25
    1410:	08 95       	ret

00001412 <strcpy>:
    1412:	fb 01       	movw	r30, r22
    1414:	dc 01       	movw	r26, r24
    1416:	01 90       	ld	r0, Z+
    1418:	0d 92       	st	X+, r0
    141a:	00 20       	and	r0, r0
    141c:	e1 f7       	brne	.-8      	; 0x1416 <strcpy+0x4>
    141e:	08 95       	ret

00001420 <__itoa_ncheck>:
    1420:	bb 27       	eor	r27, r27
    1422:	4a 30       	cpi	r20, 0x0A	; 10
    1424:	31 f4       	brne	.+12     	; 0x1432 <__itoa_ncheck+0x12>
    1426:	99 23       	and	r25, r25
    1428:	22 f4       	brpl	.+8      	; 0x1432 <__itoa_ncheck+0x12>
    142a:	bd e2       	ldi	r27, 0x2D	; 45
    142c:	90 95       	com	r25
    142e:	81 95       	neg	r24
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <__utoa_common>

00001434 <__utoa_ncheck>:
    1434:	bb 27       	eor	r27, r27

00001436 <__utoa_common>:
    1436:	fb 01       	movw	r30, r22
    1438:	55 27       	eor	r21, r21
    143a:	aa 27       	eor	r26, r26
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	aa 1f       	adc	r26, r26
    1442:	a4 17       	cp	r26, r20
    1444:	10 f0       	brcs	.+4      	; 0x144a <__utoa_common+0x14>
    1446:	a4 1b       	sub	r26, r20
    1448:	83 95       	inc	r24
    144a:	50 51       	subi	r21, 0x10	; 16
    144c:	b9 f7       	brne	.-18     	; 0x143c <__utoa_common+0x6>
    144e:	a0 5d       	subi	r26, 0xD0	; 208
    1450:	aa 33       	cpi	r26, 0x3A	; 58
    1452:	08 f0       	brcs	.+2      	; 0x1456 <__utoa_common+0x20>
    1454:	a9 5d       	subi	r26, 0xD9	; 217
    1456:	a1 93       	st	Z+, r26
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	79 f7       	brne	.-34     	; 0x143a <__utoa_common+0x4>
    145c:	b1 11       	cpse	r27, r1
    145e:	b1 93       	st	Z+, r27
    1460:	11 92       	st	Z+, r1
    1462:	cb 01       	movw	r24, r22
    1464:	00 c0       	rjmp	.+0      	; 0x1466 <strrev>

00001466 <strrev>:
    1466:	dc 01       	movw	r26, r24
    1468:	fc 01       	movw	r30, r24
    146a:	67 2f       	mov	r22, r23
    146c:	71 91       	ld	r23, Z+
    146e:	77 23       	and	r23, r23
    1470:	e1 f7       	brne	.-8      	; 0x146a <strrev+0x4>
    1472:	32 97       	sbiw	r30, 0x02	; 2
    1474:	04 c0       	rjmp	.+8      	; 0x147e <strrev+0x18>
    1476:	7c 91       	ld	r23, X
    1478:	6d 93       	st	X+, r22
    147a:	70 83       	st	Z, r23
    147c:	62 91       	ld	r22, -Z
    147e:	ae 17       	cp	r26, r30
    1480:	bf 07       	cpc	r27, r31
    1482:	c8 f3       	brcs	.-14     	; 0x1476 <strrev+0x10>
    1484:	08 95       	ret

00001486 <_exit>:
    1486:	f8 94       	cli

00001488 <__stop_program>:
    1488:	ff cf       	rjmp	.-2      	; 0x1488 <__stop_program>
