
communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00802000  000017de  00001872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a9  008020a8  008020a8  0000191a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030dc  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e73  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014da  00000000  00000000  00005ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  00006fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b9c  00000000  00000000  000076f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000249f  00000000  00000000  0000828c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a72b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c1       	rjmp	.+572    	; 0x246 <__bad_interrupt>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c1       	rjmp	.+532    	; 0x246 <__bad_interrupt>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	fa c0       	rjmp	.+500    	; 0x246 <__bad_interrupt>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	c0 c2       	rjmp	.+1408   	; 0x5e6 <__vector_25>
      66:	00 00       	nop
      68:	f2 c2       	rjmp	.+1508   	; 0x64e <__vector_26>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	22 c3       	rjmp	.+1604   	; 0x6b6 <__vector_28>
      72:	00 00       	nop
      74:	54 c3       	rjmp	.+1704   	; 0x71e <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	72 c0       	rjmp	.+228    	; 0x246 <__bad_interrupt>
     162:	00 00       	nop
     164:	70 c0       	rjmp	.+224    	; 0x246 <__bad_interrupt>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ee ed       	ldi	r30, 0xDE	; 222
     21c:	f7 e1       	ldi	r31, 0x17	; 23
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a8 3a       	cpi	r26, 0xA8	; 168
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	25 e2       	ldi	r18, 0x25	; 37
     232:	a8 ea       	ldi	r26, 0xA8	; 168
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a1 35       	cpi	r26, 0x51	; 81
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	a2 d2       	rcall	.+1348   	; 0x786 <main>
     242:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <SystemClock_init>:
#include <avr/io.h>
#include "clk.h"

void SystemClock_init(void)
{
	CCP			 =	CCP_IOREG_gc;
     248:	88 ed       	ldi	r24, 0xD8	; 216
     24a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL	|=	OSC_RC32MEN_bm;
     24c:	e0 e5       	ldi	r30, 0x50	; 80
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	82 60       	ori	r24, 0x02	; 2
     254:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     256:	81 81       	ldd	r24, Z+1	; 0x01
     258:	81 ff       	sbrs	r24, 1
     25a:	fd cf       	rjmp	.-6      	; 0x256 <SystemClock_init+0xe>
	CCP			 =	CCP_IOREG_gc;
     25c:	88 ed       	ldi	r24, 0xD8	; 216
     25e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	 =	CLK_SCLKSEL_RC32M_gc;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 40 00 	sts	0x0040, r24
     266:	08 95       	ret

00000268 <printHeaderList>:

	current -> next = temp_node -> next;
	free(temp_node);

	return *returnArray;
}
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	90 e2       	ldi	r25, 0x20	; 32
     270:	59 d6       	rcall	.+3250   	; 0xf24 <DebugPrint>
     272:	89 e1       	ldi	r24, 0x19	; 25
     274:	90 e2       	ldi	r25, 0x20	; 32
     276:	56 d6       	rcall	.+3244   	; 0xf24 <DebugPrint>
     278:	c1 e0       	ldi	r28, 0x01	; 1
     27a:	d0 e0       	ldi	r29, 0x00	; 0
     27c:	01 c0       	rjmp	.+2      	; 0x280 <printHeaderList+0x18>
     27e:	21 96       	adiw	r28, 0x01	; 1
     280:	ce 01       	movw	r24, r28
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	91 05       	cpc	r25, r1
     288:	a1 f0       	breq	.+40     	; 0x2b2 <printHeaderList+0x4a>
     28a:	2c f4       	brge	.+10     	; 0x296 <printHeaderList+0x2e>
     28c:	00 97       	sbiw	r24, 0x00	; 0
     28e:	49 f0       	breq	.+18     	; 0x2a2 <printHeaderList+0x3a>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	59 f0       	breq	.+22     	; 0x2aa <printHeaderList+0x42>
     294:	1a c0       	rjmp	.+52     	; 0x2ca <printHeaderList+0x62>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	91 05       	cpc	r25, r1
     29a:	79 f0       	breq	.+30     	; 0x2ba <printHeaderList+0x52>
     29c:	04 97       	sbiw	r24, 0x04	; 4
     29e:	89 f0       	breq	.+34     	; 0x2c2 <printHeaderList+0x5a>
     2a0:	14 c0       	rjmp	.+40     	; 0x2ca <printHeaderList+0x62>
     2a2:	8e e1       	ldi	r24, 0x1E	; 30
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	3e d6       	rcall	.+3196   	; 0xf24 <DebugPrint>
     2a8:	ea cf       	rjmp	.-44     	; 0x27e <printHeaderList+0x16>
     2aa:	83 e2       	ldi	r24, 0x23	; 35
     2ac:	90 e2       	ldi	r25, 0x20	; 32
     2ae:	3a d6       	rcall	.+3188   	; 0xf24 <DebugPrint>
     2b0:	e6 cf       	rjmp	.-52     	; 0x27e <printHeaderList+0x16>
     2b2:	8e e2       	ldi	r24, 0x2E	; 46
     2b4:	90 e2       	ldi	r25, 0x20	; 32
     2b6:	36 d6       	rcall	.+3180   	; 0xf24 <DebugPrint>
     2b8:	e2 cf       	rjmp	.-60     	; 0x27e <printHeaderList+0x16>
     2ba:	82 e3       	ldi	r24, 0x32	; 50
     2bc:	90 e2       	ldi	r25, 0x20	; 32
     2be:	32 d6       	rcall	.+3172   	; 0xf24 <DebugPrint>
     2c0:	de cf       	rjmp	.-68     	; 0x27e <printHeaderList+0x16>
     2c2:	86 e3       	ldi	r24, 0x36	; 54
     2c4:	90 e2       	ldi	r25, 0x20	; 32
     2c6:	2e d6       	rcall	.+3164   	; 0xf24 <DebugPrint>
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <printHeaderList+0x68>
     2ca:	c5 30       	cpi	r28, 0x05	; 5
     2cc:	d1 05       	cpc	r29, r1
     2ce:	bc f2       	brlt	.-82     	; 0x27e <printHeaderList+0x16>
     2d0:	88 e5       	ldi	r24, 0x58	; 88
     2d2:	90 e2       	ldi	r25, 0x20	; 32
     2d4:	27 d6       	rcall	.+3150   	; 0xf24 <DebugPrint>
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <print_list>:
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	7c 01       	movw	r14, r24
     2ee:	bc df       	rcall	.-136    	; 0x268 <printHeaderList>
     2f0:	e1 14       	cp	r14, r1
     2f2:	f1 04       	cpc	r15, r1
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <print_list+0x1c>
     2f6:	41 c0       	rjmp	.+130    	; 0x37a <print_list+0x9e>
     2f8:	c1 2c       	mov	r12, r1
     2fa:	d1 2c       	mov	r13, r1
     2fc:	4a e0       	ldi	r20, 0x0A	; 10
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	c6 01       	movw	r24, r12
     304:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__itoa_ncheck>
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0b d6       	rcall	.+3094   	; 0xf24 <DebugPrint>
     30e:	81 e2       	ldi	r24, 0x21	; 33
     310:	90 e2       	ldi	r25, 0x20	; 32
     312:	08 d6       	rcall	.+3088   	; 0xf24 <DebugPrint>
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	9f e1       	ldi	r25, 0x1F	; 31
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <print_list+0x3c>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <print_list+0x42>
     31e:	00 00       	nop
     320:	f7 01       	movw	r30, r14
     322:	81 91       	ld	r24, Z+
     324:	91 91       	ld	r25, Z+
     326:	8f 01       	movw	r16, r30
     328:	fd d5       	rcall	.+3066   	; 0xf24 <DebugPrint>
     32a:	c0 e0       	ldi	r28, 0x00	; 0
     32c:	d0 e0       	ldi	r29, 0x00	; 0
     32e:	12 c0       	rjmp	.+36     	; 0x354 <print_list+0x78>
     330:	8f e3       	ldi	r24, 0x3F	; 63
     332:	9f e1       	ldi	r25, 0x1F	; 31
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <print_list+0x58>
     338:	00 c0       	rjmp	.+0      	; 0x33a <print_list+0x5e>
     33a:	00 00       	nop
     33c:	f8 01       	movw	r30, r16
     33e:	81 91       	ld	r24, Z+
     340:	91 91       	ld	r25, Z+
     342:	8f 01       	movw	r16, r30
     344:	ef d5       	rcall	.+3038   	; 0xf24 <DebugPrint>
     346:	c3 30       	cpi	r28, 0x03	; 3
     348:	d1 05       	cpc	r29, r1
     34a:	18 f4       	brcc	.+6      	; 0x352 <print_list+0x76>
     34c:	81 e2       	ldi	r24, 0x21	; 33
     34e:	90 e2       	ldi	r25, 0x20	; 32
     350:	e9 d5       	rcall	.+3026   	; 0xf24 <DebugPrint>
     352:	21 96       	adiw	r28, 0x01	; 1
     354:	81 e2       	ldi	r24, 0x21	; 33
     356:	90 e2       	ldi	r25, 0x20	; 32
     358:	e5 d5       	rcall	.+3018   	; 0xf24 <DebugPrint>
     35a:	c4 30       	cpi	r28, 0x04	; 4
     35c:	d1 05       	cpc	r29, r1
     35e:	41 f7       	brne	.-48     	; 0x330 <print_list+0x54>
     360:	88 e5       	ldi	r24, 0x58	; 88
     362:	90 e2       	ldi	r25, 0x20	; 32
     364:	df d5       	rcall	.+3006   	; 0xf24 <DebugPrint>
     366:	f7 01       	movw	r30, r14
     368:	e2 84       	ldd	r14, Z+10	; 0x0a
     36a:	f3 84       	ldd	r15, Z+11	; 0x0b
     36c:	ff ef       	ldi	r31, 0xFF	; 255
     36e:	cf 1a       	sub	r12, r31
     370:	df 0a       	sbc	r13, r31
     372:	e1 14       	cp	r14, r1
     374:	f1 04       	cpc	r15, r1
     376:	09 f0       	breq	.+2      	; 0x37a <print_list+0x9e>
     378:	c1 cf       	rjmp	.-126    	; 0x2fc <print_list+0x20>
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	08 95       	ret

0000038c <insert>:
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	ec 01       	movw	r28, r24
     39a:	7b 01       	movw	r14, r22
     39c:	8c e0       	ldi	r24, 0x0C	; 12
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <malloc>
     3a4:	8c 01       	movw	r16, r24
     3a6:	89 2b       	or	r24, r25
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <insert+0x24>
     3aa:	8d e3       	ldi	r24, 0x3D	; 61
     3ac:	90 e2       	ldi	r25, 0x20	; 32
     3ae:	ba d5       	rcall	.+2932   	; 0xf24 <DebugPrint>
     3b0:	8c e0       	ldi	r24, 0x0C	; 12
     3b2:	f8 01       	movw	r30, r16
     3b4:	11 92       	st	Z+, r1
     3b6:	8a 95       	dec	r24
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <insert+0x28>
     3ba:	f7 01       	movw	r30, r14
     3bc:	d8 01       	movw	r26, r16
     3be:	b7 01       	movw	r22, r14
     3c0:	66 5f       	subi	r22, 0xF6	; 246
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	21 91       	ld	r18, Z+
     3c6:	31 91       	ld	r19, Z+
     3c8:	2d 93       	st	X+, r18
     3ca:	3d 93       	st	X+, r19
     3cc:	e6 17       	cp	r30, r22
     3ce:	f7 07       	cpc	r31, r23
     3d0:	c9 f7       	brne	.-14     	; 0x3c4 <insert+0x38>
     3d2:	88 81       	ld	r24, Y
     3d4:	99 81       	ldd	r25, Y+1	; 0x01
     3d6:	f8 01       	movw	r30, r16
     3d8:	82 87       	std	Z+10, r24	; 0x0a
     3da:	93 87       	std	Z+11, r25	; 0x0b
     3dc:	08 83       	st	Y, r16
     3de:	19 83       	std	Y+1, r17	; 0x01
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	08 95       	ret

000003ee <pop>:
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	dc 01       	movw	r26, r24
     3fc:	ed 91       	ld	r30, X+
     3fe:	fc 91       	ld	r31, X
     400:	11 97       	sbiw	r26, 0x01	; 1
     402:	30 97       	sbiw	r30, 0x00	; 0
     404:	09 f1       	breq	.+66     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
     406:	e2 84       	ldd	r14, Z+10	; 0x0a
     408:	f3 84       	ldd	r15, Z+11	; 0x0b
     40a:	ca ea       	ldi	r28, 0xAA	; 170
     40c:	d0 e2       	ldi	r29, 0x20	; 32
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	ed 91       	ld	r30, X+
     414:	fc 91       	ld	r31, X
     416:	11 97       	sbiw	r26, 0x01	; 1
     418:	a9 01       	movw	r20, r18
     41a:	44 0f       	add	r20, r20
     41c:	55 1f       	adc	r21, r21
     41e:	e4 0f       	add	r30, r20
     420:	f5 1f       	adc	r31, r21
     422:	40 81       	ld	r20, Z
     424:	49 93       	st	Y+, r20
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	25 30       	cpi	r18, 0x05	; 5
     42c:	31 05       	cpc	r19, r1
     42e:	89 f7       	brne	.-30     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     430:	8d 01       	movw	r16, r26
     432:	8d 91       	ld	r24, X+
     434:	9c 91       	ld	r25, X
     436:	0e 94 00 0b 	call	0x1600	; 0x1600 <free>
     43a:	f8 01       	movw	r30, r16
     43c:	e0 82       	st	Z, r14
     43e:	f1 82       	std	Z+1, r15	; 0x01
     440:	80 91 aa 20 	lds	r24, 0x20AA
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	08 95       	ret

0000045a <popListByValue>:
 * @param  *current Status pointer to the current memory location
 * @param  next     Status pointer to the next memory location
 * @param  item 	Used for iteration
 * @return returnArray Returns a pointer to the array where the data is stored. 
 */
char* popListByValue(node_t ** head, char* value, int sizeOfList){
     45a:	af 92       	push	r10
     45c:	bf 92       	push	r11
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	ec 01       	movw	r28, r24
     470:	6b 01       	movw	r12, r22
     472:	5a 01       	movw	r10, r20
	node_t *current = *head,*temp_node = NULL;
     474:	e8 80       	ld	r14, Y
     476:	f9 80       	ldd	r15, Y+1	; 0x01
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
     478:	d7 01       	movw	r26, r14
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <strcmp>
     482:	89 2b       	or	r24, r25
     484:	39 f0       	breq	.+14     	; 0x494 <popListByValue+0x3a>
		return pop(head);
	}

	for (int item = 1; item < sizeOfList; ++item){
     486:	b2 e0       	ldi	r27, 0x02	; 2
     488:	ab 16       	cp	r10, r27
     48a:	b1 04       	cpc	r11, r1
     48c:	34 f4       	brge	.+12     	; 0x49a <popListByValue+0x40>

			return *returnArray;
		}
		current = current -> next;
	}
	return NULL;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	33 c0       	rjmp	.+102    	; 0x4fa <popListByValue+0xa0>
 */
char* popListByValue(node_t ** head, char* value, int sizeOfList){
	node_t *current = *head,*temp_node = NULL;
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
		return pop(head);
     494:	ce 01       	movw	r24, r28
     496:	ab df       	rcall	.-170    	; 0x3ee <pop>
     498:	30 c0       	rjmp	.+96     	; 0x4fa <popListByValue+0xa0>
	}

	for (int item = 1; item < sizeOfList; ++item){
     49a:	01 e0       	ldi	r16, 0x01	; 1
     49c:	10 e0       	ldi	r17, 0x00	; 0
		temp_node = current -> next;
     49e:	f7 01       	movw	r30, r14
     4a0:	c2 85       	ldd	r28, Z+10	; 0x0a
     4a2:	d3 85       	ldd	r29, Z+11	; 0x0b
		if(strcmp(temp_node -> data[FIRSTDATAITEM], value)==0){
     4a4:	b6 01       	movw	r22, r12
     4a6:	88 81       	ld	r24, Y
     4a8:	99 81       	ldd	r25, Y+1	; 0x01
     4aa:	0e 94 aa 0b 	call	0x1754	; 0x1754 <strcmp>
     4ae:	89 2b       	or	r24, r25
     4b0:	e1 f4       	brne	.+56     	; 0x4ea <popListByValue+0x90>
     4b2:	fe 01       	movw	r30, r28
     4b4:	4a ea       	ldi	r20, 0xAA	; 170
     4b6:	50 e2       	ldi	r21, 0x20	; 32
     4b8:	9e 01       	movw	r18, r28
     4ba:	26 5f       	subi	r18, 0xF6	; 246
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
			for (int itemb = 0; itemb < DATASIZE; ++itemb){
    			returnArray[itemb] = *temp_node -> data[itemb];
     4be:	81 91       	ld	r24, Z+
     4c0:	91 91       	ld	r25, Z+
     4c2:	dc 01       	movw	r26, r24
     4c4:	8c 91       	ld	r24, X
     4c6:	da 01       	movw	r26, r20
     4c8:	8d 93       	st	X+, r24
     4ca:	ad 01       	movw	r20, r26
	}

	for (int item = 1; item < sizeOfList; ++item){
		temp_node = current -> next;
		if(strcmp(temp_node -> data[FIRSTDATAITEM], value)==0){
			for (int itemb = 0; itemb < DATASIZE; ++itemb){
     4cc:	e2 17       	cp	r30, r18
     4ce:	f3 07       	cpc	r31, r19
     4d0:	b1 f7       	brne	.-20     	; 0x4be <popListByValue+0x64>
    			returnArray[itemb] = *temp_node -> data[itemb];
			}
			current -> next = temp_node -> next;
     4d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     4d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     4d6:	f7 01       	movw	r30, r14
     4d8:	82 87       	std	Z+10, r24	; 0x0a
     4da:	93 87       	std	Z+11, r25	; 0x0b
			free(temp_node);
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 00 0b 	call	0x1600	; 0x1600 <free>

			return *returnArray;
     4e2:	80 91 aa 20 	lds	r24, 0x20AA
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	08 c0       	rjmp	.+16     	; 0x4fa <popListByValue+0xa0>
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
		return pop(head);
	}

	for (int item = 1; item < sizeOfList; ++item){
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
		temp_node = current -> next;
     4ee:	7e 01       	movw	r14, r28
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
		return pop(head);
	}

	for (int item = 1; item < sizeOfList; ++item){
     4f0:	0a 15       	cp	r16, r10
     4f2:	1b 05       	cpc	r17, r11
     4f4:	a1 f6       	brne	.-88     	; 0x49e <popListByValue+0x44>

			return *returnArray;
		}
		current = current -> next;
	}
	return NULL;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	08 95       	ret

00000510 <viewListByValue>:
 * @param  *current Status pointer to the current memory location
 * @param  next     Status pointer to the next memory location
 * @param  item 	Used for iteration
 * @return returnArray Returns a pointer to the array where the data is stored. 
 */
char* viewListByValue(node_t ** head, char* value, int sizeOfList){
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ec 01       	movw	r28, r24
     526:	6b 01       	movw	r12, r22
     528:	5a 01       	movw	r10, r20
	node_t *current = *head,*temp_node = NULL;
     52a:	e8 80       	ld	r14, Y
     52c:	f9 80       	ldd	r15, Y+1	; 0x01
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
     52e:	d7 01       	movw	r26, r14
     530:	8d 91       	ld	r24, X+
     532:	9c 91       	ld	r25, X
     534:	0e 94 aa 0b 	call	0x1754	; 0x1754 <strcmp>
     538:	89 2b       	or	r24, r25
     53a:	39 f0       	breq	.+14     	; 0x54a <viewListByValue+0x3a>
		return pop(head);
	}

	for (int item = 1; item < sizeOfList; ++item){
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	ab 16       	cp	r10, r27
     540:	b1 04       	cpc	r11, r1
     542:	34 f4       	brge	.+12     	; 0x550 <viewListByValue+0x40>

			return *returnArray;
		}
		current = current -> next;
	}
	return NULL;
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	30 c0       	rjmp	.+96     	; 0x5aa <viewListByValue+0x9a>
 */
char* viewListByValue(node_t ** head, char* value, int sizeOfList){
	node_t *current = *head,*temp_node = NULL;
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
		return pop(head);
     54a:	ce 01       	movw	r24, r28
     54c:	50 df       	rcall	.-352    	; 0x3ee <pop>
     54e:	2d c0       	rjmp	.+90     	; 0x5aa <viewListByValue+0x9a>
	}

	for (int item = 1; item < sizeOfList; ++item){
     550:	01 e0       	ldi	r16, 0x01	; 1
     552:	10 e0       	ldi	r17, 0x00	; 0
		temp_node = current -> next;
     554:	f7 01       	movw	r30, r14
     556:	c2 85       	ldd	r28, Z+10	; 0x0a
     558:	d3 85       	ldd	r29, Z+11	; 0x0b
		if(strcmp(temp_node -> data[FIRSTDATAITEM], value)==0){
     55a:	b6 01       	movw	r22, r12
     55c:	88 81       	ld	r24, Y
     55e:	99 81       	ldd	r25, Y+1	; 0x01
     560:	0e 94 aa 0b 	call	0x1754	; 0x1754 <strcmp>
     564:	89 2b       	or	r24, r25
     566:	c9 f4       	brne	.+50     	; 0x59a <viewListByValue+0x8a>
     568:	fe 01       	movw	r30, r28
     56a:	4a ea       	ldi	r20, 0xAA	; 170
     56c:	50 e2       	ldi	r21, 0x20	; 32
     56e:	9e 01       	movw	r18, r28
     570:	26 5f       	subi	r18, 0xF6	; 246
     572:	3f 4f       	sbci	r19, 0xFF	; 255
			for (int itemb = 0; itemb < DATASIZE; ++itemb){
    			returnArray[itemb] = *temp_node -> data[itemb];
     574:	81 91       	ld	r24, Z+
     576:	91 91       	ld	r25, Z+
     578:	dc 01       	movw	r26, r24
     57a:	8c 91       	ld	r24, X
     57c:	da 01       	movw	r26, r20
     57e:	8d 93       	st	X+, r24
     580:	ad 01       	movw	r20, r26
	}

	for (int item = 1; item < sizeOfList; ++item){
		temp_node = current -> next;
		if(strcmp(temp_node -> data[FIRSTDATAITEM], value)==0){
			for (int itemb = 0; itemb < DATASIZE; ++itemb){
     582:	e2 17       	cp	r30, r18
     584:	f3 07       	cpc	r31, r19
     586:	b1 f7       	brne	.-20     	; 0x574 <viewListByValue+0x64>
    			returnArray[itemb] = *temp_node -> data[itemb];
			}
			current -> next = temp_node -> next;
     588:	8a 85       	ldd	r24, Y+10	; 0x0a
     58a:	9b 85       	ldd	r25, Y+11	; 0x0b
     58c:	f7 01       	movw	r30, r14
     58e:	82 87       	std	Z+10, r24	; 0x0a
     590:	93 87       	std	Z+11, r25	; 0x0b

			return *returnArray;
     592:	80 91 aa 20 	lds	r24, 0x20AA
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 c0       	rjmp	.+16     	; 0x5aa <viewListByValue+0x9a>
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
		return pop(head);
	}

	for (int item = 1; item < sizeOfList; ++item){
     59a:	0f 5f       	subi	r16, 0xFF	; 255
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
		temp_node = current -> next;
     59e:	7e 01       	movw	r14, r28
	
	if (strcmp(current -> data[FIRSTDATAITEM], value)==0){
		return pop(head);
	}

	for (int item = 1; item < sizeOfList; ++item){
     5a0:	0a 15       	cp	r16, r10
     5a2:	1b 05       	cpc	r17, r11
     5a4:	b9 f6       	brne	.-82     	; 0x554 <viewListByValue+0x44>

			return *returnArray;
		}
		current = current -> next;
	}
	return NULL;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	08 95       	ret

000005c0 <sizeOfList>:
 */
int sizeOfList(node_t *listHead){
	int sizeOfList = 1;
	node_t * current = listHead;

	while (current -> next != NULL){
     5c0:	dc 01       	movw	r26, r24
     5c2:	1a 96       	adiw	r26, 0x0a	; 10
     5c4:	ed 91       	ld	r30, X+
     5c6:	fc 91       	ld	r31, X
     5c8:	1b 97       	sbiw	r26, 0x0b	; 11
     5ca:	30 97       	sbiw	r30, 0x00	; 0
     5cc:	49 f0       	breq	.+18     	; 0x5e0 <sizeOfList+0x20>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
		current = current -> next;
		sizeOfList++;
     5d2:	01 96       	adiw	r24, 0x01	; 1
 */
int sizeOfList(node_t *listHead){
	int sizeOfList = 1;
	node_t * current = listHead;

	while (current -> next != NULL){
     5d4:	02 84       	ldd	r0, Z+10	; 0x0a
     5d6:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d8:	e0 2d       	mov	r30, r0
     5da:	30 97       	sbiw	r30, 0x00	; 0
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <sizeOfList+0x12>
     5de:	08 95       	ret
 * @param  *current Status pointer to the current memory location
 * @param  next    Status pointer to the next memory location
 * @param  sizeOfList Amount of data arrays in the list.
 */
int sizeOfList(node_t *listHead){
	int sizeOfList = 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
	while (current -> next != NULL){
		current = current -> next;
		sizeOfList++;
	}
	return sizeOfList;
     5e4:	08 95       	ret

000005e6 <__vector_25>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_RXC_vect)
{
     5e6:	1f 92       	push	r1
     5e8:	0f 92       	push	r0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	0f 92       	push	r0
     5ee:	11 24       	eor	r1, r1
     5f0:	08 b6       	in	r0, 0x38	; 56
     5f2:	0f 92       	push	r0
     5f4:	18 be       	out	0x38, r1	; 56
     5f6:	09 b6       	in	r0, 0x39	; 57
     5f8:	0f 92       	push	r0
     5fa:	19 be       	out	0x39, r1	; 57
     5fc:	0b b6       	in	r0, 0x3b	; 59
     5fe:	0f 92       	push	r0
     600:	1b be       	out	0x3b, r1	; 59
     602:	2f 93       	push	r18
     604:	3f 93       	push	r19
     606:	4f 93       	push	r20
     608:	5f 93       	push	r21
     60a:	6f 93       	push	r22
     60c:	7f 93       	push	r23
     60e:	8f 93       	push	r24
     610:	9f 93       	push	r25
     612:	af 93       	push	r26
     614:	bf 93       	push	r27
     616:	ef 93       	push	r30
     618:	ff 93       	push	r31
  USART_RXComplete(&uartC0);
     61a:	8f ea       	ldi	r24, 0xAF	; 175
     61c:	90 e2       	ldi	r25, 0x20	; 32
     61e:	e8 d4       	rcall	.+2512   	; 0xff0 <USART_RXComplete>
}
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0b be       	out	0x3b, r0	; 59
     63c:	0f 90       	pop	r0
     63e:	09 be       	out	0x39, r0	; 57
     640:	0f 90       	pop	r0
     642:	08 be       	out	0x38, r0	; 56
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_26>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC0.
 *         This ISR is only defined if the macro ENABLE_UART_C0 is defined.
 */
ISR(USARTC0_DRE_vect)
{
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	08 b6       	in	r0, 0x38	; 56
     65a:	0f 92       	push	r0
     65c:	18 be       	out	0x38, r1	; 56
     65e:	09 b6       	in	r0, 0x39	; 57
     660:	0f 92       	push	r0
     662:	19 be       	out	0x39, r1	; 57
     664:	0b b6       	in	r0, 0x3b	; 59
     666:	0f 92       	push	r0
     668:	1b be       	out	0x3b, r1	; 59
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	ef 93       	push	r30
     680:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC0);
     682:	8f ea       	ldi	r24, 0xAF	; 175
     684:	90 e2       	ldi	r25, 0x20	; 32
     686:	cf d4       	rcall	.+2462   	; 0x1026 <USART_DataRegEmpty>
}
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0b be       	out	0x3b, r0	; 59
     6a4:	0f 90       	pop	r0
     6a6:	09 be       	out	0x39, r0	; 57
     6a8:	0f 90       	pop	r0
     6aa:	08 be       	out	0x38, r0	; 56
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	08 b6       	in	r0, 0x38	; 56
     6c2:	0f 92       	push	r0
     6c4:	18 be       	out	0x38, r1	; 56
     6c6:	09 b6       	in	r0, 0x39	; 57
     6c8:	0f 92       	push	r0
     6ca:	19 be       	out	0x39, r1	; 57
     6cc:	0b b6       	in	r0, 0x3b	; 59
     6ce:	0f 92       	push	r0
     6d0:	1b be       	out	0x3b, r1	; 59
     6d2:	2f 93       	push	r18
     6d4:	3f 93       	push	r19
     6d6:	4f 93       	push	r20
     6d8:	5f 93       	push	r21
     6da:	6f 93       	push	r22
     6dc:	7f 93       	push	r23
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
     6e6:	ef 93       	push	r30
     6e8:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     6ea:	86 eb       	ldi	r24, 0xB6	; 182
     6ec:	92 e2       	ldi	r25, 0x22	; 34
     6ee:	80 d4       	rcall	.+2304   	; 0xff0 <USART_RXComplete>
}
     6f0:	ff 91       	pop	r31
     6f2:	ef 91       	pop	r30
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	7f 91       	pop	r23
     6fe:	6f 91       	pop	r22
     700:	5f 91       	pop	r21
     702:	4f 91       	pop	r20
     704:	3f 91       	pop	r19
     706:	2f 91       	pop	r18
     708:	0f 90       	pop	r0
     70a:	0b be       	out	0x3b, r0	; 59
     70c:	0f 90       	pop	r0
     70e:	09 be       	out	0x39, r0	; 57
     710:	0f 90       	pop	r0
     712:	08 be       	out	0x38, r0	; 56
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	08 b6       	in	r0, 0x38	; 56
     72a:	0f 92       	push	r0
     72c:	18 be       	out	0x38, r1	; 56
     72e:	09 b6       	in	r0, 0x39	; 57
     730:	0f 92       	push	r0
     732:	19 be       	out	0x39, r1	; 57
     734:	0b b6       	in	r0, 0x3b	; 59
     736:	0f 92       	push	r0
     738:	1b be       	out	0x3b, r1	; 59
     73a:	2f 93       	push	r18
     73c:	3f 93       	push	r19
     73e:	4f 93       	push	r20
     740:	5f 93       	push	r21
     742:	6f 93       	push	r22
     744:	7f 93       	push	r23
     746:	8f 93       	push	r24
     748:	9f 93       	push	r25
     74a:	af 93       	push	r26
     74c:	bf 93       	push	r27
     74e:	ef 93       	push	r30
     750:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     752:	86 eb       	ldi	r24, 0xB6	; 182
     754:	92 e2       	ldi	r25, 0x22	; 34
     756:	67 d4       	rcall	.+2254   	; 0x1026 <USART_DataRegEmpty>
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0b be       	out	0x3b, r0	; 59
     774:	0f 90       	pop	r0
     776:	09 be       	out	0x39, r0	; 57
     778:	0f 90       	pop	r0
     77a:	08 be       	out	0x38, r0	; 56
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <main>:
extern node_t *listHead; // head


#define UPDATEINTERVAL 100			// in ms

int main(void){
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	c0 58       	subi	r28, 0x80	; 128
     790:	d1 09       	sbc	r29, r1
     792:	cd bf       	out	0x3d, r28	; 61
     794:	de bf       	out	0x3e, r29	; 62
	
	SystemClock_init();										// 32 MHz clock
     796:	58 dd       	rcall	.-1360   	; 0x248 <SystemClock_init>
	// Green = RX, Orange = TX
	init_uart(&uartC0, &USARTC0, F_CPU, C0_BAUD, C0_CLK2X); // Module communication		C2 RX C3 TX
     798:	c1 2c       	mov	r12, r1
     79a:	e1 2c       	mov	r14, r1
     79c:	12 ec       	ldi	r17, 0xC2	; 194
     79e:	f1 2e       	mov	r15, r17
     7a0:	01 e0       	ldi	r16, 0x01	; 1
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	38 e4       	ldi	r19, 0x48	; 72
     7a8:	48 ee       	ldi	r20, 0xE8	; 232
     7aa:	51 e0       	ldi	r21, 0x01	; 1
     7ac:	60 ea       	ldi	r22, 0xA0	; 160
     7ae:	78 e0       	ldi	r23, 0x08	; 8
     7b0:	8f ea       	ldi	r24, 0xAF	; 175
     7b2:	90 e2       	ldi	r25, 0x20	; 32
     7b4:	5a d3       	rcall	.+1716   	; 0xe6a <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); // Debug communication		C6 RX C7 TX
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	38 e4       	ldi	r19, 0x48	; 72
     7ba:	48 ee       	ldi	r20, 0xE8	; 232
     7bc:	51 e0       	ldi	r21, 0x01	; 1
     7be:	60 eb       	ldi	r22, 0xB0	; 176
     7c0:	78 e0       	ldi	r23, 0x08	; 8
     7c2:	86 eb       	ldi	r24, 0xB6	; 182
     7c4:	92 e2       	ldi	r25, 0x22	; 34
     7c6:	51 d3       	rcall	.+1698   	; 0xe6a <init_uart>

	PMIC.CTRL = PMIC_LOLVLEN_bm;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 a2 00 	sts	0x00A2, r24
	sei();
     7ce:	78 94       	sei
	
	DebugPrint(CLEARTERM);
     7d0:	87 e4       	ldi	r24, 0x47	; 71
     7d2:	90 e2       	ldi	r25, 0x20	; 32
     7d4:	a7 d3       	rcall	.+1870   	; 0xf24 <DebugPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d6:	2f ef       	ldi	r18, 0xFF	; 255
     7d8:	83 ec       	ldi	r24, 0xC3	; 195
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	21 50       	subi	r18, 0x01	; 1
     7de:	80 40       	sbci	r24, 0x00	; 0
     7e0:	90 40       	sbci	r25, 0x00	; 0
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x56>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x60>
     7e6:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	Command(NCFG0);
     7e8:	82 e5       	ldi	r24, 0x52	; 82
     7ea:	90 e2       	ldi	r25, 0x20	; 32
     7ec:	a0 d3       	rcall	.+1856   	; 0xf2e <Command>
	Command(SBIV500);
     7ee:	8b e5       	ldi	r24, 0x5B	; 91
     7f0:	90 e2       	ldi	r25, 0x20	; 32
     7f2:	9d d3       	rcall	.+1850   	; 0xf2e <Command>
     7f4:	2f ef       	ldi	r18, 0xFF	; 255
     7f6:	83 ec       	ldi	r24, 0xC3	; 195
     7f8:	99 e0       	ldi	r25, 0x09	; 9
     7fa:	21 50       	subi	r18, 0x01	; 1
     7fc:	80 40       	sbci	r24, 0x00	; 0
     7fe:	90 40       	sbci	r25, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <main+0x74>
     802:	00 c0       	rjmp	.+0      	; 0x804 <main+0x7e>
     804:	00 00       	nop
	
	_delay_ms(UPDATEINTERVAL);
	getMyNodeID();
     806:	f0 d1       	rcall	.+992    	; 0xbe8 <getMyNodeID>
	while(1) {
		char message[128];
		
		//_delay_ms(2000);
		
		memset(message, EOS, strlen(message));
     808:	8e 01       	movw	r16, r28
     80a:	0f 5f       	subi	r16, 0xFF	; 255
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
     80e:	f8 01       	movw	r30, r16
     810:	01 90       	ld	r0, Z+
     812:	00 20       	and	r0, r0
     814:	e9 f7       	brne	.-6      	; 0x810 <main+0x8a>
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	af 01       	movw	r20, r30
     81a:	40 1b       	sub	r20, r16
     81c:	51 0b       	sbc	r21, r17
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	c8 01       	movw	r24, r16
     824:	85 d7       	rcall	.+3850   	; 0x1730 <memset>
     826:	2f ef       	ldi	r18, 0xFF	; 255
     828:	83 ec       	ldi	r24, 0xC3	; 195
     82a:	99 e0       	ldi	r25, 0x09	; 9
     82c:	21 50       	subi	r18, 0x01	; 1
     82e:	80 40       	sbci	r24, 0x00	; 0
     830:	90 40       	sbci	r25, 0x00	; 0
     832:	e1 f7       	brne	.-8      	; 0x82c <main+0xa6>
     834:	00 c0       	rjmp	.+0      	; 0x836 <main+0xb0>
     836:	00 00       	nop
		//DebugPrint(CLEARTERM);
		_delay_ms(UPDATEINTERVAL);
		
		//DebugPrint(TranslateMessage());
		strcpy(message,TranslateMessage());
     838:	8c d1       	rcall	.+792    	; 0xb52 <TranslateMessage>
     83a:	bc 01       	movw	r22, r24
     83c:	c8 01       	movw	r24, r16
     83e:	93 d7       	rcall	.+3878   	; 0x1766 <strcpy>
		
		DebugPrint("\r\n");
     840:	88 e5       	ldi	r24, 0x58	; 88
     842:	90 e2       	ldi	r25, 0x20	; 32
     844:	6f d3       	rcall	.+1758   	; 0xf24 <DebugPrint>
		if (ValidateMessage(message,TYPE_RRN) == true){
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	c8 01       	movw	r24, r16
     84a:	09 d0       	rcall	.+18     	; 0x85e <ValidateMessage>
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	19 f4       	brne	.+6      	; 0x856 <main+0xd0>
			DetermineCommandtype(message);
     850:	c8 01       	movw	r24, r16
     852:	04 d1       	rcall	.+520    	; 0xa5c <DetermineCommandtype>
     854:	dc cf       	rjmp	.-72     	; 0x80e <main+0x88>
		}else{
			DebugPrint("Not valid");
     856:	86 e6       	ldi	r24, 0x66	; 102
     858:	90 e2       	ldi	r25, 0x20	; 32
     85a:	64 d3       	rcall	.+1736   	; 0xf24 <DebugPrint>
		}

	}
     85c:	d8 cf       	rjmp	.-80     	; 0x80e <main+0x88>

0000085e <ValidateMessage>:
void RRN_function (char *message){
	char* messagePointer;
	
	messagePointer = message;
	
	fillpopulationlist(message);
     85e:	fc 01       	movw	r30, r24
     860:	01 90       	ld	r0, Z+
     862:	00 20       	and	r0, r0
     864:	e9 f7       	brne	.-6      	; 0x860 <ValidateMessage+0x2>
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	e8 1b       	sub	r30, r24
     86a:	f9 0b       	sbc	r31, r25
     86c:	61 30       	cpi	r22, 0x01	; 1
     86e:	29 f4       	brne	.+10     	; 0x87a <ValidateMessage+0x1c>
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	e9 32       	cpi	r30, 0x29	; 41
     874:	19 f0       	breq	.+6      	; 0x87c <ValidateMessage+0x1e>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 95       	ret
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	08 95       	ret

0000087e <fillpopulationlist>:
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	2a 97       	sbiw	r28, 0x0a	; 10
     890:	cd bf       	out	0x3d, r28	; 61
     892:	de bf       	out	0x3e, r29	; 62
     894:	8c 01       	movw	r16, r24
     896:	8b e2       	ldi	r24, 0x2B	; 43
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	1d d6       	rcall	.+3130   	; 0x14d6 <malloc>
     89c:	7c 01       	movw	r14, r24
     89e:	d8 01       	movw	r26, r16
     8a0:	8c 91       	ld	r24, X
     8a2:	8c 32       	cpi	r24, 0x2C	; 44
     8a4:	69 f0       	breq	.+26     	; 0x8c0 <fillpopulationlist+0x42>
     8a6:	f8 01       	movw	r30, r16
     8a8:	31 96       	adiw	r30, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	d7 01       	movw	r26, r14
     8ae:	a9 0f       	add	r26, r25
     8b0:	b1 1d       	adc	r27, r1
     8b2:	8c 93       	st	X, r24
     8b4:	8f 01       	movw	r16, r30
     8b6:	9f 5f       	subi	r25, 0xFF	; 255
     8b8:	81 91       	ld	r24, Z+
     8ba:	8c 32       	cpi	r24, 0x2C	; 44
     8bc:	b9 f7       	brne	.-18     	; 0x8ac <fillpopulationlist+0x2e>
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <fillpopulationlist+0x44>
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	a8 01       	movw	r20, r16
     8c4:	4f 5f       	subi	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	f7 01       	movw	r30, r14
     8ca:	e9 0f       	add	r30, r25
     8cc:	f1 1d       	adc	r31, r1
     8ce:	10 82       	st	Z, r1
     8d0:	f8 01       	movw	r30, r16
     8d2:	81 81       	ldd	r24, Z+1	; 0x01
     8d4:	8c 32       	cpi	r24, 0x2C	; 44
     8d6:	69 f0       	breq	.+26     	; 0x8f2 <fillpopulationlist+0x74>
     8d8:	32 96       	adiw	r30, 0x02	; 2
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	d7 01       	movw	r26, r14
     8de:	a9 0f       	add	r26, r25
     8e0:	b1 1d       	adc	r27, r1
     8e2:	1d 96       	adiw	r26, 0x0d	; 13
     8e4:	8c 93       	st	X, r24
     8e6:	af 01       	movw	r20, r30
     8e8:	9f 5f       	subi	r25, 0xFF	; 255
     8ea:	81 91       	ld	r24, Z+
     8ec:	8c 32       	cpi	r24, 0x2C	; 44
     8ee:	b1 f7       	brne	.-20     	; 0x8dc <fillpopulationlist+0x5e>
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <fillpopulationlist+0x76>
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fa 01       	movw	r30, r20
     8f6:	31 96       	adiw	r30, 0x01	; 1
     8f8:	97 01       	movw	r18, r14
     8fa:	29 0f       	add	r18, r25
     8fc:	31 1d       	adc	r19, r1
     8fe:	d9 01       	movw	r26, r18
     900:	1d 96       	adiw	r26, 0x0d	; 13
     902:	1c 92       	st	X, r1
     904:	da 01       	movw	r26, r20
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	8c 91       	ld	r24, X
     90a:	8c 32       	cpi	r24, 0x2C	; 44
     90c:	39 f0       	breq	.+14     	; 0x91c <fillpopulationlist+0x9e>
     90e:	ca 01       	movw	r24, r20
     910:	02 96       	adiw	r24, 0x02	; 2
     912:	fc 01       	movw	r30, r24
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	20 81       	ld	r18, Z
     918:	2c 32       	cpi	r18, 0x2C	; 44
     91a:	d9 f7       	brne	.-10     	; 0x912 <fillpopulationlist+0x94>
     91c:	81 81       	ldd	r24, Z+1	; 0x01
     91e:	88 23       	and	r24, r24
     920:	61 f0       	breq	.+24     	; 0x93a <fillpopulationlist+0xbc>
     922:	32 96       	adiw	r30, 0x02	; 2
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	d7 01       	movw	r26, r14
     928:	a9 0f       	add	r26, r25
     92a:	b1 1d       	adc	r27, r1
     92c:	5a 96       	adiw	r26, 0x1a	; 26
     92e:	8c 93       	st	X, r24
     930:	9f 5f       	subi	r25, 0xFF	; 255
     932:	81 91       	ld	r24, Z+
     934:	81 11       	cpse	r24, r1
     936:	f7 cf       	rjmp	.-18     	; 0x926 <fillpopulationlist+0xa8>
     938:	01 c0       	rjmp	.+2      	; 0x93c <fillpopulationlist+0xbe>
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	f7 01       	movw	r30, r14
     93e:	e9 0f       	add	r30, r25
     940:	f1 1d       	adc	r31, r1
     942:	12 8e       	std	Z+26, r1	; 0x1a
     944:	87 01       	movw	r16, r14
     946:	06 5e       	subi	r16, 0xE6	; 230
     948:	1f 4f       	sbci	r17, 0xFF	; 255
     94a:	c8 01       	movw	r24, r16
     94c:	eb d2       	rcall	.+1494   	; 0xf24 <DebugPrint>
     94e:	a7 01       	movw	r20, r14
     950:	4f 5d       	subi	r20, 0xDF	; 223
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	8e e6       	ldi	r24, 0x6E	; 110
     956:	9f e2       	ldi	r25, 0x2F	; 47
     958:	a1 e6       	ldi	r26, 0x61	; 97
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	f7 01       	movw	r30, r14
     95e:	81 a3       	std	Z+33, r24	; 0x21
     960:	92 a3       	std	Z+34, r25	; 0x22
     962:	a3 a3       	std	Z+35, r26	; 0x23
     964:	b4 a3       	std	Z+36, r27	; 0x24
     966:	97 01       	movw	r18, r14
     968:	2b 5d       	subi	r18, 0xDB	; 219
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	85 a3       	std	Z+37, r24	; 0x25
     96e:	96 a3       	std	Z+38, r25	; 0x26
     970:	a7 a3       	std	Z+39, r26	; 0x27
     972:	b0 a7       	std	Z+40, r27	; 0x28
     974:	c7 01       	movw	r24, r14
     976:	89 96       	adiw	r24, 0x29	; 41
     978:	60 e3       	ldi	r22, 0x30	; 48
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	61 a7       	std	Z+41, r22	; 0x29
     97e:	72 a7       	std	Z+42, r23	; 0x2a
     980:	e9 82       	std	Y+1, r14	; 0x01
     982:	fa 82       	std	Y+2, r15	; 0x02
     984:	0b 83       	std	Y+3, r16	; 0x03
     986:	1c 83       	std	Y+4, r17	; 0x04
     988:	4d 83       	std	Y+5, r20	; 0x05
     98a:	5e 83       	std	Y+6, r21	; 0x06
     98c:	2f 83       	std	Y+7, r18	; 0x07
     98e:	38 87       	std	Y+8, r19	; 0x08
     990:	89 87       	std	Y+9, r24	; 0x09
     992:	9a 87       	std	Y+10, r25	; 0x0a
     994:	b7 01       	movw	r22, r14
     996:	80 e7       	ldi	r24, 0x70	; 112
     998:	90 e2       	ldi	r25, 0x20	; 32
     99a:	dc d6       	rcall	.+3512   	; 0x1754 <strcmp>
     99c:	89 2b       	or	r24, r25
     99e:	21 f1       	breq	.+72     	; 0x9e8 <fillpopulationlist+0x16a>
     9a0:	80 91 a8 20 	lds	r24, 0x20A8
     9a4:	90 91 a9 20 	lds	r25, 0x20A9
     9a8:	0b de       	rcall	.-1002   	; 0x5c0 <sizeOfList>
     9aa:	ac 01       	movw	r20, r24
     9ac:	b7 01       	movw	r22, r14
     9ae:	88 ea       	ldi	r24, 0xA8	; 168
     9b0:	90 e2       	ldi	r25, 0x20	; 32
     9b2:	ae dd       	rcall	.-1188   	; 0x510 <viewListByValue>
     9b4:	89 2b       	or	r24, r25
     9b6:	39 f4       	brne	.+14     	; 0x9c6 <fillpopulationlist+0x148>
     9b8:	be 01       	movw	r22, r28
     9ba:	6f 5f       	subi	r22, 0xFF	; 255
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	88 ea       	ldi	r24, 0xA8	; 168
     9c0:	90 e2       	ldi	r25, 0x20	; 32
     9c2:	e4 dc       	rcall	.-1592   	; 0x38c <insert>
     9c4:	39 c0       	rjmp	.+114    	; 0xa38 <fillpopulationlist+0x1ba>
     9c6:	80 91 a8 20 	lds	r24, 0x20A8
     9ca:	90 91 a9 20 	lds	r25, 0x20A9
     9ce:	f8 dd       	rcall	.-1040   	; 0x5c0 <sizeOfList>
     9d0:	ac 01       	movw	r20, r24
     9d2:	b7 01       	movw	r22, r14
     9d4:	88 ea       	ldi	r24, 0xA8	; 168
     9d6:	90 e2       	ldi	r25, 0x20	; 32
     9d8:	40 dd       	rcall	.-1408   	; 0x45a <popListByValue>
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	88 ea       	ldi	r24, 0xA8	; 168
     9e2:	90 e2       	ldi	r25, 0x20	; 32
     9e4:	d3 dc       	rcall	.-1626   	; 0x38c <insert>
     9e6:	28 c0       	rjmp	.+80     	; 0xa38 <fillpopulationlist+0x1ba>
     9e8:	fd e0       	ldi	r31, 0x0D	; 13
     9ea:	ef 0e       	add	r14, r31
     9ec:	f1 1c       	adc	r15, r1
     9ee:	e9 82       	std	Y+1, r14	; 0x01
     9f0:	fa 82       	std	Y+2, r15	; 0x02
     9f2:	80 91 a8 20 	lds	r24, 0x20A8
     9f6:	90 91 a9 20 	lds	r25, 0x20A9
     9fa:	e2 dd       	rcall	.-1084   	; 0x5c0 <sizeOfList>
     9fc:	ac 01       	movw	r20, r24
     9fe:	b7 01       	movw	r22, r14
     a00:	88 ea       	ldi	r24, 0xA8	; 168
     a02:	90 e2       	ldi	r25, 0x20	; 32
     a04:	85 dd       	rcall	.-1270   	; 0x510 <viewListByValue>
     a06:	89 2b       	or	r24, r25
     a08:	39 f4       	brne	.+14     	; 0xa18 <fillpopulationlist+0x19a>
     a0a:	be 01       	movw	r22, r28
     a0c:	6f 5f       	subi	r22, 0xFF	; 255
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	88 ea       	ldi	r24, 0xA8	; 168
     a12:	90 e2       	ldi	r25, 0x20	; 32
     a14:	bb dc       	rcall	.-1674   	; 0x38c <insert>
     a16:	10 c0       	rjmp	.+32     	; 0xa38 <fillpopulationlist+0x1ba>
     a18:	80 91 a8 20 	lds	r24, 0x20A8
     a1c:	90 91 a9 20 	lds	r25, 0x20A9
     a20:	cf dd       	rcall	.-1122   	; 0x5c0 <sizeOfList>
     a22:	ac 01       	movw	r20, r24
     a24:	b7 01       	movw	r22, r14
     a26:	88 ea       	ldi	r24, 0xA8	; 168
     a28:	90 e2       	ldi	r25, 0x20	; 32
     a2a:	17 dd       	rcall	.-1490   	; 0x45a <popListByValue>
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	88 ea       	ldi	r24, 0xA8	; 168
     a34:	90 e2       	ldi	r25, 0x20	; 32
     a36:	aa dc       	rcall	.-1708   	; 0x38c <insert>
     a38:	87 e4       	ldi	r24, 0x47	; 71
     a3a:	90 e2       	ldi	r25, 0x20	; 32
     a3c:	73 d2       	rcall	.+1254   	; 0xf24 <DebugPrint>
     a3e:	80 91 a8 20 	lds	r24, 0x20A8
     a42:	90 91 a9 20 	lds	r25, 0x20A9
     a46:	4a dc       	rcall	.-1900   	; 0x2dc <print_list>
     a48:	2a 96       	adiw	r28, 0x0a	; 10
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	08 95       	ret

00000a5c <DetermineCommandtype>:
/**
 * Determines the meaning of the message
 * @param  	value	received value
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	00 d0       	rcall	.+0      	; 0xa6a <DetermineCommandtype+0xe>
     a6a:	1f 92       	push	r1
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	7c 01       	movw	r14, r24
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
	
	memset(command, EOS, strlen(command));	
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	fc 01       	movw	r30, r24
     a78:	01 90       	ld	r0, Z+
     a7a:	00 20       	and	r0, r0
     a7c:	e9 f7       	brne	.-6      	; 0xa78 <DetermineCommandtype+0x1c>
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	af 01       	movw	r20, r30
     a82:	48 1b       	sub	r20, r24
     a84:	59 0b       	sbc	r21, r25
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	52 d6       	rcall	.+3236   	; 0x1730 <memset>
	
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     a8c:	d7 01       	movw	r26, r14
     a8e:	11 96       	adiw	r26, 0x01	; 1
     a90:	8c 91       	ld	r24, X
     a92:	8a 33       	cpi	r24, 0x3A	; 58
     a94:	29 f4       	brne	.+10     	; 0xaa0 <DetermineCommandtype+0x44>
	memset(command, EOS, strlen(command));	
	messagePointer = message;
	
	//DebugPrint(message);

	*messagePointer++;
     a96:	87 01       	movw	r16, r14
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	1e c0       	rjmp	.+60     	; 0xadc <DetermineCommandtype+0x80>
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     aa0:	87 01       	movw	r16, r14
     aa2:	0e 5f       	subi	r16, 0xFE	; 254
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(*messagePointer == ( COMMAND_END)){ break;}		
     aa6:	f7 01       	movw	r30, r14
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	8a 33       	cpi	r24, 0x3A	; 58
     aac:	b1 f0       	breq	.+44     	; 0xada <DetermineCommandtype+0x7e>
     aae:	f8 01       	movw	r30, r16
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	04 c0       	rjmp	.+8      	; 0xabc <DetermineCommandtype+0x60>
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
		*messagePointer++;
     ab4:	8f 01       	movw	r16, r30
		if(*messagePointer == ( COMMAND_END)){ break;}		
     ab6:	80 81       	ld	r24, Z
     ab8:	8a 33       	cpi	r24, 0x3A	; 58
     aba:	81 f0       	breq	.+32     	; 0xadc <DetermineCommandtype+0x80>
     abc:	8f 01       	movw	r16, r30
		command[count] = *messagePointer;		
     abe:	a1 e0       	ldi	r26, 0x01	; 1
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	ac 0f       	add	r26, r28
     ac4:	bd 1f       	adc	r27, r29
     ac6:	a9 0f       	add	r26, r25
     ac8:	b1 1d       	adc	r27, r1
     aca:	8c 93       	st	X, r24
		count++;
     acc:	9f 5f       	subi	r25, 0xFF	; 255
     ace:	31 96       	adiw	r30, 0x01	; 1
	
	//DebugPrint(message);

	*messagePointer++;
	
	while(*messagePointer != COMMAND_END){
     ad0:	d8 01       	movw	r26, r16
     ad2:	8c 91       	ld	r24, X
     ad4:	8a 33       	cpi	r24, 0x3A	; 58
     ad6:	71 f7       	brne	.-36     	; 0xab4 <DetermineCommandtype+0x58>
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <DetermineCommandtype+0x80>
 * @param	DetermineCommandtype
 */
void DetermineCommandtype (char *message){
	char *messagePointer;
	char command[4];
	uint8_t count = 0;
     ada:	90 e0       	ldi	r25, 0x00	; 0
		*messagePointer++;
		if(*messagePointer == ( COMMAND_END)){ break;}		
		command[count] = *messagePointer;		
		count++;
	}
	command[count] = EOS;
     adc:	e1 e0       	ldi	r30, 0x01	; 1
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ec 0f       	add	r30, r28
     ae2:	fd 1f       	adc	r31, r29
     ae4:	e9 0f       	add	r30, r25
     ae6:	f1 1d       	adc	r31, r1
     ae8:	10 82       	st	Z, r1
	
	*messagePointer++;

	if		(strcmp(command, "*RRN") == 0){	// Data Notification Message
     aea:	6d e7       	ldi	r22, 0x7D	; 125
     aec:	70 e2       	ldi	r23, 0x20	; 32
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	30 d6       	rcall	.+3168   	; 0x1754 <strcmp>
     af4:	89 2b       	or	r24, r25
     af6:	21 f4       	brne	.+8      	; 0xb00 <DetermineCommandtype+0xa4>
		//RRN_function(messagePointer);
		fillpopulationlist(messagePointer);
     af8:	c8 01       	movw	r24, r16
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	c0 de       	rcall	.-640    	; 0x87e <fillpopulationlist>
     afe:	1f c0       	rjmp	.+62     	; 0xb3e <DetermineCommandtype+0xe2>
	}else if(strcmp(command, "DNO")  == 0){	// Node ID Notification Message
     b00:	62 e8       	ldi	r22, 0x82	; 130
     b02:	70 e2       	ldi	r23, 0x20	; 32
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	25 d6       	rcall	.+3146   	; 0x1754 <strcmp>
     b0a:	89 2b       	or	r24, r25
     b0c:	c1 f0       	breq	.+48     	; 0xb3e <DetermineCommandtype+0xe2>
		
	}else if(strcmp(command, "NIN")  == 0){	// Ranging Result Notification Message
     b0e:	66 e8       	ldi	r22, 0x86	; 134
     b10:	70 e2       	ldi	r23, 0x20	; 32
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	1e d6       	rcall	.+3132   	; 0x1754 <strcmp>
     b18:	89 2b       	or	r24, r25
     b1a:	89 f0       	breq	.+34     	; 0xb3e <DetermineCommandtype+0xe2>
		//printf("NIN\n");
	}else if(strcmp(command, "SDAT") == 0){	// SDAT Notification Messages
     b1c:	6a e8       	ldi	r22, 0x8A	; 138
     b1e:	70 e2       	ldi	r23, 0x20	; 32
     b20:	ce 01       	movw	r24, r28
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	17 d6       	rcall	.+3118   	; 0x1754 <strcmp>
     b26:	89 2b       	or	r24, r25
     b28:	51 f0       	breq	.+20     	; 0xb3e <DetermineCommandtype+0xe2>
		//printf("SDAT\n");
	}else if(strcmp(command, "AIR")  == 0){	// AIR Notification Message
     b2a:	6f e8       	ldi	r22, 0x8F	; 143
     b2c:	70 e2       	ldi	r23, 0x20	; 32
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	10 d6       	rcall	.+3104   	; 0x1754 <strcmp>
     b34:	89 2b       	or	r24, r25
     b36:	19 f0       	breq	.+6      	; 0xb3e <DetermineCommandtype+0xe2>
		//printf("AIR\n");
	}else{
		DebugPrint("No command\r\n");
     b38:	83 e9       	ldi	r24, 0x93	; 147
     b3a:	90 e2       	ldi	r25, 0x20	; 32
     b3c:	f3 d1       	rcall	.+998    	; 0xf24 <DebugPrint>
	}
}
     b3e:	24 96       	adiw	r28, 0x04	; 4
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	08 95       	ret

00000b52 <TranslateMessage>:
 * Translates the received message converts characters
 * to a single string
 * @param  	value	received value
 * @return	message pointer to the translated message
 */
char * TranslateMessage (void){
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	c0 58       	subi	r28, 0x80	; 128
     b60:	d1 09       	sbc	r29, r1
     b62:	cd bf       	out	0x3d, r28	; 61
     b64:	de bf       	out	0x3e, r29	; 62
	char value[128];

	memset(globalMessage, EOS, strlen(globalMessage));
     b66:	ed ec       	ldi	r30, 0xCD	; 205
     b68:	f4 e2       	ldi	r31, 0x24	; 36
     b6a:	01 90       	ld	r0, Z+
     b6c:	00 20       	and	r0, r0
     b6e:	e9 f7       	brne	.-6      	; 0xb6a <TranslateMessage+0x18>
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	af 01       	movw	r20, r30
     b74:	4d 5c       	subi	r20, 0xCD	; 205
     b76:	54 42       	sbci	r21, 0x24	; 36
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	8d ec       	ldi	r24, 0xCD	; 205
     b7e:	94 e2       	ldi	r25, 0x24	; 36
     b80:	d7 d5       	rcall	.+2990   	; 0x1730 <memset>
	memset(value, EOS, strlen(value));
     b82:	8e 01       	movw	r16, r28
     b84:	0f 5f       	subi	r16, 0xFF	; 255
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	f8 01       	movw	r30, r16
     b8a:	01 90       	ld	r0, Z+
     b8c:	00 20       	and	r0, r0
     b8e:	e9 f7       	brne	.-6      	; 0xb8a <TranslateMessage+0x38>
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	af 01       	movw	r20, r30
     b94:	40 1b       	sub	r20, r16
     b96:	51 0b       	sbc	r21, r17
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	c8 01       	movw	r24, r16
     b9e:	c8 d5       	rcall	.+2960   	; 0x1730 <memset>

	value[0] = uart_getc(&uartC0);
     ba0:	8f ea       	ldi	r24, 0xAF	; 175
     ba2:	90 e2       	ldi	r25, 0x20	; 32
     ba4:	2c d0       	rcall	.+88     	; 0xbfe <uart_getc>
     ba6:	89 83       	std	Y+1, r24	; 0x01
	strcpy(globalMessage, value);
     ba8:	b8 01       	movw	r22, r16
     baa:	8d ec       	ldi	r24, 0xCD	; 205
     bac:	94 e2       	ldi	r25, 0x24	; 36
     bae:	db d5       	rcall	.+2998   	; 0x1766 <strcpy>
	while (value[0] != CR){
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	8d 30       	cpi	r24, 0x0D	; 13
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <TranslateMessage+0x80>
		if (value[0] != CR){	
     bb6:	8d 30       	cpi	r24, 0x0D	; 13
     bb8:	31 f0       	breq	.+12     	; 0xbc6 <TranslateMessage+0x74>
			
			strcat(globalMessage, value);	
     bba:	be 01       	movw	r22, r28
     bbc:	6f 5f       	subi	r22, 0xFF	; 255
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	8d ec       	ldi	r24, 0xCD	; 205
     bc2:	94 e2       	ldi	r25, 0x24	; 36
     bc4:	bc d5       	rcall	.+2936   	; 0x173e <strcat>
		}
		value[0] = uart_getc(&uartC0);
     bc6:	8f ea       	ldi	r24, 0xAF	; 175
     bc8:	90 e2       	ldi	r25, 0x20	; 32
     bca:	19 d0       	rcall	.+50     	; 0xbfe <uart_getc>
     bcc:	89 83       	std	Y+1, r24	; 0x01
	memset(globalMessage, EOS, strlen(globalMessage));
	memset(value, EOS, strlen(value));

	value[0] = uart_getc(&uartC0);
	strcpy(globalMessage, value);
	while (value[0] != CR){
     bce:	8d 30       	cpi	r24, 0x0D	; 13
     bd0:	91 f7       	brne	.-28     	; 0xbb6 <TranslateMessage+0x64>
			strcat(globalMessage, value);	
		}
		value[0] = uart_getc(&uartC0);
	}
	return globalMessage;
     bd2:	8d ec       	ldi	r24, 0xCD	; 205
     bd4:	94 e2       	ldi	r25, 0x24	; 36
     bd6:	c0 58       	subi	r28, 0x80	; 128
     bd8:	df 4f       	sbci	r29, 0xFF	; 255
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <getMyNodeID>:
	DebugPrint(CLEARTERM);
	print_list(listHead);
}

char* getMyNodeID (){
	Command(GNID);
     be8:	80 ea       	ldi	r24, 0xA0	; 160
     bea:	90 e2       	ldi	r25, 0x20	; 32
     bec:	a0 d1       	rcall	.+832    	; 0xf2e <Command>
	strcpy(nodeID,TranslateMessage());
     bee:	b1 df       	rcall	.-158    	; 0xb52 <TranslateMessage>
     bf0:	bc 01       	movw	r22, r24
     bf2:	8d eb       	ldi	r24, 0xBD	; 189
     bf4:	94 e2       	ldi	r25, 0x24	; 36
     bf6:	b7 d5       	rcall	.+2926   	; 0x1766 <strcpy>
	return nodeID;
}
     bf8:	8d eb       	ldi	r24, 0xBD	; 189
     bfa:	94 e2       	ldi	r25, 0x24	; 36
     bfc:	08 95       	ret

00000bfe <uart_getc>:
 *
 *  \return received byte from circulair buffer (low byte) or
 *          UART_NO_DATA if buffer is empty
 */
uint16_t uart_getc(USART_data_t *uart)
{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
     c04:	dd d1       	rcall	.+954    	; 0xfc0 <USART_RXBufferData_Available>
     c06:	88 23       	and	r24, r24
     c08:	49 f0       	breq	.+18     	; 0xc1c <uart_getc+0x1e>
    return UART_NO_DATA;
}
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );
     c0a:	e0 eb       	ldi	r30, 0xB0	; 176
     c0c:	f8 e0       	ldi	r31, 0x08	; 8
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	96 ff       	sbrs	r25, 6
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <uart_getc+0x10>
  data = USART_RXBuffer_GetByte(uart);
     c14:	ce 01       	movw	r24, r28
     c16:	df d1       	rcall	.+958    	; 0xfd6 <USART_RXBuffer_GetByte>

  return (data & 0x00FF);
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <uart_getc+0x22>
{
	
  uint8_t data;

  if ( ! USART_RXBufferData_Available(uart) ) {
    return UART_NO_DATA;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	91 e0       	ldi	r25, 0x01	; 1
/*
while ( !( USARTC1.STATUS & USART_TXCIF_bm) );

return USARTC1.DATA;
*/
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ec 01       	movw	r28, r24
     c2e:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     c30:	91 d1       	rcall	.+802    	; 0xf54 <USART_TXBuffer_FreeSpace>
     c32:	88 23       	and	r24, r24
     c34:	19 f0       	breq	.+6      	; 0xc3c <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     c36:	61 2f       	mov	r22, r17
     c38:	ce 01       	movw	r24, r28
     c3a:	99 d1       	rcall	.+818    	; 0xf6e <USART_TXBuffer_PutByte>
  }
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	08 95       	ret

00000c44 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
  char c;

  while ( (c = *s++) ) {
     c4c:	eb 01       	movw	r28, r22
     c4e:	21 96       	adiw	r28, 0x01	; 1
     c50:	fb 01       	movw	r30, r22
     c52:	60 81       	ld	r22, Z
     c54:	66 23       	and	r22, r22
     c56:	31 f0       	breq	.+12     	; 0xc64 <uart_puts+0x20>
     c58:	8c 01       	movw	r16, r24
    uart_putc(uart, c);
     c5a:	c8 01       	movw	r24, r16
     c5c:	e4 df       	rcall	.-56     	; 0xc26 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     c5e:	69 91       	ld	r22, Y+
     c60:	61 11       	cpse	r22, r1
     c62:	fb cf       	rjmp	.-10     	; 0xc5a <uart_puts+0x16>
    uart_putc(uart, c);
  }
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     c6e:	80 3a       	cpi	r24, 0xA0	; 160
     c70:	28 e0       	ldi	r18, 0x08	; 8
     c72:	92 07       	cpc	r25, r18
     c74:	39 f4       	brne	.+14     	; 0xc84 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     c76:	e0 e4       	ldi	r30, 0x40	; 64
     c78:	f6 e0       	ldi	r31, 0x06	; 6
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	82 83       	std	Z+2, r24	; 0x02
     return;
     c82:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     c84:	80 3b       	cpi	r24, 0xB0	; 176
     c86:	28 e0       	ldi	r18, 0x08	; 8
     c88:	92 07       	cpc	r25, r18
     c8a:	39 f4       	brne	.+14     	; 0xc9a <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     c8c:	e0 e4       	ldi	r30, 0x40	; 64
     c8e:	f6 e0       	ldi	r31, 0x06	; 6
     c90:	80 e8       	ldi	r24, 0x80	; 128
     c92:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     c94:	80 e4       	ldi	r24, 0x40	; 64
     c96:	82 83       	std	Z+2, r24	; 0x02
     return;
     c98:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     c9a:	80 3a       	cpi	r24, 0xA0	; 160
     c9c:	29 e0       	ldi	r18, 0x09	; 9
     c9e:	92 07       	cpc	r25, r18
     ca0:	39 f4       	brne	.+14     	; 0xcb0 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     ca2:	e0 e6       	ldi	r30, 0x60	; 96
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	82 83       	std	Z+2, r24	; 0x02
     return;
     cae:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     cb0:	80 3b       	cpi	r24, 0xB0	; 176
     cb2:	29 e0       	ldi	r18, 0x09	; 9
     cb4:	92 07       	cpc	r25, r18
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     cb8:	e0 e6       	ldi	r30, 0x60	; 96
     cba:	f6 e0       	ldi	r31, 0x06	; 6
     cbc:	80 e8       	ldi	r24, 0x80	; 128
     cbe:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     cc0:	80 e4       	ldi	r24, 0x40	; 64
     cc2:	82 83       	std	Z+2, r24	; 0x02
     return;
     cc4:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     cc6:	80 3a       	cpi	r24, 0xA0	; 160
     cc8:	9a 40       	sbci	r25, 0x0A	; 10
     cca:	31 f4       	brne	.+12     	; 0xcd8 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     ccc:	e0 e8       	ldi	r30, 0x80	; 128
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	88 e0       	ldi	r24, 0x08	; 8
     cd2:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	82 83       	std	Z+2, r24	; 0x02
     cd8:	08 95       	ret

00000cda <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     cda:	4f 92       	push	r4
     cdc:	5f 92       	push	r5
     cde:	6f 92       	push	r6
     ce0:	7f 92       	push	r7
     ce2:	8f 92       	push	r8
     ce4:	9f 92       	push	r9
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	49 01       	movw	r8, r18
     cfc:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     cfe:	2e 2d       	mov	r18, r14
     d00:	21 70       	andi	r18, 0x01	; 1
     d02:	c0 e1       	ldi	r28, 0x10	; 16
     d04:	d0 e0       	ldi	r29, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <calc_bsel+0x32>
     d08:	d5 95       	asr	r29
     d0a:	c7 95       	ror	r28
     d0c:	2a 95       	dec	r18
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <calc_bsel+0x2e>
  if ( scale < 0 ) {
     d10:	00 23       	and	r16, r16
     d12:	0c f0       	brlt	.+2      	; 0xd16 <calc_bsel+0x3c>
     d14:	38 c0       	rjmp	.+112    	; 0xd86 <calc_bsel+0xac>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     d16:	a5 d2       	rcall	.+1354   	; 0x1262 <__floatunsisf>
     d18:	6b 01       	movw	r12, r22
     d1a:	7c 01       	movw	r14, r24
     d1c:	dd 27       	eor	r29, r29
     d1e:	be 01       	movw	r22, r28
     d20:	dd 0f       	add	r29, r29
     d22:	88 0b       	sbc	r24, r24
     d24:	99 0b       	sbc	r25, r25
     d26:	9f d2       	rcall	.+1342   	; 0x1266 <__floatsisf>
     d28:	2b 01       	movw	r4, r22
     d2a:	3c 01       	movw	r6, r24
     d2c:	c5 01       	movw	r24, r10
     d2e:	b4 01       	movw	r22, r8
     d30:	98 d2       	rcall	.+1328   	; 0x1262 <__floatunsisf>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	c3 01       	movw	r24, r6
     d38:	b2 01       	movw	r22, r4
     d3a:	21 d3       	rcall	.+1602   	; 0x137e <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c7 01       	movw	r24, r14
     d42:	b6 01       	movw	r22, r12
     d44:	fa d1       	rcall	.+1012   	; 0x113a <__divsf3>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	90 d1       	rcall	.+800    	; 0x1070 <__subsf3>
     d50:	6b 01       	movw	r12, r22
     d52:	7c 01       	movw	r14, r24
     d54:	11 27       	eor	r17, r17
     d56:	01 95       	neg	r16
     d58:	0c f4       	brge	.+2      	; 0xd5c <calc_bsel+0x82>
     d5a:	10 95       	com	r17
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <calc_bsel+0x8c>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 95       	dec	r16
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <calc_bsel+0x88>
     d6a:	bc 01       	movw	r22, r24
     d6c:	99 0f       	add	r25, r25
     d6e:	88 0b       	sbc	r24, r24
     d70:	99 0b       	sbc	r25, r25
     d72:	79 d2       	rcall	.+1266   	; 0x1266 <__floatsisf>
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 01       	movw	r22, r12
     d7c:	00 d3       	rcall	.+1536   	; 0x137e <__mulsf3>
     d7e:	62 d3       	rcall	.+1732   	; 0x1444 <round>
     d80:	44 d2       	rcall	.+1160   	; 0x120a <__fixunssfsi>
     d82:	cb 01       	movw	r24, r22
     d84:	34 c0       	rjmp	.+104    	; 0xdee <calc_bsel+0x114>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     d86:	6d d2       	rcall	.+1242   	; 0x1262 <__floatunsisf>
     d88:	6b 01       	movw	r12, r22
     d8a:	7c 01       	movw	r14, r24
     d8c:	ce 01       	movw	r24, r28
     d8e:	99 27       	eor	r25, r25
     d90:	bc 01       	movw	r22, r24
     d92:	99 0f       	add	r25, r25
     d94:	88 0b       	sbc	r24, r24
     d96:	99 0b       	sbc	r25, r25
     d98:	66 d2       	rcall	.+1228   	; 0x1266 <__floatsisf>
     d9a:	2b 01       	movw	r4, r22
     d9c:	3c 01       	movw	r6, r24
     d9e:	c5 01       	movw	r24, r10
     da0:	b4 01       	movw	r22, r8
     da2:	5f d2       	rcall	.+1214   	; 0x1262 <__floatunsisf>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c3 01       	movw	r24, r6
     daa:	b2 01       	movw	r22, r4
     dac:	e8 d2       	rcall	.+1488   	; 0x137e <__mulsf3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	c7 01       	movw	r24, r14
     db4:	b6 01       	movw	r22, r12
     db6:	c1 d1       	rcall	.+898    	; 0x113a <__divsf3>
     db8:	6b 01       	movw	r12, r22
     dba:	7c 01       	movw	r14, r24
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <calc_bsel+0xec>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 95       	dec	r16
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <calc_bsel+0xe8>
     dca:	bc 01       	movw	r22, r24
     dcc:	99 0f       	add	r25, r25
     dce:	88 0b       	sbc	r24, r24
     dd0:	99 0b       	sbc	r25, r25
     dd2:	49 d2       	rcall	.+1170   	; 0x1266 <__floatsisf>
     dd4:	9b 01       	movw	r18, r22
     dd6:	ac 01       	movw	r20, r24
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	ae d1       	rcall	.+860    	; 0x113a <__divsf3>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	44 d1       	rcall	.+648    	; 0x1070 <__subsf3>
     de8:	2d d3       	rcall	.+1626   	; 0x1444 <round>
     dea:	0f d2       	rcall	.+1054   	; 0x120a <__fixunssfsi>
     dec:	cb 01       	movw	r24, r22
  }
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	08 95       	ret

00000e10 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	ef 92       	push	r14
     e22:	0f 93       	push	r16
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	2b 01       	movw	r4, r22
     e2a:	3c 01       	movw	r6, r24
     e2c:	49 01       	movw	r8, r18
     e2e:	5a 01       	movw	r10, r20
     e30:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     e32:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     e34:	ed 2e       	mov	r14, r29
     e36:	0c 2f       	mov	r16, r28
     e38:	a5 01       	movw	r20, r10
     e3a:	94 01       	movw	r18, r8
     e3c:	c3 01       	movw	r24, r6
     e3e:	b2 01       	movw	r22, r4
     e40:	4c df       	rcall	.-360    	; 0xcda <calc_bsel>
     e42:	81 15       	cp	r24, r1
     e44:	90 41       	sbci	r25, 0x10	; 16
     e46:	18 f0       	brcs	.+6      	; 0xe4e <calc_bscale+0x3e>
     e48:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     e4a:	c8 30       	cpi	r28, 0x08	; 8
     e4c:	99 f7       	brne	.-26     	; 0xe34 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     e4e:	8c 2f       	mov	r24, r28
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	0f 91       	pop	r16
     e56:	ef 90       	pop	r14
     e58:	bf 90       	pop	r11
     e5a:	af 90       	pop	r10
     e5c:	9f 90       	pop	r9
     e5e:	8f 90       	pop	r8
     e60:	7f 90       	pop	r7
     e62:	6f 90       	pop	r6
     e64:	5f 90       	pop	r5
     e66:	4f 90       	pop	r4
     e68:	08 95       	ret

00000e6a <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     e6a:	2f 92       	push	r2
     e6c:	3f 92       	push	r3
     e6e:	4f 92       	push	r4
     e70:	5f 92       	push	r5
     e72:	6f 92       	push	r6
     e74:	7f 92       	push	r7
     e76:	8f 92       	push	r8
     e78:	9f 92       	push	r9
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
     e8e:	1b 01       	movw	r2, r22
     e90:	29 01       	movw	r4, r18
     e92:	3a 01       	movw	r6, r20
     e94:	47 01       	movw	r8, r14
     e96:	58 01       	movw	r10, r16
     e98:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     e9a:	0c 2d       	mov	r16, r12
     e9c:	a5 01       	movw	r20, r10
     e9e:	94 01       	movw	r18, r8
     ea0:	c3 01       	movw	r24, r6
     ea2:	b2 01       	movw	r22, r4
     ea4:	b5 df       	rcall	.-150    	; 0xe10 <calc_bscale>
     ea6:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     ea8:	08 2f       	mov	r16, r24
     eaa:	a5 01       	movw	r20, r10
     eac:	94 01       	movw	r18, r8
     eae:	c3 01       	movw	r24, r6
     eb0:	b2 01       	movw	r22, r4
     eb2:	13 df       	rcall	.-474    	; 0xcda <calc_bsel>
     eb4:	f8 2e       	mov	r15, r24
     eb6:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	b1 01       	movw	r22, r2
     ebc:	ce 01       	movw	r24, r28
     ebe:	3c d0       	rcall	.+120    	; 0xf38 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     ec0:	e8 81       	ld	r30, Y
     ec2:	f9 81       	ldd	r31, Y+1	; 0x01
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     ec8:	e8 81       	ld	r30, Y
     eca:	f9 81       	ldd	r31, Y+1	; 0x01
     ecc:	94 81       	ldd	r25, Z+4	; 0x04
     ece:	90 61       	ori	r25, 0x10	; 16
     ed0:	94 83       	std	Z+4, r25	; 0x04
  USART_Tx_Enable(uart->usart);
     ed2:	e8 81       	ld	r30, Y
     ed4:	f9 81       	ldd	r31, Y+1	; 0x01
     ed6:	94 81       	ldd	r25, Z+4	; 0x04
     ed8:	98 60       	ori	r25, 0x08	; 8
     eda:	94 83       	std	Z+4, r25	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     edc:	e8 81       	ld	r30, Y
     ede:	f9 81       	ldd	r31, Y+1	; 0x01
     ee0:	23 81       	ldd	r18, Z+3	; 0x03
     ee2:	2f 7c       	andi	r18, 0xCF	; 207
     ee4:	20 61       	ori	r18, 0x10	; 16
     ee6:	23 83       	std	Z+3, r18	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     ee8:	e8 81       	ld	r30, Y
     eea:	f9 81       	ldd	r31, Y+1	; 0x01
     eec:	f6 82       	std	Z+6, r15	; 0x06
     eee:	e8 81       	ld	r30, Y
     ef0:	f9 81       	ldd	r31, Y+1	; 0x01
     ef2:	12 95       	swap	r17
     ef4:	10 7f       	andi	r17, 0xF0	; 240
     ef6:	10 2b       	or	r17, r16
     ef8:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
     efa:	88 81       	ld	r24, Y
     efc:	99 81       	ldd	r25, Y+1	; 0x01
     efe:	b7 de       	rcall	.-658    	; 0xc6e <set_usart_txrx_direction>
}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	8f 90       	pop	r8
     f16:	7f 90       	pop	r7
     f18:	6f 90       	pop	r6
     f1a:	5f 90       	pop	r5
     f1c:	4f 90       	pop	r4
     f1e:	3f 90       	pop	r3
     f20:	2f 90       	pop	r2
     f22:	08 95       	ret

00000f24 <DebugPrint>:
 * Print a string of information on the UART C1 (DEBUG) interface.
 * @param   *debugData	String of information
 * @param   value		Temporarily string value to add a cariage return and new line feed
 */
void DebugPrint (char *debugData){
	uart_puts(&uartC1, debugData);
     f24:	bc 01       	movw	r22, r24
     f26:	86 eb       	ldi	r24, 0xB6	; 182
     f28:	92 e2       	ldi	r25, 0x22	; 34
     f2a:	8c ce       	rjmp	.-744    	; 0xc44 <uart_puts>
     f2c:	08 95       	ret

00000f2e <Command>:
/**
 * Sends a 'command' to the UART C0 (COMMAND) interface
 * @param   *command	Command
 */
void Command (char *command){
    uart_puts(&uartC0, command);
     f2e:	bc 01       	movw	r22, r24
     f30:	8f ea       	ldi	r24, 0xAF	; 175
     f32:	90 e2       	ldi	r25, 0x20	; 32
     f34:	87 ce       	rjmp	.-754    	; 0xc44 <uart_puts>
     f36:	08 95       	ret

00000f38 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     f38:	fc 01       	movw	r30, r24
     f3a:	60 83       	st	Z, r22
     f3c:	71 83       	std	Z+1, r23	; 0x01
     f3e:	42 83       	std	Z+2, r20	; 0x02
     f40:	ec 5f       	subi	r30, 0xFC	; 252
     f42:	fd 4f       	sbci	r31, 0xFD	; 253
     f44:	10 82       	st	Z, r1
     f46:	31 97       	sbiw	r30, 0x01	; 1
     f48:	10 82       	st	Z, r1
     f4a:	33 96       	adiw	r30, 0x03	; 3
     f4c:	10 82       	st	Z, r1
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	10 82       	st	Z, r1
     f52:	08 95       	ret

00000f54 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     f54:	fc 01       	movw	r30, r24
     f56:	eb 5f       	subi	r30, 0xFB	; 251
     f58:	fd 4f       	sbci	r31, 0xFD	; 253
     f5a:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     f5c:	31 96       	adiw	r30, 0x01	; 1
     f5e:	30 81       	ld	r19, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	92 0f       	add	r25, r18
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	93 13       	cpse	r25, r19
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <USART_TXBuffer_FreeSpace+0x18>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
}
     f6c:	08 95       	ret

00000f6e <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     f74:	dc 01       	movw	r26, r24
     f76:	ab 5f       	subi	r26, 0xFB	; 251
     f78:	bd 4f       	sbci	r27, 0xFD	; 253
     f7a:	9c 91       	ld	r25, X
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     f7c:	11 96       	adiw	r26, 0x01	; 1
     f7e:	2c 91       	ld	r18, X
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     f80:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	92 13       	cpse	r25, r18
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <USART_TXBuffer_PutByte+0x1c>
     f88:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     f8a:	88 23       	and	r24, r24
     f8c:	b1 f0       	breq	.+44     	; 0xfba <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     f8e:	ef 01       	movw	r28, r30
     f90:	cb 5f       	subi	r28, 0xFB	; 251
     f92:	dd 4f       	sbci	r29, 0xFD	; 253
     f94:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
     f96:	df 01       	movw	r26, r30
     f98:	a9 0f       	add	r26, r25
     f9a:	b1 1d       	adc	r27, r1
     f9c:	ad 5f       	subi	r26, 0xFD	; 253
     f9e:	be 4f       	sbci	r27, 0xFE	; 254
     fa0:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     fa2:	9f 5f       	subi	r25, 0xFF	; 255
     fa4:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     fa6:	a0 81       	ld	r26, Z
     fa8:	b1 81       	ldd	r27, Z+1	; 0x01
     faa:	13 96       	adiw	r26, 0x03	; 3
     fac:	9c 91       	ld	r25, X
     fae:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     fb0:	9c 7f       	andi	r25, 0xFC	; 252
     fb2:	22 81       	ldd	r18, Z+2	; 0x02
     fb4:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     fb6:	13 96       	adiw	r26, 0x03	; 3
     fb8:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     fc0:	fc 01       	movw	r30, r24
     fc2:	ed 5f       	subi	r30, 0xFD	; 253
     fc4:	fd 4f       	sbci	r31, 0xFD	; 253
     fc6:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     fc8:	31 96       	adiw	r30, 0x01	; 1
     fca:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	29 13       	cpse	r18, r25
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <USART_RXBufferData_Available+0x14>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
}
     fd4:	08 95       	ret

00000fd6 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     fd6:	fc 01       	movw	r30, r24
     fd8:	ec 5f       	subi	r30, 0xFC	; 252
     fda:	fd 4f       	sbci	r31, 0xFD	; 253
     fdc:	20 81       	ld	r18, Z
     fde:	dc 01       	movw	r26, r24
     fe0:	a2 0f       	add	r26, r18
     fe2:	b1 1d       	adc	r27, r1
     fe4:	13 96       	adiw	r26, 0x03	; 3
     fe6:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     fe8:	90 81       	ld	r25, Z
     fea:	9f 5f       	subi	r25, 0xFF	; 255
     fec:	90 83       	st	Z, r25

	return ans;
}
     fee:	08 95       	ret

00000ff0 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     ff0:	fc 01       	movw	r30, r24
     ff2:	ed 5f       	subi	r30, 0xFD	; 253
     ff4:	fd 4f       	sbci	r31, 0xFD	; 253
     ff6:	20 81       	ld	r18, Z
     ff8:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     ffa:	31 96       	adiw	r30, 0x01	; 1
     ffc:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     ffe:	dc 01       	movw	r26, r24
    1000:	ed 91       	ld	r30, X+
    1002:	fc 91       	ld	r31, X
    1004:	11 97       	sbiw	r26, 0x01	; 1
    1006:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    1008:	23 17       	cp	r18, r19
    100a:	59 f0       	breq	.+22     	; 0x1022 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    100c:	fc 01       	movw	r30, r24
    100e:	ed 5f       	subi	r30, 0xFD	; 253
    1010:	fd 4f       	sbci	r31, 0xFD	; 253
    1012:	30 81       	ld	r19, Z
    1014:	a3 0f       	add	r26, r19
    1016:	b1 1d       	adc	r27, r1
    1018:	13 96       	adiw	r26, 0x03	; 3
    101a:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    101c:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    1022:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    1024:	08 95       	ret

00001026 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    102a:	fc 01       	movw	r30, r24
    102c:	ea 5f       	subi	r30, 0xFA	; 250
    102e:	fd 4f       	sbci	r31, 0xFD	; 253
    1030:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	30 81       	ld	r19, Z
    1036:	32 13       	cpse	r19, r18
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    103a:	dc 01       	movw	r26, r24
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1042:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1044:	83 83       	std	Z+3, r24	; 0x03
    1046:	11 c0       	rjmp	.+34     	; 0x106a <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    1048:	fc 01       	movw	r30, r24
    104a:	ea 5f       	subi	r30, 0xFA	; 250
    104c:	fd 4f       	sbci	r31, 0xFD	; 253
    104e:	20 81       	ld	r18, Z
    1050:	dc 01       	movw	r26, r24
    1052:	a2 0f       	add	r26, r18
    1054:	b1 1d       	adc	r27, r1
    1056:	ad 5f       	subi	r26, 0xFD	; 253
    1058:	be 4f       	sbci	r27, 0xFE	; 254
    105a:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    105c:	ec 01       	movw	r28, r24
    105e:	a8 81       	ld	r26, Y
    1060:	b9 81       	ldd	r27, Y+1	; 0x01
    1062:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
	}
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <__subsf3>:
    1070:	50 58       	subi	r21, 0x80	; 128

00001072 <__addsf3>:
    1072:	bb 27       	eor	r27, r27
    1074:	aa 27       	eor	r26, r26
    1076:	0e d0       	rcall	.+28     	; 0x1094 <__addsf3x>
    1078:	48 c1       	rjmp	.+656    	; 0x130a <__fp_round>
    107a:	39 d1       	rcall	.+626    	; 0x12ee <__fp_pscA>
    107c:	30 f0       	brcs	.+12     	; 0x108a <__addsf3+0x18>
    107e:	3e d1       	rcall	.+636    	; 0x12fc <__fp_pscB>
    1080:	20 f0       	brcs	.+8      	; 0x108a <__addsf3+0x18>
    1082:	31 f4       	brne	.+12     	; 0x1090 <__addsf3+0x1e>
    1084:	9f 3f       	cpi	r25, 0xFF	; 255
    1086:	11 f4       	brne	.+4      	; 0x108c <__addsf3+0x1a>
    1088:	1e f4       	brtc	.+6      	; 0x1090 <__addsf3+0x1e>
    108a:	2e c1       	rjmp	.+604    	; 0x12e8 <__fp_nan>
    108c:	0e f4       	brtc	.+2      	; 0x1090 <__addsf3+0x1e>
    108e:	e0 95       	com	r30
    1090:	e7 fb       	bst	r30, 7
    1092:	24 c1       	rjmp	.+584    	; 0x12dc <__fp_inf>

00001094 <__addsf3x>:
    1094:	e9 2f       	mov	r30, r25
    1096:	4a d1       	rcall	.+660    	; 0x132c <__fp_split3>
    1098:	80 f3       	brcs	.-32     	; 0x107a <__addsf3+0x8>
    109a:	ba 17       	cp	r27, r26
    109c:	62 07       	cpc	r22, r18
    109e:	73 07       	cpc	r23, r19
    10a0:	84 07       	cpc	r24, r20
    10a2:	95 07       	cpc	r25, r21
    10a4:	18 f0       	brcs	.+6      	; 0x10ac <__addsf3x+0x18>
    10a6:	71 f4       	brne	.+28     	; 0x10c4 <__addsf3x+0x30>
    10a8:	9e f5       	brtc	.+102    	; 0x1110 <__addsf3x+0x7c>
    10aa:	62 c1       	rjmp	.+708    	; 0x1370 <__fp_zero>
    10ac:	0e f4       	brtc	.+2      	; 0x10b0 <__addsf3x+0x1c>
    10ae:	e0 95       	com	r30
    10b0:	0b 2e       	mov	r0, r27
    10b2:	ba 2f       	mov	r27, r26
    10b4:	a0 2d       	mov	r26, r0
    10b6:	0b 01       	movw	r0, r22
    10b8:	b9 01       	movw	r22, r18
    10ba:	90 01       	movw	r18, r0
    10bc:	0c 01       	movw	r0, r24
    10be:	ca 01       	movw	r24, r20
    10c0:	a0 01       	movw	r20, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	ff 27       	eor	r31, r31
    10c6:	59 1b       	sub	r21, r25
    10c8:	99 f0       	breq	.+38     	; 0x10f0 <__addsf3x+0x5c>
    10ca:	59 3f       	cpi	r21, 0xF9	; 249
    10cc:	50 f4       	brcc	.+20     	; 0x10e2 <__addsf3x+0x4e>
    10ce:	50 3e       	cpi	r21, 0xE0	; 224
    10d0:	68 f1       	brcs	.+90     	; 0x112c <__addsf3x+0x98>
    10d2:	1a 16       	cp	r1, r26
    10d4:	f0 40       	sbci	r31, 0x00	; 0
    10d6:	a2 2f       	mov	r26, r18
    10d8:	23 2f       	mov	r18, r19
    10da:	34 2f       	mov	r19, r20
    10dc:	44 27       	eor	r20, r20
    10de:	58 5f       	subi	r21, 0xF8	; 248
    10e0:	f3 cf       	rjmp	.-26     	; 0x10c8 <__addsf3x+0x34>
    10e2:	46 95       	lsr	r20
    10e4:	37 95       	ror	r19
    10e6:	27 95       	ror	r18
    10e8:	a7 95       	ror	r26
    10ea:	f0 40       	sbci	r31, 0x00	; 0
    10ec:	53 95       	inc	r21
    10ee:	c9 f7       	brne	.-14     	; 0x10e2 <__addsf3x+0x4e>
    10f0:	7e f4       	brtc	.+30     	; 0x1110 <__addsf3x+0x7c>
    10f2:	1f 16       	cp	r1, r31
    10f4:	ba 0b       	sbc	r27, r26
    10f6:	62 0b       	sbc	r22, r18
    10f8:	73 0b       	sbc	r23, r19
    10fa:	84 0b       	sbc	r24, r20
    10fc:	ba f0       	brmi	.+46     	; 0x112c <__addsf3x+0x98>
    10fe:	91 50       	subi	r25, 0x01	; 1
    1100:	a1 f0       	breq	.+40     	; 0x112a <__addsf3x+0x96>
    1102:	ff 0f       	add	r31, r31
    1104:	bb 1f       	adc	r27, r27
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	c2 f7       	brpl	.-16     	; 0x10fe <__addsf3x+0x6a>
    110e:	0e c0       	rjmp	.+28     	; 0x112c <__addsf3x+0x98>
    1110:	ba 0f       	add	r27, r26
    1112:	62 1f       	adc	r22, r18
    1114:	73 1f       	adc	r23, r19
    1116:	84 1f       	adc	r24, r20
    1118:	48 f4       	brcc	.+18     	; 0x112c <__addsf3x+0x98>
    111a:	87 95       	ror	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f7 95       	ror	r31
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	08 f0       	brcs	.+2      	; 0x112a <__addsf3x+0x96>
    1128:	b3 cf       	rjmp	.-154    	; 0x1090 <__addsf3+0x1e>
    112a:	93 95       	inc	r25
    112c:	88 0f       	add	r24, r24
    112e:	08 f0       	brcs	.+2      	; 0x1132 <__addsf3x+0x9e>
    1130:	99 27       	eor	r25, r25
    1132:	ee 0f       	add	r30, r30
    1134:	97 95       	ror	r25
    1136:	87 95       	ror	r24
    1138:	08 95       	ret

0000113a <__divsf3>:
    113a:	0c d0       	rcall	.+24     	; 0x1154 <__divsf3x>
    113c:	e6 c0       	rjmp	.+460    	; 0x130a <__fp_round>
    113e:	de d0       	rcall	.+444    	; 0x12fc <__fp_pscB>
    1140:	40 f0       	brcs	.+16     	; 0x1152 <__divsf3+0x18>
    1142:	d5 d0       	rcall	.+426    	; 0x12ee <__fp_pscA>
    1144:	30 f0       	brcs	.+12     	; 0x1152 <__divsf3+0x18>
    1146:	21 f4       	brne	.+8      	; 0x1150 <__divsf3+0x16>
    1148:	5f 3f       	cpi	r21, 0xFF	; 255
    114a:	19 f0       	breq	.+6      	; 0x1152 <__divsf3+0x18>
    114c:	c7 c0       	rjmp	.+398    	; 0x12dc <__fp_inf>
    114e:	51 11       	cpse	r21, r1
    1150:	10 c1       	rjmp	.+544    	; 0x1372 <__fp_szero>
    1152:	ca c0       	rjmp	.+404    	; 0x12e8 <__fp_nan>

00001154 <__divsf3x>:
    1154:	eb d0       	rcall	.+470    	; 0x132c <__fp_split3>
    1156:	98 f3       	brcs	.-26     	; 0x113e <__divsf3+0x4>

00001158 <__divsf3_pse>:
    1158:	99 23       	and	r25, r25
    115a:	c9 f3       	breq	.-14     	; 0x114e <__divsf3+0x14>
    115c:	55 23       	and	r21, r21
    115e:	b1 f3       	breq	.-20     	; 0x114c <__divsf3+0x12>
    1160:	95 1b       	sub	r25, r21
    1162:	55 0b       	sbc	r21, r21
    1164:	bb 27       	eor	r27, r27
    1166:	aa 27       	eor	r26, r26
    1168:	62 17       	cp	r22, r18
    116a:	73 07       	cpc	r23, r19
    116c:	84 07       	cpc	r24, r20
    116e:	38 f0       	brcs	.+14     	; 0x117e <__divsf3_pse+0x26>
    1170:	9f 5f       	subi	r25, 0xFF	; 255
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	44 1f       	adc	r20, r20
    117a:	aa 1f       	adc	r26, r26
    117c:	a9 f3       	breq	.-22     	; 0x1168 <__divsf3_pse+0x10>
    117e:	33 d0       	rcall	.+102    	; 0x11e6 <__divsf3_pse+0x8e>
    1180:	0e 2e       	mov	r0, r30
    1182:	3a f0       	brmi	.+14     	; 0x1192 <__divsf3_pse+0x3a>
    1184:	e0 e8       	ldi	r30, 0x80	; 128
    1186:	30 d0       	rcall	.+96     	; 0x11e8 <__divsf3_pse+0x90>
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	50 40       	sbci	r21, 0x00	; 0
    118c:	e6 95       	lsr	r30
    118e:	00 1c       	adc	r0, r0
    1190:	ca f7       	brpl	.-14     	; 0x1184 <__divsf3_pse+0x2c>
    1192:	29 d0       	rcall	.+82     	; 0x11e6 <__divsf3_pse+0x8e>
    1194:	fe 2f       	mov	r31, r30
    1196:	27 d0       	rcall	.+78     	; 0x11e6 <__divsf3_pse+0x8e>
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	bb 1f       	adc	r27, r27
    11a0:	26 17       	cp	r18, r22
    11a2:	37 07       	cpc	r19, r23
    11a4:	48 07       	cpc	r20, r24
    11a6:	ab 07       	cpc	r26, r27
    11a8:	b0 e8       	ldi	r27, 0x80	; 128
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__divsf3_pse+0x56>
    11ac:	bb 0b       	sbc	r27, r27
    11ae:	80 2d       	mov	r24, r0
    11b0:	bf 01       	movw	r22, r30
    11b2:	ff 27       	eor	r31, r31
    11b4:	93 58       	subi	r25, 0x83	; 131
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	2a f0       	brmi	.+10     	; 0x11c4 <__divsf3_pse+0x6c>
    11ba:	9e 3f       	cpi	r25, 0xFE	; 254
    11bc:	51 05       	cpc	r21, r1
    11be:	68 f0       	brcs	.+26     	; 0x11da <__divsf3_pse+0x82>
    11c0:	8d c0       	rjmp	.+282    	; 0x12dc <__fp_inf>
    11c2:	d7 c0       	rjmp	.+430    	; 0x1372 <__fp_szero>
    11c4:	5f 3f       	cpi	r21, 0xFF	; 255
    11c6:	ec f3       	brlt	.-6      	; 0x11c2 <__divsf3_pse+0x6a>
    11c8:	98 3e       	cpi	r25, 0xE8	; 232
    11ca:	dc f3       	brlt	.-10     	; 0x11c2 <__divsf3_pse+0x6a>
    11cc:	86 95       	lsr	r24
    11ce:	77 95       	ror	r23
    11d0:	67 95       	ror	r22
    11d2:	b7 95       	ror	r27
    11d4:	f7 95       	ror	r31
    11d6:	9f 5f       	subi	r25, 0xFF	; 255
    11d8:	c9 f7       	brne	.-14     	; 0x11cc <__divsf3_pse+0x74>
    11da:	88 0f       	add	r24, r24
    11dc:	91 1d       	adc	r25, r1
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret
    11e6:	e1 e0       	ldi	r30, 0x01	; 1
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	bb 1f       	adc	r27, r27
    11f0:	62 17       	cp	r22, r18
    11f2:	73 07       	cpc	r23, r19
    11f4:	84 07       	cpc	r24, r20
    11f6:	ba 07       	cpc	r27, r26
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <__divsf3_pse+0xaa>
    11fa:	62 1b       	sub	r22, r18
    11fc:	73 0b       	sbc	r23, r19
    11fe:	84 0b       	sbc	r24, r20
    1200:	ba 0b       	sbc	r27, r26
    1202:	ee 1f       	adc	r30, r30
    1204:	88 f7       	brcc	.-30     	; 0x11e8 <__divsf3_pse+0x90>
    1206:	e0 95       	com	r30
    1208:	08 95       	ret

0000120a <__fixunssfsi>:
    120a:	98 d0       	rcall	.+304    	; 0x133c <__fp_splitA>
    120c:	88 f0       	brcs	.+34     	; 0x1230 <__fixunssfsi+0x26>
    120e:	9f 57       	subi	r25, 0x7F	; 127
    1210:	90 f0       	brcs	.+36     	; 0x1236 <__fixunssfsi+0x2c>
    1212:	b9 2f       	mov	r27, r25
    1214:	99 27       	eor	r25, r25
    1216:	b7 51       	subi	r27, 0x17	; 23
    1218:	a0 f0       	brcs	.+40     	; 0x1242 <__fixunssfsi+0x38>
    121a:	d1 f0       	breq	.+52     	; 0x1250 <__fixunssfsi+0x46>
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	1a f0       	brmi	.+6      	; 0x122c <__fixunssfsi+0x22>
    1226:	ba 95       	dec	r27
    1228:	c9 f7       	brne	.-14     	; 0x121c <__fixunssfsi+0x12>
    122a:	12 c0       	rjmp	.+36     	; 0x1250 <__fixunssfsi+0x46>
    122c:	b1 30       	cpi	r27, 0x01	; 1
    122e:	81 f0       	breq	.+32     	; 0x1250 <__fixunssfsi+0x46>
    1230:	9f d0       	rcall	.+318    	; 0x1370 <__fp_zero>
    1232:	b1 e0       	ldi	r27, 0x01	; 1
    1234:	08 95       	ret
    1236:	9c c0       	rjmp	.+312    	; 0x1370 <__fp_zero>
    1238:	67 2f       	mov	r22, r23
    123a:	78 2f       	mov	r23, r24
    123c:	88 27       	eor	r24, r24
    123e:	b8 5f       	subi	r27, 0xF8	; 248
    1240:	39 f0       	breq	.+14     	; 0x1250 <__fixunssfsi+0x46>
    1242:	b9 3f       	cpi	r27, 0xF9	; 249
    1244:	cc f3       	brlt	.-14     	; 0x1238 <__fixunssfsi+0x2e>
    1246:	86 95       	lsr	r24
    1248:	77 95       	ror	r23
    124a:	67 95       	ror	r22
    124c:	b3 95       	inc	r27
    124e:	d9 f7       	brne	.-10     	; 0x1246 <__fixunssfsi+0x3c>
    1250:	3e f4       	brtc	.+14     	; 0x1260 <__fixunssfsi+0x56>
    1252:	90 95       	com	r25
    1254:	80 95       	com	r24
    1256:	70 95       	com	r23
    1258:	61 95       	neg	r22
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	8f 4f       	sbci	r24, 0xFF	; 255
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	08 95       	ret

00001262 <__floatunsisf>:
    1262:	e8 94       	clt
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <__floatsisf+0x12>

00001266 <__floatsisf>:
    1266:	97 fb       	bst	r25, 7
    1268:	3e f4       	brtc	.+14     	; 0x1278 <__floatsisf+0x12>
    126a:	90 95       	com	r25
    126c:	80 95       	com	r24
    126e:	70 95       	com	r23
    1270:	61 95       	neg	r22
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	99 23       	and	r25, r25
    127a:	a9 f0       	breq	.+42     	; 0x12a6 <__floatsisf+0x40>
    127c:	f9 2f       	mov	r31, r25
    127e:	96 e9       	ldi	r25, 0x96	; 150
    1280:	bb 27       	eor	r27, r27
    1282:	93 95       	inc	r25
    1284:	f6 95       	lsr	r31
    1286:	87 95       	ror	r24
    1288:	77 95       	ror	r23
    128a:	67 95       	ror	r22
    128c:	b7 95       	ror	r27
    128e:	f1 11       	cpse	r31, r1
    1290:	f8 cf       	rjmp	.-16     	; 0x1282 <__floatsisf+0x1c>
    1292:	fa f4       	brpl	.+62     	; 0x12d2 <__floatsisf+0x6c>
    1294:	bb 0f       	add	r27, r27
    1296:	11 f4       	brne	.+4      	; 0x129c <__floatsisf+0x36>
    1298:	60 ff       	sbrs	r22, 0
    129a:	1b c0       	rjmp	.+54     	; 0x12d2 <__floatsisf+0x6c>
    129c:	6f 5f       	subi	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	8f 4f       	sbci	r24, 0xFF	; 255
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	16 c0       	rjmp	.+44     	; 0x12d2 <__floatsisf+0x6c>
    12a6:	88 23       	and	r24, r24
    12a8:	11 f0       	breq	.+4      	; 0x12ae <__floatsisf+0x48>
    12aa:	96 e9       	ldi	r25, 0x96	; 150
    12ac:	11 c0       	rjmp	.+34     	; 0x12d0 <__floatsisf+0x6a>
    12ae:	77 23       	and	r23, r23
    12b0:	21 f0       	breq	.+8      	; 0x12ba <__floatsisf+0x54>
    12b2:	9e e8       	ldi	r25, 0x8E	; 142
    12b4:	87 2f       	mov	r24, r23
    12b6:	76 2f       	mov	r23, r22
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <__floatsisf+0x5e>
    12ba:	66 23       	and	r22, r22
    12bc:	71 f0       	breq	.+28     	; 0x12da <__floatsisf+0x74>
    12be:	96 e8       	ldi	r25, 0x86	; 134
    12c0:	86 2f       	mov	r24, r22
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	2a f0       	brmi	.+10     	; 0x12d2 <__floatsisf+0x6c>
    12c8:	9a 95       	dec	r25
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	da f7       	brpl	.-10     	; 0x12c8 <__floatsisf+0x62>
    12d2:	88 0f       	add	r24, r24
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	97 f9       	bld	r25, 7
    12da:	08 95       	ret

000012dc <__fp_inf>:
    12dc:	97 f9       	bld	r25, 7
    12de:	9f 67       	ori	r25, 0x7F	; 127
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	08 95       	ret

000012e8 <__fp_nan>:
    12e8:	9f ef       	ldi	r25, 0xFF	; 255
    12ea:	80 ec       	ldi	r24, 0xC0	; 192
    12ec:	08 95       	ret

000012ee <__fp_pscA>:
    12ee:	00 24       	eor	r0, r0
    12f0:	0a 94       	dec	r0
    12f2:	16 16       	cp	r1, r22
    12f4:	17 06       	cpc	r1, r23
    12f6:	18 06       	cpc	r1, r24
    12f8:	09 06       	cpc	r0, r25
    12fa:	08 95       	ret

000012fc <__fp_pscB>:
    12fc:	00 24       	eor	r0, r0
    12fe:	0a 94       	dec	r0
    1300:	12 16       	cp	r1, r18
    1302:	13 06       	cpc	r1, r19
    1304:	14 06       	cpc	r1, r20
    1306:	05 06       	cpc	r0, r21
    1308:	08 95       	ret

0000130a <__fp_round>:
    130a:	09 2e       	mov	r0, r25
    130c:	03 94       	inc	r0
    130e:	00 0c       	add	r0, r0
    1310:	11 f4       	brne	.+4      	; 0x1316 <__fp_round+0xc>
    1312:	88 23       	and	r24, r24
    1314:	52 f0       	brmi	.+20     	; 0x132a <__fp_round+0x20>
    1316:	bb 0f       	add	r27, r27
    1318:	40 f4       	brcc	.+16     	; 0x132a <__fp_round+0x20>
    131a:	bf 2b       	or	r27, r31
    131c:	11 f4       	brne	.+4      	; 0x1322 <__fp_round+0x18>
    131e:	60 ff       	sbrs	r22, 0
    1320:	04 c0       	rjmp	.+8      	; 0x132a <__fp_round+0x20>
    1322:	6f 5f       	subi	r22, 0xFF	; 255
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	8f 4f       	sbci	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	08 95       	ret

0000132c <__fp_split3>:
    132c:	57 fd       	sbrc	r21, 7
    132e:	90 58       	subi	r25, 0x80	; 128
    1330:	44 0f       	add	r20, r20
    1332:	55 1f       	adc	r21, r21
    1334:	59 f0       	breq	.+22     	; 0x134c <__fp_splitA+0x10>
    1336:	5f 3f       	cpi	r21, 0xFF	; 255
    1338:	71 f0       	breq	.+28     	; 0x1356 <__fp_splitA+0x1a>
    133a:	47 95       	ror	r20

0000133c <__fp_splitA>:
    133c:	88 0f       	add	r24, r24
    133e:	97 fb       	bst	r25, 7
    1340:	99 1f       	adc	r25, r25
    1342:	61 f0       	breq	.+24     	; 0x135c <__fp_splitA+0x20>
    1344:	9f 3f       	cpi	r25, 0xFF	; 255
    1346:	79 f0       	breq	.+30     	; 0x1366 <__fp_splitA+0x2a>
    1348:	87 95       	ror	r24
    134a:	08 95       	ret
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	14 06       	cpc	r1, r20
    1352:	55 1f       	adc	r21, r21
    1354:	f2 cf       	rjmp	.-28     	; 0x133a <__fp_split3+0xe>
    1356:	46 95       	lsr	r20
    1358:	f1 df       	rcall	.-30     	; 0x133c <__fp_splitA>
    135a:	08 c0       	rjmp	.+16     	; 0x136c <__fp_splitA+0x30>
    135c:	16 16       	cp	r1, r22
    135e:	17 06       	cpc	r1, r23
    1360:	18 06       	cpc	r1, r24
    1362:	99 1f       	adc	r25, r25
    1364:	f1 cf       	rjmp	.-30     	; 0x1348 <__fp_splitA+0xc>
    1366:	86 95       	lsr	r24
    1368:	71 05       	cpc	r23, r1
    136a:	61 05       	cpc	r22, r1
    136c:	08 94       	sec
    136e:	08 95       	ret

00001370 <__fp_zero>:
    1370:	e8 94       	clt

00001372 <__fp_szero>:
    1372:	bb 27       	eor	r27, r27
    1374:	66 27       	eor	r22, r22
    1376:	77 27       	eor	r23, r23
    1378:	cb 01       	movw	r24, r22
    137a:	97 f9       	bld	r25, 7
    137c:	08 95       	ret

0000137e <__mulsf3>:
    137e:	0b d0       	rcall	.+22     	; 0x1396 <__mulsf3x>
    1380:	c4 cf       	rjmp	.-120    	; 0x130a <__fp_round>
    1382:	b5 df       	rcall	.-150    	; 0x12ee <__fp_pscA>
    1384:	28 f0       	brcs	.+10     	; 0x1390 <__mulsf3+0x12>
    1386:	ba df       	rcall	.-140    	; 0x12fc <__fp_pscB>
    1388:	18 f0       	brcs	.+6      	; 0x1390 <__mulsf3+0x12>
    138a:	95 23       	and	r25, r21
    138c:	09 f0       	breq	.+2      	; 0x1390 <__mulsf3+0x12>
    138e:	a6 cf       	rjmp	.-180    	; 0x12dc <__fp_inf>
    1390:	ab cf       	rjmp	.-170    	; 0x12e8 <__fp_nan>
    1392:	11 24       	eor	r1, r1
    1394:	ee cf       	rjmp	.-36     	; 0x1372 <__fp_szero>

00001396 <__mulsf3x>:
    1396:	ca df       	rcall	.-108    	; 0x132c <__fp_split3>
    1398:	a0 f3       	brcs	.-24     	; 0x1382 <__mulsf3+0x4>

0000139a <__mulsf3_pse>:
    139a:	95 9f       	mul	r25, r21
    139c:	d1 f3       	breq	.-12     	; 0x1392 <__mulsf3+0x14>
    139e:	95 0f       	add	r25, r21
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	55 1f       	adc	r21, r21
    13a4:	62 9f       	mul	r22, r18
    13a6:	f0 01       	movw	r30, r0
    13a8:	72 9f       	mul	r23, r18
    13aa:	bb 27       	eor	r27, r27
    13ac:	f0 0d       	add	r31, r0
    13ae:	b1 1d       	adc	r27, r1
    13b0:	63 9f       	mul	r22, r19
    13b2:	aa 27       	eor	r26, r26
    13b4:	f0 0d       	add	r31, r0
    13b6:	b1 1d       	adc	r27, r1
    13b8:	aa 1f       	adc	r26, r26
    13ba:	64 9f       	mul	r22, r20
    13bc:	66 27       	eor	r22, r22
    13be:	b0 0d       	add	r27, r0
    13c0:	a1 1d       	adc	r26, r1
    13c2:	66 1f       	adc	r22, r22
    13c4:	82 9f       	mul	r24, r18
    13c6:	22 27       	eor	r18, r18
    13c8:	b0 0d       	add	r27, r0
    13ca:	a1 1d       	adc	r26, r1
    13cc:	62 1f       	adc	r22, r18
    13ce:	73 9f       	mul	r23, r19
    13d0:	b0 0d       	add	r27, r0
    13d2:	a1 1d       	adc	r26, r1
    13d4:	62 1f       	adc	r22, r18
    13d6:	83 9f       	mul	r24, r19
    13d8:	a0 0d       	add	r26, r0
    13da:	61 1d       	adc	r22, r1
    13dc:	22 1f       	adc	r18, r18
    13de:	74 9f       	mul	r23, r20
    13e0:	33 27       	eor	r19, r19
    13e2:	a0 0d       	add	r26, r0
    13e4:	61 1d       	adc	r22, r1
    13e6:	23 1f       	adc	r18, r19
    13e8:	84 9f       	mul	r24, r20
    13ea:	60 0d       	add	r22, r0
    13ec:	21 1d       	adc	r18, r1
    13ee:	82 2f       	mov	r24, r18
    13f0:	76 2f       	mov	r23, r22
    13f2:	6a 2f       	mov	r22, r26
    13f4:	11 24       	eor	r1, r1
    13f6:	9f 57       	subi	r25, 0x7F	; 127
    13f8:	50 40       	sbci	r21, 0x00	; 0
    13fa:	8a f0       	brmi	.+34     	; 0x141e <__mulsf3_pse+0x84>
    13fc:	e1 f0       	breq	.+56     	; 0x1436 <__mulsf3_pse+0x9c>
    13fe:	88 23       	and	r24, r24
    1400:	4a f0       	brmi	.+18     	; 0x1414 <__mulsf3_pse+0x7a>
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	bb 1f       	adc	r27, r27
    1408:	66 1f       	adc	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	91 50       	subi	r25, 0x01	; 1
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	a9 f7       	brne	.-22     	; 0x13fe <__mulsf3_pse+0x64>
    1414:	9e 3f       	cpi	r25, 0xFE	; 254
    1416:	51 05       	cpc	r21, r1
    1418:	70 f0       	brcs	.+28     	; 0x1436 <__mulsf3_pse+0x9c>
    141a:	60 cf       	rjmp	.-320    	; 0x12dc <__fp_inf>
    141c:	aa cf       	rjmp	.-172    	; 0x1372 <__fp_szero>
    141e:	5f 3f       	cpi	r21, 0xFF	; 255
    1420:	ec f3       	brlt	.-6      	; 0x141c <__mulsf3_pse+0x82>
    1422:	98 3e       	cpi	r25, 0xE8	; 232
    1424:	dc f3       	brlt	.-10     	; 0x141c <__mulsf3_pse+0x82>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b7 95       	ror	r27
    142e:	f7 95       	ror	r31
    1430:	e7 95       	ror	r30
    1432:	9f 5f       	subi	r25, 0xFF	; 255
    1434:	c1 f7       	brne	.-16     	; 0x1426 <__mulsf3_pse+0x8c>
    1436:	fe 2b       	or	r31, r30
    1438:	88 0f       	add	r24, r24
    143a:	91 1d       	adc	r25, r1
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	97 f9       	bld	r25, 7
    1442:	08 95       	ret

00001444 <round>:
    1444:	7b df       	rcall	.-266    	; 0x133c <__fp_splitA>
    1446:	e0 f0       	brcs	.+56     	; 0x1480 <round+0x3c>
    1448:	9e 37       	cpi	r25, 0x7E	; 126
    144a:	d8 f0       	brcs	.+54     	; 0x1482 <round+0x3e>
    144c:	96 39       	cpi	r25, 0x96	; 150
    144e:	b8 f4       	brcc	.+46     	; 0x147e <round+0x3a>
    1450:	9e 38       	cpi	r25, 0x8E	; 142
    1452:	48 f4       	brcc	.+18     	; 0x1466 <round+0x22>
    1454:	67 2f       	mov	r22, r23
    1456:	78 2f       	mov	r23, r24
    1458:	88 27       	eor	r24, r24
    145a:	98 5f       	subi	r25, 0xF8	; 248
    145c:	f9 cf       	rjmp	.-14     	; 0x1450 <round+0xc>
    145e:	86 95       	lsr	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	93 95       	inc	r25
    1466:	95 39       	cpi	r25, 0x95	; 149
    1468:	d0 f3       	brcs	.-12     	; 0x145e <round+0x1a>
    146a:	b6 2f       	mov	r27, r22
    146c:	b1 70       	andi	r27, 0x01	; 1
    146e:	6b 0f       	add	r22, r27
    1470:	71 1d       	adc	r23, r1
    1472:	81 1d       	adc	r24, r1
    1474:	20 f4       	brcc	.+8      	; 0x147e <round+0x3a>
    1476:	87 95       	ror	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	93 95       	inc	r25
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <__fp_mintl>
    1480:	1c c0       	rjmp	.+56     	; 0x14ba <__fp_mpack>
    1482:	77 cf       	rjmp	.-274    	; 0x1372 <__fp_szero>

00001484 <__fp_mintl>:
    1484:	88 23       	and	r24, r24
    1486:	71 f4       	brne	.+28     	; 0x14a4 <__fp_mintl+0x20>
    1488:	77 23       	and	r23, r23
    148a:	21 f0       	breq	.+8      	; 0x1494 <__fp_mintl+0x10>
    148c:	98 50       	subi	r25, 0x08	; 8
    148e:	87 2b       	or	r24, r23
    1490:	76 2f       	mov	r23, r22
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <__fp_mintl+0x1e>
    1494:	66 23       	and	r22, r22
    1496:	11 f4       	brne	.+4      	; 0x149c <__fp_mintl+0x18>
    1498:	99 27       	eor	r25, r25
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <__fp_mintl+0x32>
    149c:	90 51       	subi	r25, 0x10	; 16
    149e:	86 2b       	or	r24, r22
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	2a f0       	brmi	.+10     	; 0x14b0 <__fp_mintl+0x2c>
    14a6:	9a 95       	dec	r25
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	da f7       	brpl	.-10     	; 0x14a6 <__fp_mintl+0x22>
    14b0:	88 0f       	add	r24, r24
    14b2:	96 95       	lsr	r25
    14b4:	87 95       	ror	r24
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret

000014ba <__fp_mpack>:
    14ba:	9f 3f       	cpi	r25, 0xFF	; 255
    14bc:	31 f0       	breq	.+12     	; 0x14ca <__fp_mpack_finite+0xc>

000014be <__fp_mpack_finite>:
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <__fp_mpack_finite+0xc>
    14c2:	87 95       	ror	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	88 0f       	add	r24, r24
    14cc:	91 1d       	adc	r25, r1
    14ce:	96 95       	lsr	r25
    14d0:	87 95       	ror	r24
    14d2:	97 f9       	bld	r25, 7
    14d4:	08 95       	ret

000014d6 <malloc>:
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	91 05       	cpc	r25, r1
    14de:	10 f4       	brcc	.+4      	; 0x14e4 <malloc+0xe>
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	e0 91 4f 25 	lds	r30, 0x254F
    14e8:	f0 91 50 25 	lds	r31, 0x2550
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	c0 e0       	ldi	r28, 0x00	; 0
    14f2:	d0 e0       	ldi	r29, 0x00	; 0
    14f4:	30 97       	sbiw	r30, 0x00	; 0
    14f6:	11 f1       	breq	.+68     	; 0x153c <malloc+0x66>
    14f8:	40 81       	ld	r20, Z
    14fa:	51 81       	ldd	r21, Z+1	; 0x01
    14fc:	48 17       	cp	r20, r24
    14fe:	59 07       	cpc	r21, r25
    1500:	c0 f0       	brcs	.+48     	; 0x1532 <malloc+0x5c>
    1502:	48 17       	cp	r20, r24
    1504:	59 07       	cpc	r21, r25
    1506:	61 f4       	brne	.+24     	; 0x1520 <malloc+0x4a>
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	20 97       	sbiw	r28, 0x00	; 0
    150e:	19 f0       	breq	.+6      	; 0x1516 <malloc+0x40>
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	9b 83       	std	Y+3, r25	; 0x03
    1514:	2b c0       	rjmp	.+86     	; 0x156c <malloc+0x96>
    1516:	80 93 4f 25 	sts	0x254F, r24
    151a:	90 93 50 25 	sts	0x2550, r25
    151e:	26 c0       	rjmp	.+76     	; 0x156c <malloc+0x96>
    1520:	21 15       	cp	r18, r1
    1522:	31 05       	cpc	r19, r1
    1524:	19 f0       	breq	.+6      	; 0x152c <malloc+0x56>
    1526:	42 17       	cp	r20, r18
    1528:	53 07       	cpc	r21, r19
    152a:	18 f4       	brcc	.+6      	; 0x1532 <malloc+0x5c>
    152c:	9a 01       	movw	r18, r20
    152e:	be 01       	movw	r22, r28
    1530:	df 01       	movw	r26, r30
    1532:	ef 01       	movw	r28, r30
    1534:	02 80       	ldd	r0, Z+2	; 0x02
    1536:	f3 81       	ldd	r31, Z+3	; 0x03
    1538:	e0 2d       	mov	r30, r0
    153a:	dc cf       	rjmp	.-72     	; 0x14f4 <malloc+0x1e>
    153c:	21 15       	cp	r18, r1
    153e:	31 05       	cpc	r19, r1
    1540:	09 f1       	breq	.+66     	; 0x1584 <malloc+0xae>
    1542:	28 1b       	sub	r18, r24
    1544:	39 0b       	sbc	r19, r25
    1546:	24 30       	cpi	r18, 0x04	; 4
    1548:	31 05       	cpc	r19, r1
    154a:	90 f4       	brcc	.+36     	; 0x1570 <malloc+0x9a>
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	13 97       	sbiw	r26, 0x03	; 3
    1554:	61 15       	cp	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	21 f0       	breq	.+8      	; 0x1562 <malloc+0x8c>
    155a:	fb 01       	movw	r30, r22
    155c:	82 83       	std	Z+2, r24	; 0x02
    155e:	93 83       	std	Z+3, r25	; 0x03
    1560:	04 c0       	rjmp	.+8      	; 0x156a <malloc+0x94>
    1562:	80 93 4f 25 	sts	0x254F, r24
    1566:	90 93 50 25 	sts	0x2550, r25
    156a:	fd 01       	movw	r30, r26
    156c:	32 96       	adiw	r30, 0x02	; 2
    156e:	44 c0       	rjmp	.+136    	; 0x15f8 <malloc+0x122>
    1570:	fd 01       	movw	r30, r26
    1572:	e2 0f       	add	r30, r18
    1574:	f3 1f       	adc	r31, r19
    1576:	81 93       	st	Z+, r24
    1578:	91 93       	st	Z+, r25
    157a:	22 50       	subi	r18, 0x02	; 2
    157c:	31 09       	sbc	r19, r1
    157e:	2d 93       	st	X+, r18
    1580:	3c 93       	st	X, r19
    1582:	3a c0       	rjmp	.+116    	; 0x15f8 <malloc+0x122>
    1584:	20 91 4d 25 	lds	r18, 0x254D
    1588:	30 91 4e 25 	lds	r19, 0x254E
    158c:	23 2b       	or	r18, r19
    158e:	41 f4       	brne	.+16     	; 0x15a0 <malloc+0xca>
    1590:	20 91 02 20 	lds	r18, 0x2002
    1594:	30 91 03 20 	lds	r19, 0x2003
    1598:	20 93 4d 25 	sts	0x254D, r18
    159c:	30 93 4e 25 	sts	0x254E, r19
    15a0:	20 91 00 20 	lds	r18, 0x2000
    15a4:	30 91 01 20 	lds	r19, 0x2001
    15a8:	21 15       	cp	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	41 f4       	brne	.+16     	; 0x15be <malloc+0xe8>
    15ae:	2d b7       	in	r18, 0x3d	; 61
    15b0:	3e b7       	in	r19, 0x3e	; 62
    15b2:	40 91 04 20 	lds	r20, 0x2004
    15b6:	50 91 05 20 	lds	r21, 0x2005
    15ba:	24 1b       	sub	r18, r20
    15bc:	35 0b       	sbc	r19, r21
    15be:	e0 91 4d 25 	lds	r30, 0x254D
    15c2:	f0 91 4e 25 	lds	r31, 0x254E
    15c6:	e2 17       	cp	r30, r18
    15c8:	f3 07       	cpc	r31, r19
    15ca:	a0 f4       	brcc	.+40     	; 0x15f4 <malloc+0x11e>
    15cc:	2e 1b       	sub	r18, r30
    15ce:	3f 0b       	sbc	r19, r31
    15d0:	28 17       	cp	r18, r24
    15d2:	39 07       	cpc	r19, r25
    15d4:	78 f0       	brcs	.+30     	; 0x15f4 <malloc+0x11e>
    15d6:	ac 01       	movw	r20, r24
    15d8:	4e 5f       	subi	r20, 0xFE	; 254
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	24 17       	cp	r18, r20
    15de:	35 07       	cpc	r19, r21
    15e0:	48 f0       	brcs	.+18     	; 0x15f4 <malloc+0x11e>
    15e2:	4e 0f       	add	r20, r30
    15e4:	5f 1f       	adc	r21, r31
    15e6:	40 93 4d 25 	sts	0x254D, r20
    15ea:	50 93 4e 25 	sts	0x254E, r21
    15ee:	81 93       	st	Z+, r24
    15f0:	91 93       	st	Z+, r25
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <malloc+0x122>
    15f4:	e0 e0       	ldi	r30, 0x00	; 0
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	cf 01       	movw	r24, r30
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <free>:
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	09 f4       	brne	.+2      	; 0x160e <free+0xe>
    160c:	8c c0       	rjmp	.+280    	; 0x1726 <free+0x126>
    160e:	fc 01       	movw	r30, r24
    1610:	32 97       	sbiw	r30, 0x02	; 2
    1612:	12 82       	std	Z+2, r1	; 0x02
    1614:	13 82       	std	Z+3, r1	; 0x03
    1616:	00 91 4f 25 	lds	r16, 0x254F
    161a:	10 91 50 25 	lds	r17, 0x2550
    161e:	01 15       	cp	r16, r1
    1620:	11 05       	cpc	r17, r1
    1622:	81 f4       	brne	.+32     	; 0x1644 <free+0x44>
    1624:	20 81       	ld	r18, Z
    1626:	31 81       	ldd	r19, Z+1	; 0x01
    1628:	82 0f       	add	r24, r18
    162a:	93 1f       	adc	r25, r19
    162c:	20 91 4d 25 	lds	r18, 0x254D
    1630:	30 91 4e 25 	lds	r19, 0x254E
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	79 f5       	brne	.+94     	; 0x1698 <free+0x98>
    163a:	e0 93 4d 25 	sts	0x254D, r30
    163e:	f0 93 4e 25 	sts	0x254E, r31
    1642:	71 c0       	rjmp	.+226    	; 0x1726 <free+0x126>
    1644:	d8 01       	movw	r26, r16
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	ae 17       	cp	r26, r30
    164c:	bf 07       	cpc	r27, r31
    164e:	50 f4       	brcc	.+20     	; 0x1664 <free+0x64>
    1650:	12 96       	adiw	r26, 0x02	; 2
    1652:	2d 91       	ld	r18, X+
    1654:	3c 91       	ld	r19, X
    1656:	13 97       	sbiw	r26, 0x03	; 3
    1658:	ad 01       	movw	r20, r26
    165a:	21 15       	cp	r18, r1
    165c:	31 05       	cpc	r19, r1
    165e:	09 f1       	breq	.+66     	; 0x16a2 <free+0xa2>
    1660:	d9 01       	movw	r26, r18
    1662:	f3 cf       	rjmp	.-26     	; 0x164a <free+0x4a>
    1664:	9d 01       	movw	r18, r26
    1666:	da 01       	movw	r26, r20
    1668:	22 83       	std	Z+2, r18	; 0x02
    166a:	33 83       	std	Z+3, r19	; 0x03
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	86 0f       	add	r24, r22
    1672:	97 1f       	adc	r25, r23
    1674:	82 17       	cp	r24, r18
    1676:	93 07       	cpc	r25, r19
    1678:	69 f4       	brne	.+26     	; 0x1694 <free+0x94>
    167a:	ec 01       	movw	r28, r24
    167c:	28 81       	ld	r18, Y
    167e:	39 81       	ldd	r19, Y+1	; 0x01
    1680:	26 0f       	add	r18, r22
    1682:	37 1f       	adc	r19, r23
    1684:	2e 5f       	subi	r18, 0xFE	; 254
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	20 83       	st	Z, r18
    168a:	31 83       	std	Z+1, r19	; 0x01
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	9b 81       	ldd	r25, Y+3	; 0x03
    1690:	82 83       	std	Z+2, r24	; 0x02
    1692:	93 83       	std	Z+3, r25	; 0x03
    1694:	45 2b       	or	r20, r21
    1696:	29 f4       	brne	.+10     	; 0x16a2 <free+0xa2>
    1698:	e0 93 4f 25 	sts	0x254F, r30
    169c:	f0 93 50 25 	sts	0x2550, r31
    16a0:	42 c0       	rjmp	.+132    	; 0x1726 <free+0x126>
    16a2:	12 96       	adiw	r26, 0x02	; 2
    16a4:	ed 93       	st	X+, r30
    16a6:	fc 93       	st	X, r31
    16a8:	13 97       	sbiw	r26, 0x03	; 3
    16aa:	ed 01       	movw	r28, r26
    16ac:	49 91       	ld	r20, Y+
    16ae:	59 91       	ld	r21, Y+
    16b0:	9e 01       	movw	r18, r28
    16b2:	24 0f       	add	r18, r20
    16b4:	35 1f       	adc	r19, r21
    16b6:	e2 17       	cp	r30, r18
    16b8:	f3 07       	cpc	r31, r19
    16ba:	71 f4       	brne	.+28     	; 0x16d8 <free+0xd8>
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	84 0f       	add	r24, r20
    16c2:	95 1f       	adc	r25, r21
    16c4:	02 96       	adiw	r24, 0x02	; 2
    16c6:	8d 93       	st	X+, r24
    16c8:	9c 93       	st	X, r25
    16ca:	11 97       	sbiw	r26, 0x01	; 1
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	12 96       	adiw	r26, 0x02	; 2
    16d2:	8d 93       	st	X+, r24
    16d4:	9c 93       	st	X, r25
    16d6:	13 97       	sbiw	r26, 0x03	; 3
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	d8 01       	movw	r26, r16
    16de:	12 96       	adiw	r26, 0x02	; 2
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	13 97       	sbiw	r26, 0x03	; 3
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <free+0xf0>
    16ea:	f8 01       	movw	r30, r16
    16ec:	8c 01       	movw	r16, r24
    16ee:	f6 cf       	rjmp	.-20     	; 0x16dc <free+0xdc>
    16f0:	8d 91       	ld	r24, X+
    16f2:	9c 91       	ld	r25, X
    16f4:	98 01       	movw	r18, r16
    16f6:	2e 5f       	subi	r18, 0xFE	; 254
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	82 0f       	add	r24, r18
    16fc:	93 1f       	adc	r25, r19
    16fe:	20 91 4d 25 	lds	r18, 0x254D
    1702:	30 91 4e 25 	lds	r19, 0x254E
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	69 f4       	brne	.+26     	; 0x1726 <free+0x126>
    170c:	30 97       	sbiw	r30, 0x00	; 0
    170e:	29 f4       	brne	.+10     	; 0x171a <free+0x11a>
    1710:	10 92 4f 25 	sts	0x254F, r1
    1714:	10 92 50 25 	sts	0x2550, r1
    1718:	02 c0       	rjmp	.+4      	; 0x171e <free+0x11e>
    171a:	12 82       	std	Z+2, r1	; 0x02
    171c:	13 82       	std	Z+3, r1	; 0x03
    171e:	00 93 4d 25 	sts	0x254D, r16
    1722:	10 93 4e 25 	sts	0x254E, r17
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <memset>:
    1730:	dc 01       	movw	r26, r24
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <memset+0x6>
    1734:	6d 93       	st	X+, r22
    1736:	41 50       	subi	r20, 0x01	; 1
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	e0 f7       	brcc	.-8      	; 0x1734 <memset+0x4>
    173c:	08 95       	ret

0000173e <strcat>:
    173e:	fb 01       	movw	r30, r22
    1740:	dc 01       	movw	r26, r24
    1742:	0d 90       	ld	r0, X+
    1744:	00 20       	and	r0, r0
    1746:	e9 f7       	brne	.-6      	; 0x1742 <strcat+0x4>
    1748:	11 97       	sbiw	r26, 0x01	; 1
    174a:	01 90       	ld	r0, Z+
    174c:	0d 92       	st	X+, r0
    174e:	00 20       	and	r0, r0
    1750:	e1 f7       	brne	.-8      	; 0x174a <strcat+0xc>
    1752:	08 95       	ret

00001754 <strcmp>:
    1754:	fb 01       	movw	r30, r22
    1756:	dc 01       	movw	r26, r24
    1758:	8d 91       	ld	r24, X+
    175a:	01 90       	ld	r0, Z+
    175c:	80 19       	sub	r24, r0
    175e:	01 10       	cpse	r0, r1
    1760:	d9 f3       	breq	.-10     	; 0x1758 <strcmp+0x4>
    1762:	99 0b       	sbc	r25, r25
    1764:	08 95       	ret

00001766 <strcpy>:
    1766:	fb 01       	movw	r30, r22
    1768:	dc 01       	movw	r26, r24
    176a:	01 90       	ld	r0, Z+
    176c:	0d 92       	st	X+, r0
    176e:	00 20       	and	r0, r0
    1770:	e1 f7       	brne	.-8      	; 0x176a <strcpy+0x4>
    1772:	08 95       	ret

00001774 <__itoa_ncheck>:
    1774:	bb 27       	eor	r27, r27
    1776:	4a 30       	cpi	r20, 0x0A	; 10
    1778:	31 f4       	brne	.+12     	; 0x1786 <__itoa_ncheck+0x12>
    177a:	99 23       	and	r25, r25
    177c:	22 f4       	brpl	.+8      	; 0x1786 <__itoa_ncheck+0x12>
    177e:	bd e2       	ldi	r27, 0x2D	; 45
    1780:	90 95       	com	r25
    1782:	81 95       	neg	r24
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	01 c0       	rjmp	.+2      	; 0x178a <__utoa_common>

00001788 <__utoa_ncheck>:
    1788:	bb 27       	eor	r27, r27

0000178a <__utoa_common>:
    178a:	fb 01       	movw	r30, r22
    178c:	55 27       	eor	r21, r21
    178e:	aa 27       	eor	r26, r26
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	aa 1f       	adc	r26, r26
    1796:	a4 17       	cp	r26, r20
    1798:	10 f0       	brcs	.+4      	; 0x179e <__utoa_common+0x14>
    179a:	a4 1b       	sub	r26, r20
    179c:	83 95       	inc	r24
    179e:	50 51       	subi	r21, 0x10	; 16
    17a0:	b9 f7       	brne	.-18     	; 0x1790 <__utoa_common+0x6>
    17a2:	a0 5d       	subi	r26, 0xD0	; 208
    17a4:	aa 33       	cpi	r26, 0x3A	; 58
    17a6:	08 f0       	brcs	.+2      	; 0x17aa <__utoa_common+0x20>
    17a8:	a9 5d       	subi	r26, 0xD9	; 217
    17aa:	a1 93       	st	Z+, r26
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	79 f7       	brne	.-34     	; 0x178e <__utoa_common+0x4>
    17b0:	b1 11       	cpse	r27, r1
    17b2:	b1 93       	st	Z+, r27
    17b4:	11 92       	st	Z+, r1
    17b6:	cb 01       	movw	r24, r22
    17b8:	00 c0       	rjmp	.+0      	; 0x17ba <strrev>

000017ba <strrev>:
    17ba:	dc 01       	movw	r26, r24
    17bc:	fc 01       	movw	r30, r24
    17be:	67 2f       	mov	r22, r23
    17c0:	71 91       	ld	r23, Z+
    17c2:	77 23       	and	r23, r23
    17c4:	e1 f7       	brne	.-8      	; 0x17be <strrev+0x4>
    17c6:	32 97       	sbiw	r30, 0x02	; 2
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <strrev+0x18>
    17ca:	7c 91       	ld	r23, X
    17cc:	6d 93       	st	X+, r22
    17ce:	70 83       	st	Z, r23
    17d0:	62 91       	ld	r22, -Z
    17d2:	ae 17       	cp	r26, r30
    17d4:	bf 07       	cpc	r27, r31
    17d6:	c8 f3       	brcs	.-14     	; 0x17ca <strrev+0x10>
    17d8:	08 95       	ret

000017da <_exit>:
    17da:	f8 94       	cli

000017dc <__stop_program>:
    17dc:	ff cf       	rjmp	.-2      	; 0x17dc <__stop_program>
